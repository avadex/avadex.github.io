{"version":3,"sources":["lib/utils/formatLocaleNumber.test.ts"],"names":["expectedOutput","l","Error","TEST_MATRIX","SUPPORTED_LOCALES","map","locale","input","expected","describe","test","concurrent","each","a","result","formatLocaleNumber","number","expect","toEqual"],"mappings":"kLAMA,SAASA,EAAeC,GACtB,OAAQA,GACN,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAM,gBACR,IAAK,QACH,MAAM,0BACR,IAAK,QACH,MAAM,iFACR,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAM,sBACR,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,MAAM,gBACR,QACE,MAAM,IAAIC,MAAM,gBAItB,IAAMC,EAAcC,IAAkBC,KAAI,SAACC,GAAD,MAAa,CACrDA,SACAC,MAhDY,YAiDZC,SAAUR,EAAeM,OAG3BG,SAAS,sBAAsB,WAC7BC,KAAKC,WAAWC,KAAKT,EAArBO,CAAkC,iCAAlC,uCAAoE,mCAAAG,EAAA,sDAASP,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,SACpFM,EAASC,kBAAmB,CAAEC,OAAQT,EAAOD,WACnDW,OAAOH,GAAQI,QAAQV,GAF2C,2CAApE","file":"static/js/93.f86d0a50.chunk.js","sourcesContent":["import { SUPPORTED_LOCALES, SupportedLocale } from 'constants/locales'\n\nimport formatLocaleNumber from './formatLocaleNumber'\n\nconst INPUT = 4000000.123 // 4 million\n\nfunction expectedOutput(l: SupportedLocale): string {\n  switch (l) {\n    case 'en-US':\n    case 'he-IL':\n    case 'ja-JP':\n    case 'ko-KR':\n    case 'zh-CN':\n    case 'sw-TZ':\n    case 'zh-TW':\n      return `4,000,000.123`\n    case 'fr-FR':\n      return `4 000 000,123`\n    case 'ar-SA':\n      return `٤٬٠٠٠٬٠٠٠٫١٢٣`\n    case 'cs-CZ':\n    case 'fi-FI':\n    case 'af-ZA':\n    case 'hu-HU':\n    case 'no-NO':\n    case 'pl-PL':\n    case 'pt-PT':\n    case 'ru-RU':\n    case 'sv-SE':\n    case 'uk-UA':\n      return `4 000 000,123`\n    case 'ca-ES':\n    case 'da-DK':\n    case 'de-DE':\n    case 'el-GR':\n    case 'es-ES':\n    case 'id-ID':\n    case 'it-IT':\n    case 'nl-NL':\n    case 'pt-BR':\n    case 'ro-RO':\n    case 'sr-SP':\n    case 'tr-TR':\n    case 'vi-VN':\n      return `4.000.000,123`\n    default:\n      throw new Error('unreachable')\n  }\n}\n\nconst TEST_MATRIX = SUPPORTED_LOCALES.map((locale) => ({\n  locale,\n  input: INPUT,\n  expected: expectedOutput(locale),\n}))\n\ndescribe('formatLocaleNumber', () => {\n  test.concurrent.each(TEST_MATRIX)('should format correctly for %p', async ({ locale, input, expected }) => {\n    const result = formatLocaleNumber({ number: input, locale })\n    expect(result).toEqual(expected)\n  })\n})\n"],"sourceRoot":""}