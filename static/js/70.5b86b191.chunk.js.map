{"version":3,"sources":["lib/theme/styled.ts","lib/theme/dynamic.tsx"],"names":["styled","css","styledCss","keyframes","styledKeyframes","useTheme","useStyled","ThemedProvider","StyledProvider","black","white","light","interactive","transparentize","outline","primary","secondary","onInteractive","dark","getDynamicTheme","theme","color","colors","readableColor","module","onHover","opacify","DynamicThemeProvider","children","value","useMemo","accessibleColor","AAscore","hex","contrastify","darken","lighten","getAccessibleColor","style"],"mappings":"wTAaeA,YAAf,QACO,IAAMC,EAAMC,MACNC,EAAYC,YACZC,EAAWC,WACXC,EAAiBC,iB,iMCPxBC,EAAQ,iBACRC,EAAQ,mBAERC,EAAuB,CAE3BC,YAAaC,YAAe,EAAI,IAAMJ,GACtCK,QAASD,YAAe,IAAUJ,GAGlCM,QAASN,EACTO,UAAWH,YAAe,IAAUJ,GACpCQ,cAAeP,GAGXQ,EAAsB,CAE1BN,YAAaC,YAAe,IAAUH,GACtCI,QAASD,YAAe,IAAUH,GAGlCK,QAASL,EACTM,UAAWH,YAAe,GAASH,GACnCO,cAAeR,GAGV,SAASU,EAAgBC,EAAsBC,GACpD,IAAMC,EAAS,CAAEX,QAAOO,QAAOK,YAAcF,EAAO,QAAS,QAAQ,IACrE,OAAO,uCACFD,GACAE,GAFL,IAGEE,OAAQH,EACRI,QAAS,SAACJ,GAAD,OAAoBA,IAAUC,EAAOP,QAAUF,YAAe,GAAKS,EAAOP,SAAWW,YAAQ,IAAML,MAsBzG,SAASM,EAAT,GAA+E,IAA/CN,EAA8C,EAA9CA,MAAOO,EAAuC,EAAvCA,SACtCR,EAAQf,qBACRwB,EAAQC,mBAAQ,WACpB,IAAKT,EACH,OAAOD,EAGT,IAAMW,EAzBV,SAA4BX,EAAsBC,GAKhD,IAJA,IACMN,EADUI,EAAgBC,EAAOC,GACjCN,QACFiB,EAAUC,YAAIZ,EAAON,GACnBmB,EAAcD,YAAIZ,EAAO,QAAUY,YAAIZ,EAAO,QAAUc,IAASC,IAChEJ,EAAU,GAEfjB,EAAUI,EAAgBC,EAD1BC,EAAQa,EAAY,KAAOb,IACaN,QACxCiB,EAAUC,YAAIZ,EAAON,GAEvB,OAAOM,EAemBgB,CAAmBjB,EAAOC,GAClD,OAAOF,EAAgBC,EAAOW,KAC7B,CAACX,EAAOC,IACX,OACE,cAAC,iBAAD,CAAgBD,MAAOS,EAAvB,SACE,qBAAKS,MAAO,CAAEjB,MAAOQ,EAAMd,SAA3B,SAAuCa","file":"static/js/70.5b86b191.chunk.js","sourcesContent":["/* eslint-disable no-restricted-imports */\nimport styled, {\n  css as styledCss,\n  keyframes as styledKeyframes,\n  ThemedBaseStyledInterface,\n  ThemedCssFunction,\n  ThemeProvider as StyledProvider,\n  ThemeProviderComponent,\n  useTheme as useStyled,\n} from 'styled-components/macro'\n\nimport { ComputedTheme } from './theme'\n\nexport default styled as unknown as ThemedBaseStyledInterface<ComputedTheme>\nexport const css = styledCss as unknown as ThemedCssFunction<ComputedTheme>\nexport const keyframes = styledKeyframes\nexport const useTheme = useStyled as unknown as () => ComputedTheme\nexport const ThemedProvider = StyledProvider as unknown as ThemeProviderComponent<ComputedTheme>\n","import { darken, lighten, opacify, transparentize } from 'polished'\nimport { readableColor } from 'polished'\nimport { ReactNode, useMemo } from 'react'\nimport { hex } from 'wcag-contrast'\n\nimport { ThemedProvider, useTheme } from './styled'\nimport { Colors, ComputedTheme } from './theme'\n\ntype DynamicColors = Pick<Colors, 'interactive' | 'outline' | 'primary' | 'secondary' | 'onInteractive'>\n\nconst black = 'hsl(0, 0%, 0%)'\nconst white = 'hsl(0, 0%, 100%)'\n\nconst light: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.54, black),\n  outline: transparentize(1 - 0.24, black),\n\n  // text\n  primary: black,\n  secondary: transparentize(1 - 0.64, black),\n  onInteractive: white,\n}\n\nconst dark: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.48, white),\n  outline: transparentize(1 - 0.12, white),\n\n  // text\n  primary: white,\n  secondary: transparentize(1 - 0.6, white),\n  onInteractive: black,\n}\n\nexport function getDynamicTheme(theme: ComputedTheme, color: string): ComputedTheme {\n  const colors = { light, dark }[readableColor(color, 'light', 'dark', false) as 'light' | 'dark']\n  return {\n    ...theme,\n    ...colors,\n    module: color,\n    onHover: (color: string) => (color === colors.primary ? transparentize(0.4, colors.primary) : opacify(0.25, color)),\n  }\n}\n\nfunction getAccessibleColor(theme: ComputedTheme, color: string) {\n  const dynamic = getDynamicTheme(theme, color)\n  let { primary } = dynamic\n  let AAscore = hex(color, primary)\n  const contrastify = hex(color, '#000') > hex(color, '#fff') ? darken : lighten\n  while (AAscore < 3) {\n    color = contrastify(0.005, color)\n    primary = getDynamicTheme(theme, color).primary\n    AAscore = hex(color, primary)\n  }\n  return color\n}\n\ninterface DynamicThemeProviderProps {\n  color?: string\n  children: ReactNode\n}\n\nexport function DynamicThemeProvider({ color, children }: DynamicThemeProviderProps) {\n  const theme = useTheme()\n  const value = useMemo(() => {\n    if (!color) {\n      return theme\n    }\n\n    const accessibleColor = getAccessibleColor(theme, color)\n    return getDynamicTheme(theme, accessibleColor)\n  }, [theme, color])\n  return (\n    <ThemedProvider theme={value}>\n      <div style={{ color: value.primary }}>{children}</div>\n    </ThemedProvider>\n  )\n}\n"],"sourceRoot":""}