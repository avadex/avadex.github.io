{"version":3,"sources":["lib/theme/index.tsx","lib/components/Row.tsx","lib/theme/styled.ts","lib/state/swap.ts","lib/state/atoms.ts","lib/state/settings.ts","lib/theme/dynamic.tsx","lib/theme/layer.ts","lib/theme/type.tsx","lib/components/Swap/Summary/Details.tsx"],"names":["styled","brand","stateColors","active","success","warning","error","lightTheme","accent","container","module","interactive","outline","dialog","onAccent","primary","secondary","hint","onInteractive","currentColor","darkThemeAccent","darkTheme","readableColor","defaultTheme","borderRadius","fontFamily","fontFamilyVariable","fontFamilyCode","tokenColorExtraction","useSystemTheme","prefersDark","window","matchMedia","useState","matches","systemTheme","setSystemTheme","addEventListener","e","ThemeContext","createContext","toComputedTheme","ThemeProvider","theme","children","contextTheme","useContext","value","useMemo","Provider","Number","isFinite","Math","min","max","onHover","color","transparentize","mix","Row","div","align","flex","grow","gap","Children","count","justify","pad","css","styledCss","keyframes","styledKeyframes","useTheme","useStyled","ThemedProvider","StyledProvider","Field","swapAtom","atomWithImmer","independentField","INPUT","amount","nativeOnChain","SupportedChainId","AVALANCHE","independentFieldAtom","pickAtom","displayTxHashAtom","atom","undefined","feeOptionsAtom","anAtom","key","setter","draft","update","get","set","withImmer","derived","setTogglable","MAX_VALID_SLIPPAGE","Percent","MIN_HIGH_SLIPPAGE","initialSettings","maxSlippage","transactionTtl","mockTogglable","clientSideRouter","settingsAtom","atomWithReset","maxSlippageAtom","transactionTtlAtom","mockTogglableAtom","clientSideRouterAtom","black","white","light","dark","getDynamicTheme","colors","opacify","DynamicThemeProvider","accessibleColor","AAscore","hex","contrastify","darken","lighten","getAccessibleColor","style","Layer","TextWrapper","Text","lineHeight","TransitionTextWrapper","H1","props","className","fontSize","fontWeight","H2","H3","Subhead1","Subhead2","Body1","Body2","Caption","Badge","ButtonLarge","ButtonMedium","ButtonSmall","TransitionButton","buttonSize","small","medium","large","Code","Value","span","Detail","label","Details","trade","allowedSlippage","inputAmount","outputAmount","inputCurrency","currency","outputCurrency","priceImpact","computeRealizedPriceImpact","lpFeeAmount","computeRealizedLPFeeAmount","integrator","location","hostname","feeOptions","useAtomValue","i18n","useLingui","details","rows","parsedConvenienceFee","formatCurrencyAmount","multiply","fee","locale","push","symbol","currencyId","priceImpactRow","toFixed","lessThan","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_MEDIUM","localizedFeeAmount","tradeType","TradeType","EXACT_OUTPUT","localizedMaxSent","maximumAmountIn","EXACT_INPUT","minimumAmountOut","slippageToleranceRow","map","detail"],"mappings":"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","file":"static/js/24.5b6dd047.chunk.js","sourcesContent":["import 'lib/assets/fonts.scss'\nimport '@fontsource/ibm-plex-mono/400.css'\nimport '@fontsource/inter/variable.css'\nimport '@fontsource/inter/400.css'\nimport '@fontsource/inter/500.css'\nimport '@fontsource/inter/600.css'\n\nimport { mix, readableColor, transparentize } from 'polished'\nimport { createContext, ReactNode, useContext, useMemo, useState } from 'react'\n\nimport styled, { ThemedProvider } from './styled'\nimport { Colors, ComputedTheme, Theme } from './theme'\n\nexport default styled\nexport * from './dynamic'\nexport * from './layer'\nexport * from './styled'\nexport * from './theme'\nexport * as ThemedText from './type'\n\nexport const brand = 'hsl(331.3, 100%, 50%)'\n\nconst stateColors = {\n  active: 'hsl(215, 79%, 51.4%)',\n  success: 'hsl(145, 63.4%, 41.8%)',\n  warning: 'hsl(43, 89.9%, 53.5%)',\n  error: 'hsl(0, 98%, 62.2%)',\n}\n\nexport const lightTheme: Colors = {\n  // surface\n  accent: brand,\n  container: 'hsl(220, 23%, 97.5%)',\n  module: 'hsl(231, 14%, 90%)',\n  interactive: 'hsl(229, 13%, 83%)',\n  outline: 'hsl(225, 7%, 78%)',\n  dialog: 'hsl(0, 0%, 100%)',\n\n  // text\n  onAccent: 'hsl(0, 0%, 100%)',\n  primary: 'hsl(0, 0%, 0%)',\n  secondary: 'hsl(227, 10%, 37.5%)',\n  hint: 'hsl(224, 9%, 57%)',\n  onInteractive: 'hsl(0, 0%, 0%)',\n\n  // state\n  ...stateColors,\n\n  currentColor: 'currentColor',\n}\n\nconst darkThemeAccent = 'hsl(215, 79%, 51.4%)'\n\nexport const darkTheme: Colors = {\n  // surface\n  accent: darkThemeAccent,\n  container: 'hsl(220, 10.7%, 11%)',\n  module: 'hsl(222, 10.2%, 19.2%)',\n  interactive: 'hsl(224, 10.5%, 281%)',\n  outline: 'hsl(227, 10%, 37.5%)',\n  dialog: 'hsl(0, 0%, 0%)',\n\n  // text\n  onAccent: readableColor(darkThemeAccent),\n  primary: 'hsl(0, 0%, 100%)',\n  secondary: 'hsl(224, 8.7%, 57.1%)',\n  hint: 'hsl(225, 10%, 47.1%)',\n  onInteractive: 'hsl(0, 0%, 100%)',\n\n  // state\n  ...stateColors,\n\n  currentColor: 'currentColor',\n}\n\nexport const defaultTheme = {\n  borderRadius: 1,\n  fontFamily: '\"Inter\", sans-serif',\n  fontFamilyVariable: '\"InterVariable\", sans-serif',\n  fontFamilyCode: 'IBM Plex Mono',\n  tokenColorExtraction: false,\n  ...lightTheme,\n}\n\nexport function useSystemTheme() {\n  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)')\n  const [systemTheme, setSystemTheme] = useState(prefersDark.matches ? darkTheme : lightTheme)\n  prefersDark.addEventListener('change', (e) => {\n    setSystemTheme(e.matches ? darkTheme : lightTheme)\n  })\n  return systemTheme\n}\n\nconst ThemeContext = createContext<ComputedTheme>(toComputedTheme(defaultTheme))\n\ninterface ThemeProviderProps {\n  theme?: Theme\n  children: ReactNode\n}\n\nexport function ThemeProvider({ theme, children }: ThemeProviderProps) {\n  const contextTheme = useContext(ThemeContext)\n  const value = useMemo(() => {\n    return toComputedTheme({\n      ...contextTheme,\n      ...theme,\n    } as Required<Theme>)\n  }, [contextTheme, theme])\n  return (\n    <ThemeContext.Provider value={value}>\n      <ThemedProvider theme={value}>{children}</ThemedProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nfunction toComputedTheme(theme: Required<Theme>): ComputedTheme {\n  return {\n    ...theme,\n    borderRadius: clamp(\n      Number.isFinite(theme.borderRadius) ? (theme.borderRadius as number) : theme.borderRadius ? 1 : 0\n    ),\n    onHover: (color: string) =>\n      color === theme.primary ? transparentize(0.4, theme.primary) : mix(0.16, theme.primary, color),\n  }\n\n  function clamp(value: number) {\n    return Math.min(Math.max(value, 0), 1)\n  }\n}\n","import styled, { Color, Theme } from 'lib/theme'\nimport { Children, ReactNode } from 'react'\n\nconst Row = styled.div<{\n  color?: Color\n  align?: string\n  justify?: string\n  pad?: number\n  gap?: number\n  flex?: true\n  grow?: true | 'first' | 'last'\n  children?: ReactNode\n  theme: Theme\n}>`\n  align-items: ${({ align }) => align ?? 'center'};\n  color: ${({ color, theme }) => color && theme[color]};\n  display: ${({ flex }) => (flex ? 'flex' : 'grid')};\n  flex-flow: wrap;\n  flex-grow: ${({ grow }) => grow && 1};\n  gap: ${({ gap }) => gap && `${gap}em`};\n  grid-auto-flow: column;\n  grid-template-columns: ${({ grow, children }) => {\n    if (grow === 'first') return '1fr'\n    if (grow === 'last') return `repeat(${Children.count(children) - 1}, auto) 1fr`\n    if (grow) return `repeat(${Children.count(children)}, 1fr)`\n    return undefined\n  }};\n  justify-content: ${({ justify }) => justify ?? 'space-between'};\n  padding: ${({ pad }) => pad && `0 ${pad}em`};\n`\n\nexport default Row\n","/* eslint-disable no-restricted-imports */\nimport styled, {\n  css as styledCss,\n  keyframes as styledKeyframes,\n  ThemedBaseStyledInterface,\n  ThemedCssFunction,\n  ThemeProvider as StyledProvider,\n  ThemeProviderComponent,\n  useTheme as useStyled,\n} from 'styled-components/macro'\n\nimport { ComputedTheme } from './theme'\n\nexport default styled as unknown as ThemedBaseStyledInterface<ComputedTheme>\nexport const css = styledCss as unknown as ThemedCssFunction<ComputedTheme>\nexport const keyframes = styledKeyframes\nexport const useTheme = useStyled as unknown as () => ComputedTheme\nexport const ThemedProvider = StyledProvider as unknown as ThemeProviderComponent<ComputedTheme>\n","import { Currency } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { atom } from 'jotai'\nimport { atomWithImmer } from 'jotai/immer'\nimport { pickAtom } from 'lib/state/atoms'\n\nexport enum Field {\n  INPUT = 'INPUT',\n  OUTPUT = 'OUTPUT',\n}\n\nexport interface Swap {\n  independentField: Field\n  amount: string\n  [Field.INPUT]?: Currency\n  [Field.OUTPUT]?: Currency\n}\n\nexport const swapAtom = atomWithImmer<Swap>({\n  independentField: Field.INPUT,\n  amount: '',\n  [Field.INPUT]: nativeOnChain(SupportedChainId.AVALANCHE),\n})\n\nexport const independentFieldAtom = pickAtom(swapAtom, 'independentField')\n\n// If set to a transaction hash, that transaction will display in a status dialog.\nexport const displayTxHashAtom = atom<string | undefined>(undefined)\n\nexport const feeOptionsAtom = atom<FeeOptions | undefined>(undefined)\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Draft } from 'immer'\nimport { atom, WritableAtom } from 'jotai'\nimport { withImmer } from 'jotai/immer'\n\n/**\n * Creates a derived atom whose value is the picked object property.\n * By default, the setter acts as a primitive atom's, changing the original atom.\n * A custom setter may also be passed, which uses an Immer Draft so that it may be mutated directly.\n */\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter?: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key] = (draft, update) =>\n    update as Draft<Value>[Key]\n): WritableAtom<Value[Key], Update> {\n  return atom(\n    (get) => get(anAtom)[key],\n    (get, set, update: Update) =>\n      set(withImmer(anAtom), (value) => {\n        const derived = setter(value[key], update)\n        value[key] = derived\n      })\n  )\n}\n\n/** Sets a togglable atom to invert its state at the next render. */\nexport function setTogglable(draft: boolean) {\n  return !draft\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { atomWithReset } from 'jotai/utils'\n\nimport { pickAtom, setTogglable } from './atoms'\n\nexport const MAX_VALID_SLIPPAGE = new Percent(1, 2)\nexport const MIN_HIGH_SLIPPAGE = new Percent(1, 100)\n\ninterface Settings {\n  maxSlippage: Percent | 'auto' // auto will cause slippage to resort to default calculation\n  transactionTtl: number | undefined\n  mockTogglable: boolean\n  clientSideRouter: boolean // whether to use the client-side router or query the remote API\n}\n\nconst initialSettings: Settings = {\n  maxSlippage: 'auto',\n  transactionTtl: undefined,\n  mockTogglable: true,\n  clientSideRouter: true,\n}\n\nexport const settingsAtom = atomWithReset(initialSettings)\nexport const maxSlippageAtom = pickAtom(settingsAtom, 'maxSlippage')\nexport const transactionTtlAtom = pickAtom(settingsAtom, 'transactionTtl')\nexport const mockTogglableAtom = pickAtom(settingsAtom, 'mockTogglable', setTogglable)\nexport const clientSideRouterAtom = pickAtom(settingsAtom, 'clientSideRouter')\n","import { darken, lighten, opacify, transparentize } from 'polished'\nimport { readableColor } from 'polished'\nimport { ReactNode, useMemo } from 'react'\nimport { hex } from 'wcag-contrast'\n\nimport { ThemedProvider, useTheme } from './styled'\nimport { Colors, ComputedTheme } from './theme'\n\ntype DynamicColors = Pick<Colors, 'interactive' | 'outline' | 'primary' | 'secondary' | 'onInteractive'>\n\nconst black = 'hsl(0, 0%, 0%)'\nconst white = 'hsl(0, 0%, 100%)'\n\nconst light: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.54, black),\n  outline: transparentize(1 - 0.24, black),\n\n  // text\n  primary: black,\n  secondary: transparentize(1 - 0.64, black),\n  onInteractive: white,\n}\n\nconst dark: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.48, white),\n  outline: transparentize(1 - 0.12, white),\n\n  // text\n  primary: white,\n  secondary: transparentize(1 - 0.6, white),\n  onInteractive: black,\n}\n\nexport function getDynamicTheme(theme: ComputedTheme, color: string): ComputedTheme {\n  const colors = { light, dark }[readableColor(color, 'light', 'dark', false) as 'light' | 'dark']\n  return {\n    ...theme,\n    ...colors,\n    module: color,\n    onHover: (color: string) => (color === colors.primary ? transparentize(0.4, colors.primary) : opacify(0.25, color)),\n  }\n}\n\nfunction getAccessibleColor(theme: ComputedTheme, color: string) {\n  const dynamic = getDynamicTheme(theme, color)\n  let { primary } = dynamic\n  let AAscore = hex(color, primary)\n  const contrastify = hex(color, '#000') > hex(color, '#fff') ? darken : lighten\n  while (AAscore < 3) {\n    color = contrastify(0.005, color)\n    primary = getDynamicTheme(theme, color).primary\n    AAscore = hex(color, primary)\n  }\n  return color\n}\n\ninterface DynamicThemeProviderProps {\n  color?: string\n  children: ReactNode\n}\n\nexport function DynamicThemeProvider({ color, children }: DynamicThemeProviderProps) {\n  const theme = useTheme()\n  const value = useMemo(() => {\n    if (!color) {\n      return theme\n    }\n\n    const accessibleColor = getAccessibleColor(theme, color)\n    return getDynamicTheme(theme, accessibleColor)\n  }, [theme, color])\n  return (\n    <ThemedProvider theme={value}>\n      <div style={{ color: value.primary }}>{children}</div>\n    </ThemedProvider>\n  )\n}\n","export enum Layer {\n  OVERLAY = 100,\n  DIALOG = 1000,\n  TOOLTIP = 2000,\n}\n","import { Text, TextProps as TextPropsWithCss } from 'rebass'\n\nimport styled, { useTheme } from './styled'\nimport { Color } from './theme'\n\ntype TextProps = Omit<TextPropsWithCss, 'css' | 'color'> & { color?: Color }\n\nconst TextWrapper = styled(Text)<{ color?: Color; lineHeight: string }>`\n  color: ${({ color = 'currentColor', theme }) => theme[color as Color]};\n  // Avoid the need for placeholders by setting min-height to line-height.\n  min-height: ${({ lineHeight }) => lineHeight};\n`\n\nconst TransitionTextWrapper = styled(TextWrapper)`\n  transition: font-size 0.25s ease-out, line-height 0.25s ease-out;\n`\n\nexport function H1(props: TextProps) {\n  return <TextWrapper className=\"headline headline-1\" fontSize={36} fontWeight={400} lineHeight=\"36px\" {...props} />\n}\n\nexport function H2(props: TextProps) {\n  return <TextWrapper className=\"headline headline-2\" fontSize={24} fontWeight={400} lineHeight=\"32px\" {...props} />\n}\n\nexport function H3(props: TextProps) {\n  return <TextWrapper className=\"headline headline-3\" fontSize={20} fontWeight={400} lineHeight=\"20px\" {...props} />\n}\n\nexport function Subhead1(props: TextProps) {\n  return <TextWrapper className=\"subhead subhead-1\" fontSize={16} fontWeight={500} lineHeight=\"16px\" {...props} />\n}\n\nexport function Subhead2(props: TextProps) {\n  return <TextWrapper className=\"subhead subhead-2\" fontSize={14} fontWeight={500} lineHeight=\"14px\" {...props} />\n}\n\nexport function Body1(props: TextProps) {\n  return <TextWrapper className=\"body body-1\" fontSize={16} fontWeight={400} lineHeight=\"24px\" {...props} />\n}\n\nexport function Body2(props: TextProps) {\n  return <TextWrapper className=\"body body-2\" fontSize={14} fontWeight={400} lineHeight=\"20px\" {...props} />\n}\n\nexport function Caption(props: TextProps) {\n  return <TextWrapper className=\"caption\" fontSize={12} fontWeight={400} lineHeight=\"16px\" {...props} />\n}\n\nexport function Badge(props: TextProps) {\n  return <TextWrapper className=\"badge\" fontSize={8} fontWeight={600} lineHeight=\"8px\" {...props} />\n}\n\nexport function ButtonLarge(props: TextProps) {\n  return <TextWrapper className=\"button button-large\" fontSize={20} fontWeight={500} lineHeight=\"20px\" {...props} />\n}\n\nexport function ButtonMedium(props: TextProps) {\n  return <TextWrapper className=\"button button-medium\" fontSize={16} fontWeight={500} lineHeight=\"16px\" {...props} />\n}\n\nexport function ButtonSmall(props: TextProps) {\n  return <TextWrapper className=\"button button-small\" fontSize={14} fontWeight={500} lineHeight=\"14px\" {...props} />\n}\n\nexport function TransitionButton(props: TextProps & { buttonSize: 'small' | 'medium' | 'large' }) {\n  const className = `button button-${props.buttonSize}`\n  const fontSize = { small: 14, medium: 16, large: 20 }[props.buttonSize]\n  const lineHeight = `${fontSize}px`\n  return (\n    <TransitionTextWrapper\n      className={className}\n      fontSize={fontSize}\n      fontWeight={500}\n      lineHeight={lineHeight}\n      {...props}\n    />\n  )\n}\n\nexport function Code(props: TextProps) {\n  const { fontFamilyCode } = useTheme()\n  return (\n    <TextWrapper\n      className=\"code\"\n      fontSize={12}\n      fontWeight={400}\n      lineHeight=\"16px\"\n      fontFamily={fontFamilyCode}\n      {...props}\n    />\n  )\n}\n","import { t } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_MEDIUM } from 'constants/misc'\nimport { useAtomValue } from 'jotai/utils'\nimport { MIN_HIGH_SLIPPAGE } from 'lib/state/settings'\nimport { feeOptionsAtom } from 'lib/state/swap'\nimport styled, { Color, ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\nimport { currencyId } from 'utils/currencyId'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\nimport { computeRealizedLPFeeAmount, computeRealizedPriceImpact } from 'utils/prices'\n\nimport Row from '../../Row'\n\nconst Value = styled.span<{ color?: Color }>`\n  color: ${({ color, theme }) => color && theme[color]};\n  white-space: nowrap;\n`\n\ninterface DetailProps {\n  label: string\n  value: string\n  color?: Color\n}\n\nfunction Detail({ label, value, color }: DetailProps) {\n  return (\n    <ThemedText.Caption>\n      <Row gap={2}>\n        <span>{label}</span>\n        <Value color={color}>{value}</Value>\n      </Row>\n    </ThemedText.Caption>\n  )\n}\n\ninterface DetailsProps {\n  trade: Trade<Currency, Currency, TradeType>\n  allowedSlippage: Percent\n}\n\nexport default function Details({ trade, allowedSlippage }: DetailsProps) {\n  const { inputAmount, outputAmount } = trade\n  const inputCurrency = inputAmount.currency\n  const outputCurrency = outputAmount.currency\n  const priceImpact = useMemo(() => computeRealizedPriceImpact(trade), [trade])\n\n  const lpFeeAmount = useMemo(() => computeRealizedLPFeeAmount(trade), [trade])\n\n  const integrator = window.location.hostname\n  const feeOptions = useAtomValue(feeOptionsAtom)\n\n  const { i18n } = useLingui()\n  const details = useMemo(() => {\n    const rows = []\n    // @TODO(ianlapham): Check that provider fee is even a valid list item\n\n    if (feeOptions) {\n      const parsedConvenienceFee = formatCurrencyAmount(outputAmount.multiply(feeOptions.fee), 6, i18n.locale)\n      rows.push([\n        t`${integrator} fee`,\n        `${parsedConvenienceFee} ${outputCurrency.symbol || currencyId(outputCurrency)}`,\n      ])\n    }\n\n    const priceImpactRow = [t`Price impact`, `${priceImpact.toFixed(2)}%`]\n    if (!priceImpact.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) {\n      priceImpactRow.push('error')\n    } else if (!priceImpact.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) {\n      priceImpactRow.push('warning')\n    }\n    rows.push(priceImpactRow)\n\n    if (lpFeeAmount) {\n      const localizedFeeAmount = formatCurrencyAmount(lpFeeAmount, 6, i18n.locale)\n      rows.push([\n        t`Liquidity provider fee`,\n        `${localizedFeeAmount} ${inputCurrency.symbol || currencyId(inputCurrency)}`,\n      ])\n    }\n\n    if (trade.tradeType === TradeType.EXACT_OUTPUT) {\n      const localizedMaxSent = formatCurrencyAmount(trade.maximumAmountIn(allowedSlippage), 6, i18n.locale)\n      rows.push([t`Maximum sent`, `${localizedMaxSent} ${inputCurrency.symbol}`])\n    }\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      const localizedMaxSent = formatCurrencyAmount(trade.minimumAmountOut(allowedSlippage), 6, i18n.locale)\n      rows.push([t`Minimum received`, `${localizedMaxSent} ${outputCurrency.symbol}`])\n    }\n\n    const slippageToleranceRow = [t`Slippage tolerance`, `${allowedSlippage.toFixed(2)}%`]\n    if (!allowedSlippage.lessThan(MIN_HIGH_SLIPPAGE)) {\n      slippageToleranceRow.push('warning')\n    }\n    rows.push(slippageToleranceRow)\n\n    return rows\n  }, [\n    feeOptions,\n    priceImpact,\n    lpFeeAmount,\n    trade,\n    allowedSlippage,\n    outputAmount,\n    i18n.locale,\n    integrator,\n    outputCurrency,\n    inputCurrency,\n  ])\n  return (\n    <>\n      {details.map(([label, detail, color]) => (\n        <Detail key={label} label={label} value={detail} color={color as Color} />\n      ))}\n    </>\n  )\n}\n"],"sourceRoot":""}