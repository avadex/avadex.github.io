{"version":3,"sources":["../../src.ts/_version.ts","../../src.ts/brain-wallet.ts","../../src.ts/nonce-manager.ts","../../src.ts/eip1193-bridge.ts","../../src.ts/index.ts"],"names":["version","usernameBytes","utils","arrayify"],"mappings":"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","file":"static/js/110.183dbfb2.chunk.js","sourcesContent":["export const version = \"experimental/5.4.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { ethers } from \"ethers\";\nimport scrypt from \"scrypt-js\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\nlet warned = false;\nexport class BrainWallet extends ethers.Wallet {\n    static _generate(username, password, legacy, progressCallback) {\n        if (!warned) {\n            logger.warn(\"Warning: using Brain Wallets should be considered insecure (this warning will not be repeated)\");\n            warned = true;\n        }\n        let usernameBytes = null;\n        let passwordBytes = null;\n        if (typeof (username) === 'string') {\n            logger.checkNormalize();\n            usernameBytes = ethers.utils.toUtf8Bytes(username.normalize('NFKC'));\n        }\n        else {\n            usernameBytes = ethers.utils.arrayify(username);\n        }\n        if (typeof (password) === 'string') {\n            logger.checkNormalize();\n            passwordBytes = ethers.utils.toUtf8Bytes(password.normalize('NFKC'));\n        }\n        else {\n            passwordBytes = ethers.utils.arrayify(password);\n        }\n        return scrypt.scrypt(passwordBytes, usernameBytes, (1 << 18), 8, 1, 32, progressCallback).then((key) => {\n            if (legacy) {\n                return new BrainWallet(key);\n            }\n            const mnemonic = ethers.utils.entropyToMnemonic(ethers.utils.arrayify(key).slice(0, 16));\n            return new BrainWallet(ethers.Wallet.fromMnemonic(mnemonic));\n        });\n    }\n    static generate(username, password, progressCallback) {\n        return BrainWallet._generate(username, password, false, progressCallback);\n    }\n    static generateLegacy(username, password, progressCallback) {\n        return BrainWallet._generate(username, password, true, progressCallback);\n    }\n}\n//# sourceMappingURL=brain-wallet.js.map","\"use strict\";\nimport { ethers } from \"ethers\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\n// @TODO: Keep a per-NonceManager pool of sent but unmined transactions for\n//        rebroadcasting, in case we overrun the transaction pool\nexport class NonceManager extends ethers.Signer {\n    constructor(signer) {\n        logger.checkNew(new.target, NonceManager);\n        super();\n        this._deltaCount = 0;\n        ethers.utils.defineReadOnly(this, \"signer\", signer);\n        ethers.utils.defineReadOnly(this, \"provider\", signer.provider || null);\n    }\n    connect(provider) {\n        return new NonceManager(this.signer.connect(provider));\n    }\n    getAddress() {\n        return this.signer.getAddress();\n    }\n    getTransactionCount(blockTag) {\n        if (blockTag === \"pending\") {\n            if (!this._initialPromise) {\n                this._initialPromise = this.signer.getTransactionCount(\"pending\");\n            }\n            const deltaCount = this._deltaCount;\n            return this._initialPromise.then((initial) => (initial + deltaCount));\n        }\n        return this.signer.getTransactionCount(blockTag);\n    }\n    setTransactionCount(transactionCount) {\n        this._initialPromise = Promise.resolve(transactionCount).then((nonce) => {\n            return ethers.BigNumber.from(nonce).toNumber();\n        });\n        this._deltaCount = 0;\n    }\n    incrementTransactionCount(count) {\n        this._deltaCount += (count ? count : 1);\n    }\n    signMessage(message) {\n        return this.signer.signMessage(message);\n        ;\n    }\n    signTransaction(transaction) {\n        return this.signer.signTransaction(transaction);\n    }\n    sendTransaction(transaction) {\n        if (transaction.nonce == null) {\n            transaction = ethers.utils.shallowCopy(transaction);\n            transaction.nonce = this.getTransactionCount(\"pending\");\n            this.incrementTransactionCount();\n        }\n        else {\n            this.setTransactionCount(transaction.nonce);\n        }\n        return this.signer.sendTransaction(transaction).then((tx) => {\n            return tx;\n        });\n    }\n}\n//# sourceMappingURL=nonce-manager.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport EventEmitter from \"events\";\nimport { ethers } from \"ethers\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\n/*\nfunction getBlockTag(tag) {\n    if (tag == null) { return \"latest\"; }\n    if (tag === \"earliest\" || tag === \"latest\" || tag === \"pending\") {\n        return tag;\n    }\n    return ethers.utils.hexValue(tag)\n}\n*/\nexport class Eip1193Bridge extends EventEmitter {\n    constructor(signer, provider) {\n        super();\n        ethers.utils.defineReadOnly(this, \"signer\", signer);\n        ethers.utils.defineReadOnly(this, \"provider\", provider || null);\n    }\n    request(request) {\n        return this.send(request.method, request.params || []);\n    }\n    send(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            function throwUnsupported(message) {\n                return logger.throwError(message, ethers.utils.Logger.errors.UNSUPPORTED_OPERATION, {\n                    method: method,\n                    params: params\n                });\n            }\n            let coerce = (value) => value;\n            switch (method) {\n                case \"eth_gasPrice\": {\n                    const result = yield this.provider.getGasPrice();\n                    return result.toHexString();\n                }\n                case \"eth_accounts\": {\n                    const result = [];\n                    if (this.signer) {\n                        const address = yield this.signer.getAddress();\n                        result.push(address);\n                    }\n                    return result;\n                }\n                case \"eth_blockNumber\": {\n                    return yield this.provider.getBlockNumber();\n                }\n                case \"eth_chainId\": {\n                    const result = yield this.provider.getNetwork();\n                    return result.chainId;\n                }\n                case \"eth_getBalance\": {\n                    const result = yield this.provider.getBalance(params[0], params[1]);\n                    return result.toHexString();\n                }\n                case \"eth_getStorageAt\": {\n                    return this.provider.getStorageAt(params[0], params[1], params[2]);\n                }\n                case \"eth_getTransactionCount\": {\n                    const result = yield this.provider.getTransactionCount(params[0], params[1]);\n                    return ethers.utils.hexValue(result);\n                }\n                case \"eth_getBlockTransactionCountByHash\":\n                case \"eth_getBlockTransactionCountByNumber\": {\n                    const result = yield this.provider.getBlock(params[0]);\n                    return ethers.utils.hexValue(result.transactions.length);\n                }\n                case \"eth_getCode\": {\n                    const result = yield this.provider.getBlock(params[0]);\n                    return result;\n                }\n                case \"eth_sendRawTransaction\": {\n                    return yield this.provider.sendTransaction(params[0]);\n                }\n                case \"eth_call\": {\n                    const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n                    return yield this.provider.call(req, params[1]);\n                }\n                case \"estimateGas\": {\n                    if (params[1] && params[1] !== \"latest\") {\n                        throwUnsupported(\"estimateGas does not support blockTag\");\n                    }\n                    const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n                    const result = yield this.provider.estimateGas(req);\n                    return result.toHexString();\n                }\n                // @TOOD: Transform? No uncles?\n                case \"eth_getBlockByHash\":\n                case \"eth_getBlockByNumber\": {\n                    if (params[1]) {\n                        return yield this.provider.getBlockWithTransactions(params[0]);\n                    }\n                    else {\n                        return yield this.provider.getBlock(params[0]);\n                    }\n                }\n                case \"eth_getTransactionByHash\": {\n                    return yield this.provider.getTransaction(params[0]);\n                }\n                case \"eth_getTransactionReceipt\": {\n                    return yield this.provider.getTransactionReceipt(params[0]);\n                }\n                case \"eth_sign\": {\n                    if (!this.signer) {\n                        return throwUnsupported(\"eth_sign requires an account\");\n                    }\n                    const address = yield this.signer.getAddress();\n                    if (address !== ethers.utils.getAddress(params[0])) {\n                        logger.throwArgumentError(\"account mismatch or account not found\", \"params[0]\", params[0]);\n                    }\n                    return this.signer.signMessage(ethers.utils.arrayify(params[1]));\n                }\n                case \"eth_sendTransaction\": {\n                    if (!this.signer) {\n                        return throwUnsupported(\"eth_sendTransaction requires an account\");\n                    }\n                    const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n                    const tx = yield this.signer.sendTransaction(req);\n                    return tx.hash;\n                }\n                case \"eth_getUncleCountByBlockHash\":\n                case \"eth_getUncleCountByBlockNumber\":\n                    {\n                        coerce = ethers.utils.hexValue;\n                        break;\n                    }\n                case \"eth_getTransactionByBlockHashAndIndex\":\n                case \"eth_getTransactionByBlockNumberAndIndex\":\n                case \"eth_getUncleByBlockHashAndIndex\":\n                case \"eth_getUncleByBlockNumberAndIndex\":\n                case \"eth_newFilter\":\n                case \"eth_newBlockFilter\":\n                case \"eth_newPendingTransactionFilter\":\n                case \"eth_uninstallFilter\":\n                case \"eth_getFilterChanges\":\n                case \"eth_getFilterLogs\":\n                case \"eth_getLogs\":\n                    break;\n            }\n            // If our provider supports send, maybe it can do a better job?\n            if ((this.provider).send) {\n                const result = yield (this.provider).send(method, params);\n                return coerce(result);\n            }\n            return throwUnsupported(`unsupported method: ${method}`);\n        });\n    }\n}\n//# sourceMappingURL=eip1193-bridge.js.map","\"use strict\";\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\nimport * as ethers from \"./ethers\";\ntry {\n    const anyGlobal = window;\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers;\n    }\n}\ncatch (error) { }\nexport { ethers };\nexport { Signer, Wallet, VoidSigner, getDefaultProvider, providers, BaseContract, Contract, ContractFactory, BigNumber, FixedNumber, constants, errors, logger, utils, wordlists, \n////////////////////////\n// Compile-Time Constants\nversion, Wordlist } from \"./ethers\";\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}