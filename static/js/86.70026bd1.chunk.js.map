{"version":3,"sources":["lib/hooks/useUnmount.ts"],"names":["UNMOUNTING","useUnmount","node","useEffect","current","parent","parentElement","removeChild","child","classList","add","onanimationend","call"],"mappings":"6HAAA,qGAEaA,EAAa,aAMX,SAASC,EAAWC,GACjCC,qBAAU,WACR,IAAMC,EAAUF,EAAKE,QACfC,EAAM,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAASE,cAClBC,EAAW,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQE,YAc5B,OAbIF,GAAUE,IACZF,EAAOE,YAAc,SAA0BC,GAC7C,OAAKA,IAAmBJ,GACtBA,EAAQK,UAAUC,IAAIV,GACtBI,EAAQO,eAAiB,WACvBJ,EAAYK,KAAKP,EAAQG,IAEpBA,GAEAD,EAAYK,KAAKP,EAAQG,KAI/B,WACDH,GAAUE,IACZF,EAAOE,YAAcA,MAGxB,CAACL","file":"static/js/86.70026bd1.chunk.js","sourcesContent":["import { RefObject, useEffect } from 'react'\n\nexport const UNMOUNTING = 'unmounting'\n\n/**\n * Delays a node's unmounting so that an animation may be applied.\n * An animation *must* be applied, or the node will not unmount.\n */\nexport default function useUnmount(node: RefObject<HTMLElement>) {\n  useEffect(() => {\n    const current = node.current\n    const parent = current?.parentElement\n    const removeChild = parent?.removeChild\n    if (parent && removeChild) {\n      parent.removeChild = function <T extends Node>(child: T) {\n        if ((child as Node) === current) {\n          current.classList.add(UNMOUNTING)\n          current.onanimationend = () => {\n            removeChild.call(parent, child)\n          }\n          return child\n        } else {\n          return removeChild.call(parent, child) as T\n        }\n      }\n    }\n    return () => {\n      if (parent && removeChild) {\n        parent.removeChild = removeChild\n      }\n    }\n  }, [node])\n}\n"],"sourceRoot":""}