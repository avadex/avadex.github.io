{"version":3,"sources":["lib/theme/index.tsx","lib/theme/styled.ts","lib/hooks/useScrollbar.ts","lib/hooks/useNativeEvent.ts","lib/theme/dynamic.tsx","lib/theme/layer.ts","lib/theme/type.tsx"],"names":["styled","brand","stateColors","active","success","warning","error","lightTheme","accent","container","module","interactive","outline","dialog","onAccent","primary","secondary","hint","onInteractive","currentColor","darkThemeAccent","darkTheme","readableColor","defaultTheme","borderRadius","fontFamily","fontFamilyVariable","fontFamilyCode","tokenColorExtraction","useSystemTheme","prefersDark","window","matchMedia","useState","matches","systemTheme","setSystemTheme","addEventListener","e","ThemeContext","createContext","toComputedTheme","ThemeProvider","theme","children","contextTheme","useContext","value","useMemo","Provider","Number","isFinite","Math","min","max","onHover","color","transparentize","mix","css","styledCss","keyframes","styledKeyframes","useTheme","useStyled","ThemedProvider","StyledProvider","overflowCss","scrollbarCss","padded","useScrollbar","element","overflow","setOverflow","useEffect","hasOverflow","useNativeEvent","scrollHeight","clientHeight","eventListener","removeEventListener","black","white","light","dark","getDynamicTheme","colors","opacify","DynamicThemeProvider","accessibleColor","AAscore","hex","contrastify","darken","lighten","getAccessibleColor","style","Layer","TextWrapper","Text","lineHeight","TransitionTextWrapper","H1","props","className","fontSize","fontWeight","H2","H3","Subhead1","Subhead2","Body1","Body2","Caption","Badge","ButtonLarge","ButtonMedium","ButtonSmall","TransitionButton","buttonSize","small","medium","large","Code"],"mappings":"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","file":"static/js/28.0e49ef1b.chunk.js","sourcesContent":["import 'lib/assets/fonts.scss'\nimport '@fontsource/ibm-plex-mono/400.css'\nimport '@fontsource/inter/variable.css'\nimport '@fontsource/inter/400.css'\nimport '@fontsource/inter/500.css'\nimport '@fontsource/inter/600.css'\n\nimport { mix, readableColor, transparentize } from 'polished'\nimport { createContext, ReactNode, useContext, useMemo, useState } from 'react'\n\nimport styled, { ThemedProvider } from './styled'\nimport { Colors, ComputedTheme, Theme } from './theme'\n\nexport default styled\nexport * from './dynamic'\nexport * from './layer'\nexport * from './styled'\nexport * from './theme'\nexport * as ThemedText from './type'\n\nexport const brand = 'hsl(331.3, 100%, 50%)'\n\nconst stateColors = {\n  active: 'hsl(215, 79%, 51.4%)',\n  success: 'hsl(145, 63.4%, 41.8%)',\n  warning: 'hsl(43, 89.9%, 53.5%)',\n  error: 'hsl(0, 98%, 62.2%)',\n}\n\nexport const lightTheme: Colors = {\n  // surface\n  accent: brand,\n  container: 'hsl(220, 23%, 97.5%)',\n  module: 'hsl(231, 14%, 90%)',\n  interactive: 'hsl(229, 13%, 83%)',\n  outline: 'hsl(225, 7%, 78%)',\n  dialog: 'hsl(0, 0%, 100%)',\n\n  // text\n  onAccent: 'hsl(0, 0%, 100%)',\n  primary: 'hsl(0, 0%, 0%)',\n  secondary: 'hsl(227, 10%, 37.5%)',\n  hint: 'hsl(224, 9%, 57%)',\n  onInteractive: 'hsl(0, 0%, 0%)',\n\n  // state\n  ...stateColors,\n\n  currentColor: 'currentColor',\n}\n\nconst darkThemeAccent = 'hsl(215, 79%, 51.4%)'\n\nexport const darkTheme: Colors = {\n  // surface\n  accent: darkThemeAccent,\n  container: 'hsl(220, 10.7%, 11%)',\n  module: 'hsl(222, 10.2%, 19.2%)',\n  interactive: 'hsl(224, 10.5%, 281%)',\n  outline: 'hsl(227, 10%, 37.5%)',\n  dialog: 'hsl(0, 0%, 0%)',\n\n  // text\n  onAccent: readableColor(darkThemeAccent),\n  primary: 'hsl(0, 0%, 100%)',\n  secondary: 'hsl(224, 8.7%, 57.1%)',\n  hint: 'hsl(225, 10%, 47.1%)',\n  onInteractive: 'hsl(0, 0%, 100%)',\n\n  // state\n  ...stateColors,\n\n  currentColor: 'currentColor',\n}\n\nexport const defaultTheme = {\n  borderRadius: 1,\n  fontFamily: '\"Inter\", sans-serif',\n  fontFamilyVariable: '\"InterVariable\", sans-serif',\n  fontFamilyCode: 'IBM Plex Mono',\n  tokenColorExtraction: false,\n  ...lightTheme,\n}\n\nexport function useSystemTheme() {\n  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)')\n  const [systemTheme, setSystemTheme] = useState(prefersDark.matches ? darkTheme : lightTheme)\n  prefersDark.addEventListener('change', (e) => {\n    setSystemTheme(e.matches ? darkTheme : lightTheme)\n  })\n  return systemTheme\n}\n\nconst ThemeContext = createContext<ComputedTheme>(toComputedTheme(defaultTheme))\n\ninterface ThemeProviderProps {\n  theme?: Theme\n  children: ReactNode\n}\n\nexport function ThemeProvider({ theme, children }: ThemeProviderProps) {\n  const contextTheme = useContext(ThemeContext)\n  const value = useMemo(() => {\n    return toComputedTheme({\n      ...contextTheme,\n      ...theme,\n    } as Required<Theme>)\n  }, [contextTheme, theme])\n  return (\n    <ThemeContext.Provider value={value}>\n      <ThemedProvider theme={value}>{children}</ThemedProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nfunction toComputedTheme(theme: Required<Theme>): ComputedTheme {\n  return {\n    ...theme,\n    borderRadius: clamp(\n      Number.isFinite(theme.borderRadius) ? (theme.borderRadius as number) : theme.borderRadius ? 1 : 0\n    ),\n    onHover: (color: string) =>\n      color === theme.primary ? transparentize(0.4, theme.primary) : mix(0.16, theme.primary, color),\n  }\n\n  function clamp(value: number) {\n    return Math.min(Math.max(value, 0), 1)\n  }\n}\n","/* eslint-disable no-restricted-imports */\nimport styled, {\n  css as styledCss,\n  keyframes as styledKeyframes,\n  ThemedBaseStyledInterface,\n  ThemedCssFunction,\n  ThemeProvider as StyledProvider,\n  ThemeProviderComponent,\n  useTheme as useStyled,\n} from 'styled-components/macro'\n\nimport { ComputedTheme } from './theme'\n\nexport default styled as unknown as ThemedBaseStyledInterface<ComputedTheme>\nexport const css = styledCss as unknown as ThemedCssFunction<ComputedTheme>\nexport const keyframes = styledKeyframes\nexport const useTheme = useStyled as unknown as () => ComputedTheme\nexport const ThemedProvider = StyledProvider as unknown as ThemeProviderComponent<ComputedTheme>\n","import { css } from 'lib/theme'\nimport { useEffect, useMemo, useState } from 'react'\n\nimport useNativeEvent from './useNativeEvent'\n\nconst overflowCss = css`\n  overflow-y: scroll;\n`\n\n/** Customizes the scrollbar for vertical overflow. */\nconst scrollbarCss = (padded: boolean) => css`\n  overflow-y: scroll;\n\n  ::-webkit-scrollbar {\n    width: 1.25em;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: radial-gradient(\n        closest-corner at 0.25em 0.25em,\n        ${({ theme }) => theme.interactive} 0.25em,\n        transparent 0.25em\n      ),\n      linear-gradient(\n        to bottom,\n        #ffffff00 0.25em,\n        ${({ theme }) => theme.interactive} 0.25em,\n        ${({ theme }) => theme.interactive} calc(100% - 0.25em),\n        #ffffff00 calc(100% - 0.25em)\n      ),\n      radial-gradient(\n        closest-corner at 0.25em calc(100% - 0.25em),\n        ${({ theme }) => theme.interactive} 0.25em,\n        #ffffff00 0.25em\n      );\n    background-clip: padding-box;\n    border: none;\n    ${padded ? 'border-right' : 'border-left'}: 0.75em solid transparent;\n  }\n\n  @supports not selector(::-webkit-scrollbar-thumb) {\n    scrollbar-color: ${({ theme }) => theme.interactive} transparent;\n  }\n`\n\ninterface ScrollbarOptions {\n  padded?: boolean\n}\n\nexport default function useScrollbar(element: HTMLElement | null, { padded = false }: ScrollbarOptions = {}) {\n  const [overflow, setOverflow] = useState(true)\n  useEffect(() => {\n    setOverflow(hasOverflow(element))\n  }, [element])\n  useNativeEvent(element, 'transitionend', () => setOverflow(hasOverflow(element)))\n  return useMemo(() => (overflow ? scrollbarCss(padded) : overflowCss), [overflow, padded])\n\n  function hasOverflow(element: HTMLElement | null) {\n    if (!element) {\n      return true\n    }\n    return element.scrollHeight > element.clientHeight\n  }\n}\n","import { useEffect } from 'react'\n\nexport default function useNativeEvent(\n  element: HTMLElement | null,\n  ...eventListener: Parameters<HTMLElement['addEventListener']>\n) {\n  useEffect(() => {\n    element?.addEventListener(...eventListener)\n    return () => element?.removeEventListener(...eventListener)\n  }, [element, eventListener])\n}\n","import { darken, lighten, opacify, transparentize } from 'polished'\nimport { readableColor } from 'polished'\nimport { ReactNode, useMemo } from 'react'\nimport { hex } from 'wcag-contrast'\n\nimport { ThemedProvider, useTheme } from './styled'\nimport { Colors, ComputedTheme } from './theme'\n\ntype DynamicColors = Pick<Colors, 'interactive' | 'outline' | 'primary' | 'secondary' | 'onInteractive'>\n\nconst black = 'hsl(0, 0%, 0%)'\nconst white = 'hsl(0, 0%, 100%)'\n\nconst light: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.54, black),\n  outline: transparentize(1 - 0.24, black),\n\n  // text\n  primary: black,\n  secondary: transparentize(1 - 0.64, black),\n  onInteractive: white,\n}\n\nconst dark: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.48, white),\n  outline: transparentize(1 - 0.12, white),\n\n  // text\n  primary: white,\n  secondary: transparentize(1 - 0.6, white),\n  onInteractive: black,\n}\n\nexport function getDynamicTheme(theme: ComputedTheme, color: string): ComputedTheme {\n  const colors = { light, dark }[readableColor(color, 'light', 'dark', false) as 'light' | 'dark']\n  return {\n    ...theme,\n    ...colors,\n    module: color,\n    onHover: (color: string) => (color === colors.primary ? transparentize(0.4, colors.primary) : opacify(0.25, color)),\n  }\n}\n\nfunction getAccessibleColor(theme: ComputedTheme, color: string) {\n  const dynamic = getDynamicTheme(theme, color)\n  let { primary } = dynamic\n  let AAscore = hex(color, primary)\n  const contrastify = hex(color, '#000') > hex(color, '#fff') ? darken : lighten\n  while (AAscore < 3) {\n    color = contrastify(0.005, color)\n    primary = getDynamicTheme(theme, color).primary\n    AAscore = hex(color, primary)\n  }\n  return color\n}\n\ninterface DynamicThemeProviderProps {\n  color?: string\n  children: ReactNode\n}\n\nexport function DynamicThemeProvider({ color, children }: DynamicThemeProviderProps) {\n  const theme = useTheme()\n  const value = useMemo(() => {\n    if (!color) {\n      return theme\n    }\n\n    const accessibleColor = getAccessibleColor(theme, color)\n    return getDynamicTheme(theme, accessibleColor)\n  }, [theme, color])\n  return (\n    <ThemedProvider theme={value}>\n      <div style={{ color: value.primary }}>{children}</div>\n    </ThemedProvider>\n  )\n}\n","export enum Layer {\n  OVERLAY = 100,\n  DIALOG = 1000,\n  TOOLTIP = 2000,\n}\n","import { Text, TextProps as TextPropsWithCss } from 'rebass'\n\nimport styled, { useTheme } from './styled'\nimport { Color } from './theme'\n\ntype TextProps = Omit<TextPropsWithCss, 'css' | 'color'> & { color?: Color }\n\nconst TextWrapper = styled(Text)<{ color?: Color; lineHeight: string }>`\n  color: ${({ color = 'currentColor', theme }) => theme[color as Color]};\n  // Avoid the need for placeholders by setting min-height to line-height.\n  min-height: ${({ lineHeight }) => lineHeight};\n`\n\nconst TransitionTextWrapper = styled(TextWrapper)`\n  transition: font-size 0.25s ease-out, line-height 0.25s ease-out;\n`\n\nexport function H1(props: TextProps) {\n  return <TextWrapper className=\"headline headline-1\" fontSize={36} fontWeight={400} lineHeight=\"36px\" {...props} />\n}\n\nexport function H2(props: TextProps) {\n  return <TextWrapper className=\"headline headline-2\" fontSize={24} fontWeight={400} lineHeight=\"32px\" {...props} />\n}\n\nexport function H3(props: TextProps) {\n  return <TextWrapper className=\"headline headline-3\" fontSize={20} fontWeight={400} lineHeight=\"20px\" {...props} />\n}\n\nexport function Subhead1(props: TextProps) {\n  return <TextWrapper className=\"subhead subhead-1\" fontSize={16} fontWeight={500} lineHeight=\"16px\" {...props} />\n}\n\nexport function Subhead2(props: TextProps) {\n  return <TextWrapper className=\"subhead subhead-2\" fontSize={14} fontWeight={500} lineHeight=\"14px\" {...props} />\n}\n\nexport function Body1(props: TextProps) {\n  return <TextWrapper className=\"body body-1\" fontSize={16} fontWeight={400} lineHeight=\"24px\" {...props} />\n}\n\nexport function Body2(props: TextProps) {\n  return <TextWrapper className=\"body body-2\" fontSize={14} fontWeight={400} lineHeight=\"20px\" {...props} />\n}\n\nexport function Caption(props: TextProps) {\n  return <TextWrapper className=\"caption\" fontSize={12} fontWeight={400} lineHeight=\"16px\" {...props} />\n}\n\nexport function Badge(props: TextProps) {\n  return <TextWrapper className=\"badge\" fontSize={8} fontWeight={600} lineHeight=\"8px\" {...props} />\n}\n\nexport function ButtonLarge(props: TextProps) {\n  return <TextWrapper className=\"button button-large\" fontSize={20} fontWeight={500} lineHeight=\"20px\" {...props} />\n}\n\nexport function ButtonMedium(props: TextProps) {\n  return <TextWrapper className=\"button button-medium\" fontSize={16} fontWeight={500} lineHeight=\"16px\" {...props} />\n}\n\nexport function ButtonSmall(props: TextProps) {\n  return <TextWrapper className=\"button button-small\" fontSize={14} fontWeight={500} lineHeight=\"14px\" {...props} />\n}\n\nexport function TransitionButton(props: TextProps & { buttonSize: 'small' | 'medium' | 'large' }) {\n  const className = `button button-${props.buttonSize}`\n  const fontSize = { small: 14, medium: 16, large: 20 }[props.buttonSize]\n  const lineHeight = `${fontSize}px`\n  return (\n    <TransitionTextWrapper\n      className={className}\n      fontSize={fontSize}\n      fontWeight={500}\n      lineHeight={lineHeight}\n      {...props}\n    />\n  )\n}\n\nexport function Code(props: TextProps) {\n  const { fontFamilyCode } = useTheme()\n  return (\n    <TextWrapper\n      className=\"code\"\n      fontSize={12}\n      fontWeight={400}\n      lineHeight=\"16px\"\n      fontFamily={fontFamilyCode}\n      {...props}\n    />\n  )\n}\n"],"sourceRoot":""}