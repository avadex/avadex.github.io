{"version":3,"sources":["lib/hooks/swap/index.ts","lib/hooks/swap/useSwapInfo.tsx","lib/hooks/routing/useClientSideSmartOrderRouterTrade.ts","lib/hooks/swap/useBestTrade.ts","lib/components/Swap/Summary.fixture.tsx"],"names":["amountAtom","pickAtom","swapAtom","useSwitchSwapCurrencies","update","useUpdateAtom","useCallback","swap","oldOutput","Field","OUTPUT","INPUT","independentField","useSwapCurrency","field","atom","useMemo","otherAtom","otherField","useAtom","currency","setCurrency","otherCurrency","useAtomValue","switchSwapCurrencies","setOrSwitchCurrency","useSwapAmount","amount","independentFieldAtom","value","undefined","updateSwap","updateAmount","useIsAmountPopulated","Boolean","BAD_RECIPIENT_ADDRESSES","swapInfoAtom","currencies","currencyBalances","currencyAmounts","trade","state","TradeState","INVALID","allowedSlippage","Percent","feeOptions","SwapInfoUpdater","setSwapInfo","swapInfo","account","useActiveWeb3React","inputCurrency","outputCurrency","feeOptionsAtom","to","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","tryParseCurrencyAmount","useBestTrade","TradeType","EXACT_INPUT","EXACT_OUTPUT","inputAmount","outputAmount","autoSlippageTolerance","useAutoSlippageTolerance","maxSlippage","maxSlippageAtom","inputError","formattedTo","isAddress","maximumAmountIn","balanceIn","amountIn","lessThan","symbol","useComputeSwapInfo","useEffect","useSwapInfo","config","protocols","Protocol","V2","V3","useClientSideSmartOrderRouterTrade","tradeType","amountSpecified","chainId","library","currencyIn","currencyOut","queryArgs","useRoutingAPIArguments","tokenIn","tokenOut","useClientSideRouter","params","provider","useState","loading","setLoading","quoteResult","error","setFetchedResult","a","getClientSideQuote","result","data","fetchQuote","route","computeRoutes","gasUseEstimateUSD","useStablecoinAmountFromFiatValue","LOADING","otherAmount","CurrencyAmount","fromRawAmount","quote","length","NO_ROUTE_FOUND","transformRoutesToTrade","VALID","e","console","debug","useDebounce","debouncedAmount","debouncedOtherCurrency","clientSORTrade","getTradeInputs","amountFromLatestTrade","currencyFromTrade","otherCurrencyFromTrade","debouncing","syncing","amounts","indepdenentCurrencies","dependentCurrencies","amountsMatch","equalTo","currenciesMatch","equals","isTradeDebouncing","useFallback","fallbackTrade","useClientSideV3Trade","SYNCING","AVAX","nativeOnChain","SupportedChainId","AVALANCHE","UNI","token","tokens","find","invariant","WrappedTokenInfo","Fixture","setState","color","onConfirm"],"mappings":"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","file":"static/js/59.c518c89e.chunk.js","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useAtom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { pickAtom } from 'lib/state/atoms'\nimport { Field, independentFieldAtom, swapAtom } from 'lib/state/swap'\nimport { useCallback, useMemo } from 'react'\nexport { default as useSwapInfo } from './useSwapInfo'\n\nexport const amountAtom = pickAtom(swapAtom, 'amount')\n\nfunction otherField(field: Field) {\n  switch (field) {\n    case Field.INPUT:\n      return Field.OUTPUT\n      break\n    case Field.OUTPUT:\n      return Field.INPUT\n      break\n  }\n}\n\nexport function useSwitchSwapCurrencies() {\n  const update = useUpdateAtom(swapAtom)\n  return useCallback(() => {\n    update((swap) => {\n      const oldOutput = swap[Field.OUTPUT]\n      swap[Field.OUTPUT] = swap[Field.INPUT]\n      swap[Field.INPUT] = oldOutput\n      switch (swap.independentField) {\n        case Field.INPUT:\n          swap.independentField = Field.OUTPUT\n          break\n        case Field.OUTPUT:\n          swap.independentField = Field.INPUT\n          break\n      }\n    })\n  }, [update])\n}\n\nexport function useSwapCurrency(field: Field): [Currency | undefined, (currency?: Currency) => void] {\n  const atom = useMemo(() => pickAtom(swapAtom, field), [field])\n  const otherAtom = useMemo(() => pickAtom(swapAtom, otherField(field)), [field])\n  const [currency, setCurrency] = useAtom(atom)\n  const otherCurrency = useAtomValue(otherAtom)\n  const switchSwapCurrencies = useSwitchSwapCurrencies()\n  const setOrSwitchCurrency = useCallback(\n    (currency?: Currency) => {\n      if (currency === otherCurrency) {\n        switchSwapCurrencies()\n      } else {\n        setCurrency(currency)\n      }\n    },\n    [otherCurrency, setCurrency, switchSwapCurrencies]\n  )\n  return [currency, setOrSwitchCurrency]\n}\n\nexport function useSwapAmount(field: Field): [string | undefined, (amount: string) => void] {\n  const amount = useAtomValue(amountAtom)\n  const independentField = useAtomValue(independentFieldAtom)\n  const value = useMemo(() => (independentField === field ? amount : undefined), [amount, independentField, field])\n  const updateSwap = useUpdateAtom(swapAtom)\n  const updateAmount = useCallback(\n    (amount: string) =>\n      updateSwap((swap) => {\n        swap.independentField = field\n        swap.amount = amount\n      }),\n    [field, updateSwap]\n  )\n  return [value, updateAmount]\n}\n\n// check if any amount has been entered by user\nexport function useIsAmountPopulated() {\n  return Boolean(useAtomValue(amountAtom))\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { atom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { useCurrencyBalances } from 'lib/hooks/useCurrencyBalance'\nimport { maxSlippageAtom } from 'lib/state/settings'\nimport { feeOptionsAtom, Field, swapAtom } from 'lib/state/swap'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useEffect, useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { isAddress } from '../../../utils'\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport { useBestTrade } from './useBestTrade'\n\ninterface SwapInfo {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  currencyAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  trade: {\n    trade?: InterfaceTrade<Currency, Currency, TradeType>\n    state: TradeState\n  }\n  allowedSlippage: Percent\n  feeOptions: FeeOptions | undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: { [address: string]: true } = {\n  '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10': true, // v2 factory\n  '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106': true, // v2 router 01\n  '0x60aE616a2155Ee3d9A68541Ba4544862310933d4': true, // v2 router 02\n}\n\n// from the current swap inputs, compute the best trade and return it.\nfunction useComputeSwapInfo(): SwapInfo {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    amount,\n    [Field.INPUT]: inputCurrency,\n    [Field.OUTPUT]: outputCurrency,\n  } = useAtomValue(swapAtom)\n\n  const feeOptions = useAtomValue(feeOptionsAtom)\n\n  const to = account\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency])\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = useMemo(\n    () => tryParseCurrencyAmount(amount, (isExactIn ? inputCurrency : outputCurrency) ?? undefined),\n    [inputCurrency, isExactIn, outputCurrency, amount]\n  )\n\n  //@TODO(ianlapham): this would eventually be replaced with routing api logic.\n  const trade = useBestTrade(\n    isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    parsedAmount,\n    (isExactIn ? outputCurrency : inputCurrency) ?? undefined\n  )\n\n  const currencies = useMemo(\n    () => ({\n      [Field.INPUT]: inputCurrency ?? undefined,\n      [Field.OUTPUT]: outputCurrency ?? undefined,\n    }),\n    [inputCurrency, outputCurrency]\n  )\n\n  const currencyBalances = useMemo(\n    () => ({\n      [Field.INPUT]: relevantTokenBalances[0],\n      [Field.OUTPUT]: relevantTokenBalances[1],\n    }),\n    [relevantTokenBalances]\n  )\n\n  const currencyAmounts = useMemo(\n    () => ({\n      [Field.INPUT]: trade.trade?.inputAmount,\n      [Field.OUTPUT]: trade.trade?.outputAmount,\n    }),\n    [trade.trade?.inputAmount, trade.trade?.outputAmount]\n  )\n\n  /*\n   * If user has enabled 'auto' slippage, use the default best slippage calculated\n   * based on the trade. If user has entered custom slippage, use that instead.\n   */\n  const autoSlippageTolerance = useAutoSlippageTolerance(trade.trade)\n  const maxSlippage = useAtomValue(maxSlippageAtom)\n  const allowedSlippage = useMemo(\n    () => (maxSlippage === 'auto' ? autoSlippageTolerance : maxSlippage),\n    [autoSlippageTolerance, maxSlippage]\n  )\n\n  const inputError = useMemo(() => {\n    let inputError: ReactNode | undefined\n\n    if (!account) {\n      inputError = <Trans>Connect Wallet</Trans>\n    }\n\n    if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n      inputError = inputError ?? <Trans>Select token</Trans>\n    }\n\n    if (!parsedAmount) {\n      inputError = inputError ?? <Trans>Enter an amount</Trans>\n    }\n\n    const formattedTo = isAddress(to)\n    if (!to || !formattedTo) {\n      inputError = inputError ?? <Trans>Enter a recipient</Trans>\n    } else {\n      if (BAD_RECIPIENT_ADDRESSES[formattedTo]) {\n        inputError = inputError ?? <Trans>Invalid recipient</Trans>\n      }\n    }\n\n    // compare input balance to max input based on version\n    const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], trade.trade?.maximumAmountIn(allowedSlippage)]\n\n    if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n      inputError = <Trans>Insufficient {amountIn.currency.symbol} balance</Trans>\n    }\n\n    return inputError\n  }, [account, allowedSlippage, currencies, currencyBalances, parsedAmount, to, trade.trade])\n\n  return useMemo(\n    () => ({\n      currencies,\n      currencyBalances,\n      currencyAmounts,\n      inputError,\n      trade,\n      allowedSlippage,\n      feeOptions,\n    }),\n    [currencies, currencyBalances, currencyAmounts, inputError, trade, allowedSlippage, feeOptions]\n  )\n}\n\nconst swapInfoAtom = atom<SwapInfo>({\n  currencies: {},\n  currencyBalances: {},\n  currencyAmounts: {},\n  trade: { state: TradeState.INVALID },\n  allowedSlippage: new Percent(0),\n  feeOptions: undefined,\n})\n\nexport function SwapInfoUpdater() {\n  const setSwapInfo = useUpdateAtom(swapInfoAtom)\n  const swapInfo = useComputeSwapInfo()\n  useEffect(() => {\n    setSwapInfo(swapInfo)\n  }, [swapInfo, setSwapInfo])\n  return null\n}\n\n/** Requires that SwapInfoUpdater be installed in the DOM tree. **/\nexport default function useSwapInfo(): SwapInfo {\n  return useAtomValue(swapInfoAtom)\n}\n","import { Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useUSDCPrice'\nimport { useEffect, useMemo, useState } from 'react'\nimport { GetQuoteResult, InterfaceTrade, TradeState } from 'state/routing/types'\nimport { computeRoutes, transformRoutesToTrade } from 'state/routing/utils'\n\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport { getClientSideQuote } from './clientSideSmartOrderRouter'\nimport { useRoutingAPIArguments } from './useRoutingAPIArguments'\n\nconst protocols: Protocol[] = [Protocol.V2, Protocol.V3]\nconst config = { protocols }\n\nexport default function useClientSideSmartOrderRouterTrade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined\n} {\n  const chainId = amountSpecified?.currency.chainId\n  const { library } = useActiveWeb3React()\n\n  const [currencyIn, currencyOut]: [Currency | undefined, Currency | undefined] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [amountSpecified, otherCurrency, tradeType]\n  )\n\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n    useClientSideRouter: true,\n  })\n  const params = useMemo(() => chainId && library && { chainId, provider: library }, [chainId, library])\n\n  const [loading, setLoading] = useState(false)\n  const [{ quoteResult, error }, setFetchedResult] = useState<{\n    quoteResult: GetQuoteResult | undefined\n    error: unknown\n  }>({\n    quoteResult: undefined,\n    error: undefined,\n  })\n\n  // When arguments update, make a new call to SOR for updated quote\n  useEffect(() => {\n    setLoading(true)\n    fetchQuote()\n\n    async function fetchQuote() {\n      try {\n        if (queryArgs && params) {\n          const result = await getClientSideQuote(queryArgs, params, config)\n          setFetchedResult({\n            quoteResult: result.data,\n            error: result.error,\n          })\n        }\n      } catch (e) {\n        setFetchedResult({\n          quoteResult: undefined,\n          error: true,\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n  }, [queryArgs, params])\n\n  const route = useMemo(\n    () => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult),\n    [currencyIn, currencyOut, quoteResult, tradeType]\n  )\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = useStablecoinAmountFromFiatValue(quoteResult?.gasUseEstimateUSD) ?? null\n\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (loading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    let otherAmount = undefined\n    if (tradeType === TradeType.EXACT_INPUT && currencyOut && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote)\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT && currencyIn && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote)\n    }\n\n    if (error || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, gasUseEstimateUSD)\n      return {\n        // always return VALID regardless of isFetching status\n        state: TradeState.VALID,\n        trade,\n      }\n    } catch (e) {\n      console.debug('transformRoutesToTrade failed: ', e)\n      return { state: TradeState.INVALID, trade: undefined }\n    }\n  }, [currencyIn, currencyOut, loading, quoteResult, tradeType, error, route, queryArgs, gasUseEstimateUSD])\n}\n","import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useClientSideV3Trade } from 'hooks/useClientSideV3Trade'\nimport useDebounce from 'hooks/useDebounce'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport useClientSideSmartOrderRouterTrade from '../routing/useClientSideSmartOrderRouterTrade'\n\n/**\n * Returns the currency amount from independent field, currency from independent field,\n * and currency from dependent field.\n */\nfunction getTradeInputs(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  tradeType: TradeType\n): [CurrencyAmount<Currency> | undefined, Currency | undefined, Currency | undefined] {\n  if (trade) {\n    if (tradeType === TradeType.EXACT_INPUT) {\n      return [trade.inputAmount, trade.inputAmount.currency, trade.outputAmount.currency]\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT) {\n      return [trade.outputAmount, trade.outputAmount.currency, trade.inputAmount.currency]\n    }\n  }\n  return [undefined, undefined, undefined]\n}\n\ninterface TradeDebouncingParams {\n  amounts: [CurrencyAmount<Currency> | undefined, CurrencyAmount<Currency> | undefined]\n  indepdenentCurrencies: [Currency | undefined, Currency | undefined]\n  dependentCurrencies: [Currency | undefined, Currency | undefined]\n}\n\n/**\n * Returns wether debounced values are stale compared to latest values from trade.\n */\nfunction isTradeDebouncing({ amounts, indepdenentCurrencies, dependentCurrencies }: TradeDebouncingParams): boolean {\n  // Ensure that amount from user input matches latest trade.\n  const amountsMatch = amounts[0] && amounts[1]?.equalTo(amounts[0])\n\n  // Ensure active swap currencies match latest trade.\n  const currenciesMatch =\n    indepdenentCurrencies[0] &&\n    indepdenentCurrencies[1]?.equals(indepdenentCurrencies[0]) &&\n    dependentCurrencies[0] &&\n    dependentCurrencies[1]?.equals(dependentCurrencies[0])\n\n  return !amountsMatch || !currenciesMatch\n}\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(\n  tradeType: TradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n} {\n  // Debounce is used to prevent excessive requests to SOR, as it is data intensive.\n  // This helps provide a \"syncing\" state the UI can reference for loading animations.\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce(\n    useMemo(() => [amountSpecified, otherCurrency], [amountSpecified, otherCurrency]),\n    200\n  )\n\n  const clientSORTrade = useClientSideSmartOrderRouterTrade(tradeType, debouncedAmount, debouncedOtherCurrency)\n\n  const [amountFromLatestTrade, currencyFromTrade, otherCurrencyFromTrade] = getTradeInputs(\n    clientSORTrade.trade,\n    tradeType\n  )\n\n  const debouncing =\n    (amountSpecified && debouncedAmount && amountSpecified !== debouncedAmount) ||\n    (amountSpecified && debouncedOtherCurrency && otherCurrency && debouncedOtherCurrency !== otherCurrency)\n\n  const syncing =\n    amountSpecified &&\n    isTradeDebouncing({\n      amounts: [amountFromLatestTrade, amountSpecified],\n      indepdenentCurrencies: [currencyFromTrade, amountSpecified?.currency],\n      dependentCurrencies: [otherCurrencyFromTrade, debouncedOtherCurrency],\n    })\n\n  const useFallback = !syncing && clientSORTrade.state === TradeState.NO_ROUTE_FOUND\n\n  // Use a simple client side logic as backup if SOR is not available.\n  const fallbackTrade = useClientSideV3Trade(\n    tradeType,\n    useFallback ? debouncedAmount : undefined,\n    useFallback ? debouncedOtherCurrency : undefined\n  )\n\n  return useMemo(\n    () => ({\n      ...(useFallback ? fallbackTrade : clientSORTrade),\n      ...(syncing ? { state: TradeState.SYNCING } : {}),\n      ...(debouncing ? { state: TradeState.LOADING } : {}),\n    }),\n    [debouncing, fallbackTrade, syncing, clientSORTrade, useFallback]\n  )\n}\n","import { tokens } from '@uniswap/default-token-list'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { useSwapInfo } from 'lib/hooks/swap'\nimport { SwapInfoUpdater } from 'lib/hooks/swap/useSwapInfo'\nimport { Field, swapAtom } from 'lib/state/swap'\nimport { useEffect } from 'react'\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\nimport invariant from 'tiny-invariant'\n\nimport { Modal } from '../Dialog'\nimport { SummaryDialog } from './Summary'\n\nconst AVAX = nativeOnChain(SupportedChainId.AVALANCHE)\nconst UNI = (function () {\n  const token = tokens.find(({ symbol }) => symbol === 'UNI')\n  invariant(token)\n  return new WrappedTokenInfo(token)\n})()\n\nfunction Fixture() {\n  const setState = useUpdateAtom(swapAtom)\n  const {\n    allowedSlippage,\n    trade: { trade },\n  } = useSwapInfo()\n\n  useEffect(() => {\n    setState({\n      independentField: Field.INPUT,\n      amount: '1',\n      [Field.INPUT]: AVAX,\n      [Field.OUTPUT]: UNI,\n    })\n  }, [setState])\n\n  return trade ? (\n    <Modal color=\"dialog\">\n      <SummaryDialog onConfirm={() => void 0} trade={trade} allowedSlippage={allowedSlippage} />\n    </Modal>\n  ) : null\n}\n\nexport default (\n  <>\n    <SwapInfoUpdater />\n    <Fixture />\n  </>\n)\n"],"sourceRoot":""}