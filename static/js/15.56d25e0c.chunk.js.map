{"version":3,"sources":["../../interface-4.45.0 plus mainrepo(copy) (copy)/src/lib/hooks/transactions/index.tsx","../../interface-4.45.0 plus mainrepo(copy) (copy)/src/lib/state/transactions.ts"],"names":["usePendingTransactions","chainId","useActiveWeb3React","txs","useAtomValue","transactionsAtom","useAddTransaction","blockNumber","useBlockNumber","updateTxs","useUpdateAtom","useCallback","info","invariant","txChainId","hash","response","chainTxs","addedTime","Date","getTime","lastCheckedBlockNumber","usePendingApproval","token","spender","Object","values","find","tx","undefined","receipt","type","TransactionType","APPROVAL","tokenAddress","address","spenderAddress","transaction","now","TransactionsUpdater","pendingTransactions","onCheck","Math","max","onReceipt","atomWithImmer"],"mappings":"gIACA,8RAcO,SAASA,IAA0B,IAAD,EAC/BC,EAAYC,oBAAZD,QACFE,EAAMC,uBAAaC,oBACzB,iBAAQJ,EAAUE,EAAIF,GAAW,YAAjC,QAA0C,GAGrC,SAASK,IACd,IAAQL,EAAYC,oBAAZD,QACFM,EAAcC,oBACdC,EAAYC,wBAAcL,oBAEhC,OAAOM,uBACL,SAACC,GACCC,kBAAUZ,GACV,IAAMa,EAAYb,EACVc,EAASH,EAAKI,SAAdD,KAERN,GAAU,SAACQ,GACT,IAAMd,EAAMc,EAASH,IAAc,GACnCX,EAAIY,GAAQ,CAAEG,WAAW,IAAIC,MAAOC,UAAWC,uBAAwBd,EAAaK,QACpFK,EAAShB,GAAWE,OAGxB,CAACI,EAAaN,EAASQ,IAKpB,SAASa,EAAmBC,EAAeC,GAAuC,IAAD,EAC9EvB,EAAYC,oBAAZD,QACFE,EAAMC,uBAAaC,oBACzB,GAAKJ,GAAYsB,GAAUC,EAA3B,CAEA,IAAMP,EAAWd,EAAIF,GACrB,GAAKgB,EAEL,iBAAOQ,OAAOC,OAAOT,GAAUU,MAC7B,SAACC,GAAD,OACEA,QACeC,IAAfD,EAAGE,SACHF,EAAGhB,KAAKmB,OAASC,kBAAgBC,UACjCL,EAAGhB,KAAKsB,eAAiBX,EAAMY,SAC/BP,EAAGhB,KAAKwB,iBAAmBZ,IA9CJa,EA+CHT,EA9CjBT,KAAKmB,MAAQD,EAAYnB,UAAzB,OADT,IAA6BmB,YAwC3B,aAAO,EAQJzB,KAAKI,SAASD,MAGZ,SAASwB,IACd,IAAMC,EAAsBxC,IAEtBS,EAAYC,wBAAcL,oBAC1BoC,EAAU9B,uBACd,YAAqC,IAAlCV,EAAiC,EAAjCA,QAASc,EAAwB,EAAxBA,KAAMR,EAAkB,EAAlBA,YAChBE,GAAU,SAACN,GAAS,IAAD,EACXyB,EAAE,UAAGzB,EAAIF,UAAP,aAAG,EAAec,GACtBa,IACFA,EAAGP,uBAAyBO,EAAGP,uBAC3BqB,KAAKC,IAAIf,EAAGP,uBAAwBd,GACpCA,QAIV,CAACE,IAEGmC,EAAYjC,uBAChB,YAAiC,IAA9BV,EAA6B,EAA7BA,QAASc,EAAoB,EAApBA,KAAMe,EAAc,EAAdA,QAChBrB,GAAU,SAACN,GAAS,IAAD,EACXyB,EAAE,UAAGzB,EAAIF,UAAP,aAAG,EAAec,GACtBa,IACFA,EAAGE,QAAUA,QAInB,CAACrB,IAGH,OAAO,cAAC,UAAD,CAAS+B,oBAAqBA,EAAqBC,QAASA,EAASG,UAAWA,M,iCCzFzF,4GAEYZ,EAFZ,W,SAEYA,O,uBAAAA,I,gBAAAA,M,KA4CL,IAAM3B,EAAmBwC,wBAE7B","file":"static/js/15.56d25e0c.chunk.js","sourcesContent":["import { Token } from '@uniswap/sdk-core'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { Transaction, TransactionInfo, transactionsAtom, TransactionType } from 'lib/state/transactions'\nimport ms from 'ms.macro'\nimport { useCallback } from 'react'\nimport invariant from 'tiny-invariant'\n\nimport useBlockNumber from '../useBlockNumber'\nimport Updater from './updater'\n\nfunction isTransactionRecent(transaction: Transaction) {\n  return Date.now() - transaction.addedTime < ms`1d`\n}\n\nexport function usePendingTransactions() {\n  const { chainId } = useActiveWeb3React()\n  const txs = useAtomValue(transactionsAtom)\n  return (chainId ? txs[chainId] : null) ?? {}\n}\n\nexport function useAddTransaction() {\n  const { chainId } = useActiveWeb3React()\n  const blockNumber = useBlockNumber()\n  const updateTxs = useUpdateAtom(transactionsAtom)\n\n  return useCallback(\n    (info: TransactionInfo) => {\n      invariant(chainId)\n      const txChainId = chainId\n      const { hash } = info.response\n\n      updateTxs((chainTxs) => {\n        const txs = chainTxs[txChainId] || {}\n        txs[hash] = { addedTime: new Date().getTime(), lastCheckedBlockNumber: blockNumber, info }\n        chainTxs[chainId] = txs\n      })\n    },\n    [blockNumber, chainId, updateTxs]\n  )\n}\n\n/** Returns the hash of a pending approval transaction, if it exists. */\nexport function usePendingApproval(token?: Token, spender?: string): string | undefined {\n  const { chainId } = useActiveWeb3React()\n  const txs = useAtomValue(transactionsAtom)\n  if (!chainId || !token || !spender) return undefined\n\n  const chainTxs = txs[chainId]\n  if (!chainTxs) return undefined\n\n  return Object.values(chainTxs).find(\n    (tx) =>\n      tx &&\n      tx.receipt === undefined &&\n      tx.info.type === TransactionType.APPROVAL &&\n      tx.info.tokenAddress === token.address &&\n      tx.info.spenderAddress === spender &&\n      isTransactionRecent(tx)\n  )?.info.response.hash\n}\n\nexport function TransactionsUpdater() {\n  const pendingTransactions = usePendingTransactions()\n\n  const updateTxs = useUpdateAtom(transactionsAtom)\n  const onCheck = useCallback(\n    ({ chainId, hash, blockNumber }) => {\n      updateTxs((txs) => {\n        const tx = txs[chainId]?.[hash]\n        if (tx) {\n          tx.lastCheckedBlockNumber = tx.lastCheckedBlockNumber\n            ? Math.max(tx.lastCheckedBlockNumber, blockNumber)\n            : blockNumber\n        }\n      })\n    },\n    [updateTxs]\n  )\n  const onReceipt = useCallback(\n    ({ chainId, hash, receipt }) => {\n      updateTxs((txs) => {\n        const tx = txs[chainId]?.[hash]\n        if (tx) {\n          tx.receipt = receipt\n        }\n      })\n    },\n    [updateTxs]\n  )\n\n  return <Updater pendingTransactions={pendingTransactions} onCheck={onCheck} onReceipt={onReceipt} />\n}\n","import { TransactionReceipt, TransactionResponse } from '@ethersproject/abstract-provider'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { atomWithImmer } from 'jotai/immer'\n\nexport enum TransactionType {\n  APPROVAL,\n  SWAP,\n}\n\ninterface BaseTransactionInfo {\n  type: TransactionType\n  response: TransactionResponse\n}\n\nexport interface ApprovalTransactionInfo extends BaseTransactionInfo {\n  type: TransactionType.APPROVAL\n  tokenAddress: string\n  spenderAddress: string\n}\n\nexport interface SwapTransactionInfo extends BaseTransactionInfo {\n  type: TransactionType.SWAP\n  tradeType: TradeType\n  inputCurrencyAmount: CurrencyAmount<Currency>\n  outputCurrencyAmount: CurrencyAmount<Currency>\n}\n\nexport interface InputSwapTransactionInfo extends SwapTransactionInfo {\n  tradeType: TradeType.EXACT_INPUT\n  expectedOutputCurrencyAmount: string\n  minimumOutputCurrencyAmount: string\n}\n\nexport interface OutputSwapTransactionInfo extends SwapTransactionInfo {\n  tradeType: TradeType.EXACT_OUTPUT\n  expectedInputCurrencyAmount: string\n  maximumInputCurrencyAmount: string\n}\n\nexport type TransactionInfo = ApprovalTransactionInfo | SwapTransactionInfo\n\nexport interface Transaction<T extends TransactionInfo = TransactionInfo> {\n  addedTime: number\n  lastCheckedBlockNumber?: number\n  receipt?: TransactionReceipt\n  info: T\n}\n\nexport const transactionsAtom = atomWithImmer<{\n  [chainId: string]: { [hash: string]: Transaction }\n}>({})\n"],"sourceRoot":""}