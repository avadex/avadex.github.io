{"version":3,"sources":["lib/hooks/swap/index.ts","lib/hooks/transactions/index.tsx","lib/components/TokenSelect/index.tsx","lib/components/Swap/Settings/index.tsx","lib/components/Swap/Status/index.ts","lib/components/Swap/Toolbar/index.tsx","lib/components/Swap/index.tsx","lib/components/Input.tsx","lib/hooks/swap/useSwapInfo.tsx","../node_modules/popper-max-size-modifier/dist/popper-max-size-modifier.esm.js","lib/components/Popover.tsx","lib/hooks/routing/useClientSideSmartOrderRouterTrade.ts","lib/components/Tooltip.tsx","lib/state/transactions.ts","lib/hooks/useAllowedSlippage.ts","lib/hooks/swap/useBestTrade.ts","lib/components/Swap/Settings/components.tsx","lib/css/loading.ts","lib/components/Error/ErrorDialog.tsx","lib/errors.ts","lib/hooks/useTransactionDeadline.ts","lib/components/TokenSelect/TokenBase.tsx","lib/components/TokenSelect/TokenButton.tsx","lib/components/TokenSelect/TokenOptions.tsx","lib/hooks/useCurrencyColor.ts","lib/components/Swap/TokenInput.tsx","lib/components/Swap/Status/StatusDialog.tsx","lib/components/ExternalLink.tsx","lib/components/Swap/Settings/MaxSlippageSelect.tsx","lib/components/Swap/Settings/TransactionTtlInput.tsx","lib/components/Swap/Toolbar/RoutingTooltip.tsx","lib/components/BrandedFooter.tsx","lib/components/Swap/Toolbar/Caption.tsx","lib/components/Swap/Output.tsx","lib/components/Swap/Input.tsx","lib/components/Swap/ReverseButton.tsx","lib/hooks/swap/useSyncConvenienceFee.ts","lib/hooks/swap/useSyncSwapDefaults.ts","lib/components/Wallet.tsx","lib/components/Swap/SwapButton.tsx","lib/components/Swap/SwapPropValidator.tsx"],"names":["amountAtom","pickAtom","swapAtom","useSwitchSwapCurrencies","update","useUpdateAtom","useCallback","swap","oldOutput","Field","OUTPUT","INPUT","independentField","useSwapCurrency","field","atom","useMemo","otherAtom","otherField","useAtom","currency","setCurrency","otherCurrency","useAtomValue","switchSwapCurrencies","setOrSwitchCurrency","useSwapAmount","amount","independentFieldAtom","value","undefined","updateSwap","updateAmount","useIsAmountPopulated","Boolean","usePendingTransactions","chainId","useActiveWeb3React","txs","transactionsAtom","useAddTransaction","blockNumber","useBlockNumber","updateTxs","info","invariant","txChainId","hash","response","chainTxs","addedTime","Date","getTime","lastCheckedBlockNumber","usePendingApproval","token","spender","Object","values","find","tx","receipt","type","TransactionType","APPROVAL","tokenAddress","address","spenderAddress","transaction","now","TransactionsUpdater","pendingTransactions","onCheck","Math","max","onReceipt","SearchInput","styled","StringInput","inputCss","TokenSelectDialog","onSelect","useState","query","setQuery","queriedTokens","useQueryTokenList","tokens","filter","baseTokens","input","useRef","useEffect","current","focus","options","setOptions","title","gap","pad","grow","Body1","onChange","placeholder","onKeyDown","onBlur","blur","ref","length","justify","flex","map","onClick","currencyId","padded","TokenSelect","collapsed","disabled","open","setOpen","selectAndClose","color","onClose","SettingsDialog","boundary","setBoundary","scrollbar","useScrollbar","resetSettings","useResetAtom","settingsAtom","ruled","ButtonSmall","style","paddingTop","css","SettingsButton","IconButton","SettingsIcon","hover","Settings","setHover","onMouseEnter","onMouseLeave","icon","ToolbarRow","Row","largeIconCss","Toolbar","useSwapInfo","trade","state","currencies","inputCurrency","outputCurrency","balance","currencyBalances","swaps","TradeState","LOADING","SYNCING","routeFound","routeIsLoading","isAmountPopulated","caption","ALL_SUPPORTED_CHAIN_IDS","includes","inputAmount","greaterThan","outputAmount","Caption","iconSize","Swap","props","list","useTokenList","tokenList","useSyncSwapDefaults","useSyncConvenienceFee","active","account","displayTxHashAtom","displayTxHash","setDisplayTxHash","displayTx","SWAP","getSwapTx","onSupportedChain","some","onConnectWallet","Input","theme","secondary","forwardRef","e","target","inputMode","autoComplete","autoCorrect","minLength","spellCheck","isNumericallyEqual","a","b","split","aInteger","aDecimal","bInteger","bDecimal","JSBI","equal","BigInt","NumericInput","enforcer","pattern","setState","validateChange","event","nextInput","replace","maxLength","integerRegexp","integerEnforcer","nextUserInput","test","parseInt","isNaN","toString","IntegerInput","decimalRegexp","decimalEnforcer","DecimalInput","container","borderRadius","onHover","BAD_RECIPIENT_ADDRESSES","swapInfoAtom","currencyAmounts","INVALID","allowedSlippage","Percent","feeOptions","SwapInfoUpdater","setSwapInfo","swapInfo","feeOptionsAtom","to","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","tryParseCurrencyAmount","useBestTrade","TradeType","EXACT_INPUT","EXACT_OUTPUT","useAllowedSlippage","inputError","formattedTo","isAddress","maximumAmountIn","balanceIn","amountIn","lessThan","symbol","useComputeSwapInfo","maxSize","name","enabled","phase","requiresIfExists","fn","_ref","overflow","detectOverflow","_ref2","modifiersData","preventOverflow","x","y","_state$rects$popper","rects","popper","width","height","basePlacement","placement","widthProp","heightProp","BoundaryContext","createContext","BoundaryProvider","Provider","PopoverContainer","div","dialog","outline","show","Layer","TOOLTIP","Reference","Arrow","Popover","content","children","offset","contained","useContext","reference","popover","setPopover","arrow","setArrow","modifiers","element","padding","push","requires","styles","maxWidth","strategy","usePopper","attributes","createPortal","className","config","protocols","Protocol","V2","V3","useClientSideSmartOrderRouterTrade","tradeType","amountSpecified","library","currencyIn","currencyOut","queryArgs","useRoutingAPIArguments","tokenIn","tokenOut","useClientSideRouter","params","provider","loading","setLoading","quoteResult","error","setFetchedResult","getClientSideQuote","result","data","fetchQuote","route","computeRoutes","gasUseEstimateUSD","useStablecoinAmountFromFiatValue","otherAmount","CurrencyAmount","fromRawAmount","quote","NO_ROUTE_FOUND","transformRoutesToTrade","VALID","console","debug","useTooltip","setShow","enable","disable","onFocus","IconTooltip","Tooltip","Icon","HelpCircle","iconProps","showTooltip","tooltipProps","atomWithImmer","toPercent","maxSlippage","numerator","floor","useMaxSlippage","autoSlippage","useAutoSlippageTolerance","maxSlippageAtom","autoSlippageAtom","useDebounce","debouncedAmount","debouncedOtherCurrency","clientSORTrade","getTradeInputs","amountFromLatestTrade","currencyFromTrade","otherCurrencyFromTrade","debouncing","syncing","amounts","indepdenentCurrencies","dependentCurrencies","amountsMatch","equalTo","currenciesMatch","equals","isTradeDebouncing","useFallback","fallbackTrade","useClientSideV3Trade","optionCss","selected","primary","Value","cursor","Label","tooltip","Subhead2","loadingOpacityCss","$loading","HeaderIcon","LargeIcon","StatusHeader","iconColor","flexGrow","size","textAlign","ErrorHeader","Column","ErrorColumn","ExpandoColumn","Rule","ErrorDialog","header","action","onAction","details","setDetails","align","AlertTriangle","Subhead1","Body2","Expando","Code","message","IntegrationError","Error","useDefaultTransactionTtl","L2_CHAIN_IDS","L2_DEADLINE_FROM_NOW","DEFAULT_DEADLINE_FROM_NOW","useTransactionTtl","transactionTtlAtom","useTransactionDeadline","ttl","defaultTtl","blockTimestamp","useCurrentBlockTimestamp","add","TokenButton","Button","TokenBase","ButtonMedium","StyledTokenButton","empty","TokenButtonRow","buttonBackgroundColor","contentColor","ButtonLarge","strokeWidth","BaseButton","TokenList","FixedSizeList","module","OnHover","TokenOption","index","i18n","useLingui","onEvent","useCurrencyBalance","onMouseMove","formatCurrencyAmount","locale","itemKey","ItemRow","memo","areEqual","TokenOptions","focused","setFocused","scrollTo","scrollToItem","key","preventDefault","useImperativeHandle","setElement","useNativeEvent","marginTop","scrollTop","disableWidth","itemCount","itemData","itemSize","outerRef","colors","Map","getColorFromLogoURIs","logoURIs","cb","get","logoURI","uri","startsWith","getColorFromUriPath","set","Vibrant","from","getPalette","palette","hex","usePrefetchCurrencyColor","useTheme","useCurrencyLogoURIs","tokenColorExtraction","useCurrencyColor","setColor","useLayoutEffect","stale","TokenInputRow","ValueInput","delayedFadeIn","keyframes","MaxButton","TokenInput","onMax","onChangeInput","onChangeCurrency","showMax","setShowMax","relatedTarget","H2","errorMessage","TransactionRow","ElapsedTime","elapsedMs","setElapsedMs","useInterval","timestamp","toElapsedTime","ms","sec","min","EtherscanA","accent","TransactionStatus","status","CheckCircle","Spinner","heading","inputCurrencyAmount","output","outputCurrencyAmount","href","TransactionStatusDialog","ExternalLink","rel","rest","WarningState","highSlippage","invalidSlippage","TextButton","Custom","Option","Wrapper","wrapper","tooltipHandlers","Check","Warning","INVALID_SLIPPAGE","XOctagon","HIGH_SLIPPAGE","NONE","MaxSlippageSelect","setAutoSlippage","setMaxSlippage","maxSlippageInput","warning","setWarning","setShowTooltip","processInput","percent","MAX_VALID_SLIPPAGE","MIN_HIGH_SLIPPAGE","onInputSelect","TransactionTtlInput","setTtl","parseFloat","RoutingTooltip","UniswapA","Logo","brand","BrandedFooter","ConnectWallet","UnsupportedNetwork","InsufficientBalance","InsufficientLiquidity","Empty","Info","LoadingTrade","Trade","flip","setFlip","executionPrice","fiatValueInput","useUSDCPrice","fiatValueOutput","ratio","priceString","invert","toSignificant","usdc","userSelect","colorAtom","LoadingSpan","span","OutputColumn","hasColor","Output","tradeState","swapOutputAmount","updateSwapOutputAmount","swapOutputCurrency","updateSwapOutputCurrency","isTradeLoading","isLoading","overrideColor","dynamicColor","inputUSDC","useUSDCValue","outputUSDC","priceImpact","computedChange","computeFiatValuePriceImpact","multiply","toFixed","InputColumn","TokenImg","approved","swapInputAmount","updateSwapInputAmount","swapInputCurrency","updateSwapInputCurrency","toExact","ReverseRow","OVERLAY","ArrowUp","ArrowUpIcon","ArrowDown","ArrowDownIcon","Overlay","StyledReverseButton","turns","ReverseButton","setTurns","switchCurrencies","convenienceFee","convenienceFeeRecipient","updateFeeOptions","fee","recipient","useDefaultToken","defaultAddress","useToken","nativeOnChain","defaultInputAddress","defaultInputAmount","defaultOutputAddress","defaultOutputAmount","defaultInputToken","defaultOutputToken","setToDefaults","defaultSwapState","previousChainId","setPreviousChainId","ClickableRow","Wallet","useIsPendingApproval","SwapButton","inputCurrencyBalance","activeTrade","setActiveTrade","optimizedTrade","useSwapApprovalOptimizedTrade","useSwapApproval","approval","getApproval","approvalHash","isToken","useSwapRouterAddress","addTransaction","addApprovalTransaction","then","actionProps","ApprovalState","PENDING","CHAIN_INFO","explorer","NOT_APPROVED","deadline","signatureData","useERC20PermitFromTrade","swapCallback","useSwapCallback","recipientAddressOrName","callback","onConfirm","catch","log","finally","onUpdate","isAddressOrAddressMap","addressOrMap","every","SwapPropValidator","forEach","join","BigNumber","lt"],"mappings":"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","file":"static/js/6.98c32cca.chunk.js","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useAtom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { pickAtom } from 'lib/state/atoms'\nimport { Field, independentFieldAtom, swapAtom } from 'lib/state/swap'\nimport { useCallback, useMemo } from 'react'\nexport { default as useSwapInfo } from './useSwapInfo'\n\nexport const amountAtom = pickAtom(swapAtom, 'amount')\n\nfunction otherField(field: Field) {\n  switch (field) {\n    case Field.INPUT:\n      return Field.OUTPUT\n      break\n    case Field.OUTPUT:\n      return Field.INPUT\n      break\n  }\n}\n\nexport function useSwitchSwapCurrencies() {\n  const update = useUpdateAtom(swapAtom)\n  return useCallback(() => {\n    update((swap) => {\n      const oldOutput = swap[Field.OUTPUT]\n      swap[Field.OUTPUT] = swap[Field.INPUT]\n      swap[Field.INPUT] = oldOutput\n      switch (swap.independentField) {\n        case Field.INPUT:\n          swap.independentField = Field.OUTPUT\n          break\n        case Field.OUTPUT:\n          swap.independentField = Field.INPUT\n          break\n      }\n    })\n  }, [update])\n}\n\nexport function useSwapCurrency(field: Field): [Currency | undefined, (currency?: Currency) => void] {\n  const atom = useMemo(() => pickAtom(swapAtom, field), [field])\n  const otherAtom = useMemo(() => pickAtom(swapAtom, otherField(field)), [field])\n  const [currency, setCurrency] = useAtom(atom)\n  const otherCurrency = useAtomValue(otherAtom)\n  const switchSwapCurrencies = useSwitchSwapCurrencies()\n  const setOrSwitchCurrency = useCallback(\n    (currency?: Currency) => {\n      if (currency === otherCurrency) {\n        switchSwapCurrencies()\n      } else {\n        setCurrency(currency)\n      }\n    },\n    [otherCurrency, setCurrency, switchSwapCurrencies]\n  )\n  return [currency, setOrSwitchCurrency]\n}\n\nexport function useSwapAmount(field: Field): [string | undefined, (amount: string) => void] {\n  const amount = useAtomValue(amountAtom)\n  const independentField = useAtomValue(independentFieldAtom)\n  const value = useMemo(() => (independentField === field ? amount : undefined), [amount, independentField, field])\n  const updateSwap = useUpdateAtom(swapAtom)\n  const updateAmount = useCallback(\n    (amount: string) =>\n      updateSwap((swap) => {\n        swap.independentField = field\n        swap.amount = amount\n      }),\n    [field, updateSwap]\n  )\n  return [value, updateAmount]\n}\n\n// check if any amount has been entered by user\nexport function useIsAmountPopulated() {\n  return Boolean(useAtomValue(amountAtom))\n}\n","import { Token } from '@uniswap/sdk-core'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { Transaction, TransactionInfo, transactionsAtom, TransactionType } from 'lib/state/transactions'\nimport ms from 'ms.macro'\nimport { useCallback } from 'react'\nimport invariant from 'tiny-invariant'\n\nimport useBlockNumber from '../useBlockNumber'\nimport Updater from './updater'\n\nfunction isTransactionRecent(transaction: Transaction) {\n  return Date.now() - transaction.addedTime < ms`1d`\n}\n\nexport function usePendingTransactions() {\n  const { chainId } = useActiveWeb3React()\n  const txs = useAtomValue(transactionsAtom)\n  return (chainId ? txs[chainId] : null) ?? {}\n}\n\nexport function useAddTransaction() {\n  const { chainId } = useActiveWeb3React()\n  const blockNumber = useBlockNumber()\n  const updateTxs = useUpdateAtom(transactionsAtom)\n\n  return useCallback(\n    (info: TransactionInfo) => {\n      invariant(chainId)\n      const txChainId = chainId\n      const { hash } = info.response\n\n      updateTxs((chainTxs) => {\n        const txs = chainTxs[txChainId] || {}\n        txs[hash] = { addedTime: new Date().getTime(), lastCheckedBlockNumber: blockNumber, info }\n        chainTxs[chainId] = txs\n      })\n    },\n    [blockNumber, chainId, updateTxs]\n  )\n}\n\n/** Returns the hash of a pending approval transaction, if it exists. */\nexport function usePendingApproval(token?: Token, spender?: string): string | undefined {\n  const { chainId } = useActiveWeb3React()\n  const txs = useAtomValue(transactionsAtom)\n  if (!chainId || !token || !spender) return undefined\n\n  const chainTxs = txs[chainId]\n  if (!chainTxs) return undefined\n\n  return Object.values(chainTxs).find(\n    (tx) =>\n      tx &&\n      tx.receipt === undefined &&\n      tx.info.type === TransactionType.APPROVAL &&\n      tx.info.tokenAddress === token.address &&\n      tx.info.spenderAddress === spender &&\n      isTransactionRecent(tx)\n  )?.info.response.hash\n}\n\nexport function TransactionsUpdater() {\n  const pendingTransactions = usePendingTransactions()\n\n  const updateTxs = useUpdateAtom(transactionsAtom)\n  const onCheck = useCallback(\n    ({ chainId, hash, blockNumber }) => {\n      updateTxs((txs) => {\n        const tx = txs[chainId]?.[hash]\n        if (tx) {\n          tx.lastCheckedBlockNumber = tx.lastCheckedBlockNumber\n            ? Math.max(tx.lastCheckedBlockNumber, blockNumber)\n            : blockNumber\n        }\n      })\n    },\n    [updateTxs]\n  )\n  const onReceipt = useCallback(\n    ({ chainId, hash, receipt }) => {\n      updateTxs((txs) => {\n        const tx = txs[chainId]?.[hash]\n        if (tx) {\n          tx.receipt = receipt\n        }\n      })\n    },\n    [updateTxs]\n  )\n\n  return <Updater pendingTransactions={pendingTransactions} onCheck={onCheck} onReceipt={onReceipt} />\n}\n","import { t, Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useQueryTokenList } from 'lib/hooks/useTokenList'\nimport styled, { ThemedText } from 'lib/theme'\nimport { ElementRef, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { currencyId } from 'utils/currencyId'\n\nimport Column from '../Column'\nimport Dialog, { Header } from '../Dialog'\nimport { inputCss, StringInput } from '../Input'\nimport Row from '../Row'\nimport Rule from '../Rule'\nimport TokenBase from './TokenBase'\nimport TokenButton from './TokenButton'\nimport TokenOptions from './TokenOptions'\n\nconst SearchInput = styled(StringInput)`\n  ${inputCss}\n`\n\ninterface TokenSelectDialogProps {\n  value?: Currency\n  onSelect: (token: Currency) => void\n}\n\nexport function TokenSelectDialog({ value, onSelect }: TokenSelectDialogProps) {\n  const [query, setQuery] = useState('')\n  const queriedTokens = useQueryTokenList(query)\n  const tokens = useMemo(() => queriedTokens.filter((token) => token !== value), [queriedTokens, value])\n\n  const baseTokens: Currency[] = [] // TODO(zzmp): Add base tokens to token list functionality\n\n  const input = useRef<HTMLInputElement>(null)\n  useEffect(() => input.current?.focus(), [input])\n\n  const [options, setOptions] = useState<ElementRef<typeof TokenOptions> | null>(null)\n\n  return (\n    <>\n      <Header title={<Trans>Selec token</Trans>} />\n      <Column gap={0.75}>\n        <Row pad={0.75} grow>\n          <ThemedText.Body1>\n            <SearchInput\n              value={query}\n              onChange={setQuery}\n              placeholder={t`Search by token name or address`}\n              onKeyDown={options?.onKeyDown}\n              onBlur={options?.blur}\n              ref={input}\n            />\n          </ThemedText.Body1>\n        </Row>\n        {Boolean(baseTokens.length) && (\n          <Row pad={0.75} gap={0.25} justify=\"flex-start\" flex>\n            {baseTokens.map((token) => (\n              <TokenBase value={token} onClick={onSelect} key={currencyId(token)} />\n            ))}\n          </Row>\n        )}\n        <Rule padded />\n      </Column>\n      <TokenOptions tokens={tokens} onSelect={onSelect} ref={setOptions} />\n    </>\n  )\n}\n\ninterface TokenSelectProps {\n  value?: Currency\n  collapsed: boolean\n  disabled?: boolean\n  onSelect: (value: Currency) => void\n}\n\nexport default function TokenSelect({ value, collapsed, disabled, onSelect }: TokenSelectProps) {\n  const [open, setOpen] = useState(false)\n  const selectAndClose = useCallback(\n    (value: Currency) => {\n      onSelect(value)\n      setOpen(false)\n    },\n    [onSelect, setOpen]\n  )\n  return (\n    <>\n      <TokenButton value={value} collapsed={collapsed} disabled={disabled} onClick={() => setOpen(true)} />\n      {open && (\n        <Dialog color=\"module\" onClose={() => setOpen(false)}>\n          <TokenSelectDialog value={value} onSelect={selectAndClose} />\n        </Dialog>\n      )}\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useResetAtom } from 'jotai/utils'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport { Settings as SettingsIcon } from 'lib/icons'\nimport { settingsAtom } from 'lib/state/settings'\nimport styled, { ThemedText } from 'lib/theme'\nimport React, { useState } from 'react'\n\nimport { IconButton, TextButton } from '../../Button'\nimport Column from '../../Column'\nimport Dialog, { Header } from '../../Dialog'\nimport { BoundaryProvider } from '../../Popover'\nimport MaxSlippageSelect from './MaxSlippageSelect'\nimport TransactionTtlInput from './TransactionTtlInput'\n\nexport function SettingsDialog() {\n  const [boundary, setBoundary] = useState<HTMLDivElement | null>(null)\n  const scrollbar = useScrollbar(boundary, { padded: true })\n  const resetSettings = useResetAtom(settingsAtom)\n  return (\n    <>\n      <Header title={<Trans>Settings</Trans>} ruled>\n        <TextButton onClick={resetSettings}>\n          <ThemedText.ButtonSmall>\n            <Trans>Reset</Trans>\n          </ThemedText.ButtonSmall>\n        </TextButton>\n      </Header>\n      <Column gap={1} style={{ paddingTop: '1em' }} ref={setBoundary} padded css={scrollbar}>\n        <BoundaryProvider value={boundary}>\n          <MaxSlippageSelect />\n          <TransactionTtlInput />\n        </BoundaryProvider>\n      </Column>\n    </>\n  )\n}\n\nconst SettingsButton = styled(IconButton)<{ hover: boolean }>`\n  ${SettingsIcon} {\n    transform: ${({ hover }) => hover && 'rotate(45deg)'};\n    transition: ${({ hover }) => hover && 'transform 0.25s'};\n    will-change: transform;\n  }\n`\n\nexport default function Settings({ disabled }: { disabled?: boolean }) {\n  const [open, setOpen] = useState(false)\n  const [hover, setHover] = useState(false)\n  return (\n    <>\n      <SettingsButton\n        disabled={disabled}\n        hover={hover}\n        onClick={() => setOpen(true)}\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        icon={SettingsIcon}\n      />\n      {open && (\n        <Dialog color=\"module\" onClose={() => setOpen(false)}>\n          <SettingsDialog />\n        </Dialog>\n      )}\n    </>\n  )\n}\n","export { default as StatusDialog } from './StatusDialog'\n","import { ALL_SUPPORTED_CHAIN_IDS } from 'constants/chains'\nimport { useIsAmountPopulated, useSwapInfo } from 'lib/hooks/swap'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { largeIconCss } from 'lib/icons'\nimport { Field } from 'lib/state/swap'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\nimport { TradeState } from 'state/routing/types'\n\nimport Row from '../../Row'\nimport Rule from '../../Rule'\nimport * as Caption from './Caption'\n\nconst ToolbarRow = styled(Row)`\n  padding: 0.5em 0;\n  ${largeIconCss}\n`\n\nexport default function Toolbar({ disabled }: { disabled?: boolean }) {\n  const { chainId } = useActiveWeb3React()\n  const {\n    trade: { trade, state },\n    currencies: { [Field.INPUT]: inputCurrency, [Field.OUTPUT]: outputCurrency },\n    currencyBalances: { [Field.INPUT]: balance },\n  } = useSwapInfo()\n\n  const [routeFound, routeIsLoading] = useMemo(\n    () => [Boolean(trade?.swaps), TradeState.LOADING === state || TradeState.SYNCING === state],\n    [state, trade?.swaps]\n  )\n\n  const isAmountPopulated = useIsAmountPopulated()\n\n  const caption = useMemo(() => {\n    if (disabled) {\n      return <Caption.ConnectWallet />\n    }\n\n    if (chainId && !ALL_SUPPORTED_CHAIN_IDS.includes(chainId)) {\n      return <Caption.UnsupportedNetwork />\n    }\n\n    if (balance && trade?.inputAmount.greaterThan(balance)) {\n      return <Caption.InsufficientBalance currency={trade.inputAmount.currency} />\n    }\n\n    if (inputCurrency && outputCurrency && isAmountPopulated) {\n      if (!trade || routeIsLoading) {\n        return <Caption.LoadingTrade />\n      }\n      if (!routeFound) {\n        return <Caption.InsufficientLiquidity />\n      }\n      if (trade.inputAmount && trade.outputAmount) {\n        return <Caption.Trade trade={trade} />\n      }\n    }\n\n    return <Caption.Empty />\n  }, [balance, chainId, disabled, inputCurrency, isAmountPopulated, outputCurrency, routeFound, routeIsLoading, trade])\n\n  return (\n    <>\n      <Rule />\n      <ThemedText.Caption>\n        <ToolbarRow justify=\"flex-start\" gap={0.5} iconSize={4 / 3}>\n          {caption}\n        </ToolbarRow>\n      </ThemedText.Caption>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { ALL_SUPPORTED_CHAIN_IDS } from 'constants/chains'\nimport { useAtom } from 'jotai'\nimport { SwapInfoUpdater } from 'lib/hooks/swap/useSwapInfo'\nimport useSyncConvenienceFee from 'lib/hooks/swap/useSyncConvenienceFee'\nimport useSyncSwapDefaults from 'lib/hooks/swap/useSyncSwapDefaults'\nimport { usePendingTransactions } from 'lib/hooks/transactions'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport useTokenList from 'lib/hooks/useTokenList'\nimport { displayTxHashAtom } from 'lib/state/swap'\nimport { SwapTransactionInfo, Transaction, TransactionType } from 'lib/state/transactions'\nimport { useMemo, useState } from 'react'\n\nimport Dialog from '../Dialog'\nimport Header from '../Header'\nimport { BoundaryProvider } from '../Popover'\nimport Wallet from '../Wallet'\nimport Input from './Input'\nimport Output from './Output'\nimport ReverseButton from './ReverseButton'\nimport Settings from './Settings'\nimport { StatusDialog } from './Status'\nimport SwapButton from './SwapButton'\nimport SwapPropValidator from './SwapPropValidator'\nimport Toolbar from './Toolbar'\n\nexport type DefaultAddress = string | { [chainId: number]: string | 'NATIVE' } | 'NATIVE'\n\nfunction getSwapTx(txs: { [hash: string]: Transaction }, hash?: string): Transaction<SwapTransactionInfo> | undefined {\n  if (hash) {\n    const tx = txs[hash]\n    if (tx?.info?.type === TransactionType.SWAP) {\n      return tx as Transaction<SwapTransactionInfo>\n    }\n  }\n  return\n}\n\nexport interface SwapProps {\n  tokenList?: string | TokenInfo[]\n  defaultInputAddress?: DefaultAddress\n  defaultInputAmount?: string\n  defaultOutputAddress?: DefaultAddress\n  defaultOutputAmount?: string\n  convenienceFee?: number\n  convenienceFeeRecipient?: string | { [chainId: number]: string }\n  onConnectWallet?: () => void\n}\n\nexport default function Swap(props: SwapProps) {\n  const list = useTokenList(props.tokenList)\n  useSyncSwapDefaults(props)\n  useSyncConvenienceFee(props)\n\n  const { active, account, chainId } = useActiveWeb3React()\n  const [boundary, setBoundary] = useState<HTMLDivElement | null>(null)\n\n  const [displayTxHash, setDisplayTxHash] = useAtom(displayTxHashAtom)\n  const pendingTxs = usePendingTransactions()\n  const displayTx = getSwapTx(pendingTxs, displayTxHash)\n\n  const onSupportedChain = useMemo(\n    () => chainId && ALL_SUPPORTED_CHAIN_IDS.includes(chainId) && list.some((token) => token.chainId === chainId),\n    [chainId, list]\n  )\n\n  return (\n    <SwapPropValidator {...props}>\n      {onSupportedChain && <SwapInfoUpdater />}\n      <Header title={<Trans>Swap</Trans>}>\n        {active && <Wallet disabled={!account} onClick={props.onConnectWallet} />}\n        <Settings disabled={!active} />\n      </Header>\n      <div ref={setBoundary}>\n        <BoundaryProvider value={boundary}>\n          <Input disabled={!active} />\n          <ReverseButton disabled={!active} />\n          <Output disabled={!active}>\n            <Toolbar disabled={!active} />\n            <SwapButton disabled={!account} />\n          </Output>\n        </BoundaryProvider>\n      </div>\n      {displayTx && (\n        <Dialog color=\"dialog\">\n          <StatusDialog tx={displayTx} onClose={() => setDisplayTxHash()} />\n        </Dialog>\n      )}\n    </SwapPropValidator>\n  )\n}\n","import JSBI from 'jsbi'\nimport styled, { css } from 'lib/theme'\nimport { forwardRef, HTMLProps, useCallback, useEffect, useState } from 'react'\n\nconst Input = styled.input`\n  -webkit-appearance: textfield;\n  background-color: transparent;\n  border: none;\n  color: currentColor;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  line-height: inherit;\n  margin: 0;\n  outline: none;\n  overflow: hidden;\n  padding: 0;\n  text-align: left;\n  text-overflow: ellipsis;\n  width: 100%;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.secondary};\n  }\n`\n\nexport default Input\n\ninterface StringInputProps extends Omit<HTMLProps<HTMLInputElement>, 'onChange' | 'as' | 'value'> {\n  value: string\n  onChange: (input: string) => void\n}\n\nexport const StringInput = forwardRef<HTMLInputElement, StringInputProps>(function StringInput(\n  { value, onChange, ...props }: StringInputProps,\n  ref\n) {\n  return (\n    <Input\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      // universal input options\n      inputMode=\"text\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      placeholder={props.placeholder || '-'}\n      minLength={1}\n      spellCheck=\"false\"\n      ref={ref as any}\n      {...props}\n    />\n  )\n})\n\ninterface NumericInputProps extends Omit<HTMLProps<HTMLInputElement>, 'onChange' | 'as' | 'value'> {\n  value: string\n  onChange: (input: string) => void\n}\n\ninterface EnforcedNumericInputProps extends NumericInputProps {\n  // Validates nextUserInput; returns stringified value, or null if invalid\n  enforcer: (nextUserInput: string) => string | null\n}\n\nfunction isNumericallyEqual(a: string, b: string) {\n  const [aInteger, aDecimal] = a.split('.')\n  const [bInteger, bDecimal] = b.split('.')\n  return (\n    JSBI.equal(JSBI.BigInt(aInteger ?? 0), JSBI.BigInt(bInteger ?? 0)) &&\n    JSBI.equal(JSBI.BigInt(aDecimal ?? 0), JSBI.BigInt(bDecimal ?? 0))\n  )\n}\n\nconst NumericInput = forwardRef<HTMLInputElement, EnforcedNumericInputProps>(function NumericInput(\n  { value, onChange, enforcer, pattern, ...props }: EnforcedNumericInputProps,\n  ref\n) {\n  const [state, setState] = useState(value ?? '')\n  useEffect(() => {\n    if (!isNumericallyEqual(state, value)) {\n      setState(value ?? '')\n    }\n  }, [value, state, setState])\n\n  const validateChange = useCallback(\n    (event) => {\n      const nextInput = enforcer(event.target.value.replace(/,/g, '.'))\n      if (nextInput !== null) {\n        setState(nextInput ?? '')\n        if (!isNumericallyEqual(nextInput, value)) {\n          onChange(nextInput)\n        }\n      }\n    },\n    [value, onChange, enforcer]\n  )\n\n  return (\n    <Input\n      value={state}\n      onChange={validateChange}\n      // universal input options\n      inputMode=\"decimal\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern={pattern}\n      placeholder={props.placeholder || '0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n      ref={ref as any}\n      {...props}\n    />\n  )\n})\n\nconst integerRegexp = /^\\d*$/\nconst integerEnforcer = (nextUserInput: string) => {\n  if (nextUserInput === '' || integerRegexp.test(nextUserInput)) {\n    const nextInput = parseInt(nextUserInput)\n    return isNaN(nextInput) ? '' : nextInput.toString()\n  }\n  return null\n}\nexport const IntegerInput = forwardRef(function IntegerInput(props: NumericInputProps, ref) {\n  return <NumericInput pattern=\"^[0-9]*$\" enforcer={integerEnforcer} ref={ref as any} {...props} />\n})\n\nconst decimalRegexp = /^\\d*(?:[.])?\\d*$/\nconst decimalEnforcer = (nextUserInput: string) => {\n  if (nextUserInput === '') {\n    return ''\n  } else if (nextUserInput === '.') {\n    return '0.'\n  } else if (decimalRegexp.test(nextUserInput)) {\n    return nextUserInput\n  }\n  return null\n}\nexport const DecimalInput = forwardRef(function DecimalInput(props: NumericInputProps, ref) {\n  return <NumericInput pattern=\"^[0-9]*[.,]?[0-9]*$\" enforcer={decimalEnforcer} ref={ref as any} {...props} />\n})\n\nexport const inputCss = css`\n  background-color: ${({ theme }) => theme.container};\n  border: 1px solid ${({ theme }) => theme.container};\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  cursor: text;\n  padding: calc(0.5em - 1px);\n\n  :hover:not(:focus-within) {\n    background-color: ${({ theme }) => theme.onHover(theme.container)};\n    border-color: ${({ theme }) => theme.onHover(theme.container)};\n  }\n\n  :focus-within {\n    border-color: ${({ theme }) => theme.active};\n  }\n`\n","import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { atom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { useCurrencyBalances } from 'lib/hooks/useCurrencyBalance'\nimport { feeOptionsAtom, Field, swapAtom } from 'lib/state/swap'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useEffect, useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { isAddress } from '../../../utils'\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport useAllowedSlippage from '../useAllowedSlippage'\nimport { useBestTrade } from './useBestTrade'\n\ninterface SwapInfo {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  currencyAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  trade: {\n    trade?: InterfaceTrade<Currency, Currency, TradeType>\n    state: TradeState\n  }\n  allowedSlippage: Percent\n  feeOptions: FeeOptions | undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: { [address: string]: true } = {\n  '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10': true, // v2 factory\n  '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106': true, // v2 router 01\n  '0x60aE616a2155Ee3d9A68541Ba4544862310933d4': true, // v2 router 02\n}\n\n// from the current swap inputs, compute the best trade and return it.\nfunction useComputeSwapInfo(): SwapInfo {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    amount,\n    [Field.INPUT]: inputCurrency,\n    [Field.OUTPUT]: outputCurrency,\n  } = useAtomValue(swapAtom)\n\n  const feeOptions = useAtomValue(feeOptionsAtom)\n\n  const to = account\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency])\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = useMemo(\n    () => tryParseCurrencyAmount(amount, (isExactIn ? inputCurrency : outputCurrency) ?? undefined),\n    [inputCurrency, isExactIn, outputCurrency, amount]\n  )\n\n  //@TODO(ianlapham): this would eventually be replaced with routing api logic.\n  const trade = useBestTrade(\n    isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    parsedAmount,\n    (isExactIn ? outputCurrency : inputCurrency) ?? undefined\n  )\n\n  const currencies = useMemo(\n    () => ({\n      [Field.INPUT]: inputCurrency ?? undefined,\n      [Field.OUTPUT]: outputCurrency ?? undefined,\n    }),\n    [inputCurrency, outputCurrency]\n  )\n\n  const currencyBalances = useMemo(\n    () => ({\n      [Field.INPUT]: relevantTokenBalances[0],\n      [Field.OUTPUT]: relevantTokenBalances[1],\n    }),\n    [relevantTokenBalances]\n  )\n\n  const currencyAmounts = useMemo(\n    () => ({\n      [Field.INPUT]: trade.trade?.inputAmount,\n      [Field.OUTPUT]: trade.trade?.outputAmount,\n    }),\n    [trade.trade?.inputAmount, trade.trade?.outputAmount]\n  )\n\n  const allowedSlippage = useAllowedSlippage(trade.trade)\n\n  const inputError = useMemo(() => {\n    let inputError: ReactNode | undefined\n\n    if (!account) {\n      inputError = <Trans>Connect Wallet</Trans>\n    }\n\n    if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n      inputError = inputError ?? <Trans>Select token</Trans>\n    }\n\n    if (!parsedAmount) {\n      inputError = inputError ?? <Trans>Enter an amount</Trans>\n    }\n\n    const formattedTo = isAddress(to)\n    if (!to || !formattedTo) {\n      inputError = inputError ?? <Trans>Enter a recipient</Trans>\n    } else {\n      if (BAD_RECIPIENT_ADDRESSES[formattedTo]) {\n        inputError = inputError ?? <Trans>Invalid recipient</Trans>\n      }\n    }\n\n    // compare input balance to max input based on version\n    const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], trade.trade?.maximumAmountIn(allowedSlippage)]\n\n    if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n      inputError = <Trans>Insufficient {amountIn.currency.symbol} balance</Trans>\n    }\n\n    return inputError\n  }, [account, allowedSlippage, currencies, currencyBalances, parsedAmount, to, trade.trade])\n\n  return useMemo(\n    () => ({\n      currencies,\n      currencyBalances,\n      currencyAmounts,\n      inputError,\n      trade,\n      allowedSlippage,\n      feeOptions,\n    }),\n    [currencies, currencyBalances, currencyAmounts, inputError, trade, allowedSlippage, feeOptions]\n  )\n}\n\nconst swapInfoAtom = atom<SwapInfo>({\n  currencies: {},\n  currencyBalances: {},\n  currencyAmounts: {},\n  trade: { state: TradeState.INVALID },\n  allowedSlippage: new Percent(0),\n  feeOptions: undefined,\n})\n\nexport function SwapInfoUpdater() {\n  const setSwapInfo = useUpdateAtom(swapInfoAtom)\n  const swapInfo = useComputeSwapInfo()\n  useEffect(() => {\n    setSwapInfo(swapInfo)\n  }, [swapInfo, setSwapInfo])\n  return null\n}\n\n/** Requires that SwapInfoUpdater be installed in the DOM tree. **/\nexport default function useSwapInfo(): SwapInfo {\n  return useAtomValue(swapInfoAtom)\n}\n","import { detectOverflow } from '@popperjs/core';\n\nvar maxSize = {\n  name: 'maxSize',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['offset', 'preventOverflow', 'flip'],\n  fn: function fn(_ref) {\n    var state = _ref.state,\n        name = _ref.name,\n        options = _ref.options;\n    var overflow = detectOverflow(state, options);\n\n    var _ref2 = state.modifiersData.preventOverflow || {\n      x: 0,\n      y: 0\n    },\n        x = _ref2.x,\n        y = _ref2.y;\n\n    var _state$rects$popper = state.rects.popper,\n        width = _state$rects$popper.width,\n        height = _state$rects$popper.height;\n\n    var _state$placement$spli = state.placement.split('-'),\n        basePlacement = _state$placement$spli[0];\n\n    var widthProp = basePlacement === 'left' ? 'left' : 'right';\n    var heightProp = basePlacement === 'top' ? 'top' : 'bottom';\n    state.modifiersData[name] = {\n      width: width - overflow[widthProp] - x,\n      height: height - overflow[heightProp] - y\n    };\n  }\n};\n\nexport default maxSize;\n","import { Options, Placement } from '@popperjs/core'\nimport styled, { Layer } from 'lib/theme'\nimport maxSize from 'popper-max-size-modifier'\nimport React, { createContext, useContext, useMemo, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport { usePopper } from 'react-popper'\n\nconst BoundaryContext = createContext<HTMLDivElement | null>(null)\n\nexport const BoundaryProvider = BoundaryContext.Provider\n\nconst PopoverContainer = styled.div<{ show: boolean }>`\n  background-color: ${({ theme }) => theme.dialog};\n  border: 1px solid ${({ theme }) => theme.outline};\n  border-radius: 0.5em;\n  opacity: ${(props) => (props.show ? 1 : 0)};\n  padding: 8px;\n  transition: visibility 0.25s linear, opacity 0.25s linear;\n  visibility: ${(props) => (props.show ? 'visible' : 'hidden')};\n  z-index: ${Layer.TOOLTIP};\n`\n\nconst Reference = styled.div`\n  display: inline-block;\n`\n\nconst Arrow = styled.div`\n  height: 8px;\n  width: 8px;\n  z-index: ${Layer.TOOLTIP};\n\n  ::before {\n    background: ${({ theme }) => theme.dialog};\n    border: 1px solid ${({ theme }) => theme.outline};\n    content: '';\n    height: 8px;\n    position: absolute;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &.arrow-top {\n    bottom: -4px;\n    ::before {\n      border-radius: 1px;\n      border-left: none;\n      border-top: none;\n    }\n  }\n\n  &.arrow-bottom {\n    top: -5px; // includes -1px from border\n    ::before {\n      border-bottom: none;\n      border-right: none;\n      border-radius: 1px;\n    }\n  }\n\n  &.arrow-left {\n    right: -4px;\n    ::before {\n      border-bottom: none;\n      border-left: none;\n      border-radius: 1px;\n    }\n  }\n\n  &.arrow-right {\n    left: -5px; // includes -1px from border\n    ::before {\n      border-radius: 1px;\n      border-right: none;\n      border-top: none;\n    }\n  }\n`\n\nexport interface PopoverProps {\n  content: React.ReactNode\n  show: boolean\n  children: React.ReactNode\n  placement: Placement\n  offset?: number\n  contained?: true\n}\n\nexport default function Popover({ content, show, children, placement, offset, contained }: PopoverProps) {\n  const boundary = useContext(BoundaryContext)\n  const reference = useRef<HTMLDivElement>(null)\n\n  // Use callback refs to be notified when instantiated\n  const [popover, setPopover] = useState<HTMLDivElement | null>(null)\n  const [arrow, setArrow] = useState<HTMLDivElement | null>(null)\n\n  const options = useMemo((): Options => {\n    const modifiers: Options['modifiers'] = [\n      { name: 'offset', options: { offset: [4, offset || 4] } },\n      { name: 'arrow', options: { element: arrow, padding: 4 } },\n    ]\n    if (contained) {\n      modifiers.push(\n        { name: 'preventOverflow', options: { boundary, padding: 8 } },\n        { name: 'flip', options: { boundary, padding: 8 } },\n        { ...maxSize, options: { boundary, padding: 8 } },\n        {\n          name: 'applyMaxSize',\n          enabled: true,\n          phase: 'beforeWrite',\n          requires: ['maxSize'],\n          fn({ state }) {\n            const { width } = state.modifiersData.maxSize\n            state.styles.popper = {\n              ...state.styles.popper,\n              maxWidth: `${width}px`,\n            }\n          },\n        }\n      )\n    }\n    return {\n      placement,\n      strategy: 'absolute',\n      modifiers,\n    }\n  }, [offset, arrow, contained, placement, boundary])\n\n  const { styles, attributes } = usePopper(reference.current, popover, options)\n\n  return (\n    <>\n      <Reference ref={reference}>{children}</Reference>\n      {boundary &&\n        createPortal(\n          <PopoverContainer show={show} ref={setPopover} style={styles.popper} {...attributes.popper}>\n            {content}\n            <Arrow\n              className={`arrow-${attributes.popper?.['data-popper-placement'] ?? ''}`}\n              ref={setArrow}\n              style={styles.arrow}\n              {...attributes.arrow}\n            />\n          </PopoverContainer>,\n          boundary\n        )}\n    </>\n  )\n}\n","import { Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useUSDCPrice'\nimport { useEffect, useMemo, useState } from 'react'\nimport { GetQuoteResult, InterfaceTrade, TradeState } from 'state/routing/types'\nimport { computeRoutes, transformRoutesToTrade } from 'state/routing/utils'\n\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport { getClientSideQuote } from './clientSideSmartOrderRouter'\nimport { useRoutingAPIArguments } from './useRoutingAPIArguments'\n\nconst protocols: Protocol[] = [Protocol.V2, Protocol.V3]\nconst config = { protocols }\n\nexport default function useClientSideSmartOrderRouterTrade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined\n} {\n  const chainId = amountSpecified?.currency.chainId\n  const { library } = useActiveWeb3React()\n\n  const [currencyIn, currencyOut]: [Currency | undefined, Currency | undefined] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [amountSpecified, otherCurrency, tradeType]\n  )\n\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n    useClientSideRouter: true,\n  })\n  const params = useMemo(() => chainId && library && { chainId, provider: library }, [chainId, library])\n\n  const [loading, setLoading] = useState(false)\n  const [{ quoteResult, error }, setFetchedResult] = useState<{\n    quoteResult: GetQuoteResult | undefined\n    error: unknown\n  }>({\n    quoteResult: undefined,\n    error: undefined,\n  })\n\n  // When arguments update, make a new call to SOR for updated quote\n  useEffect(() => {\n    setLoading(true)\n    fetchQuote()\n\n    async function fetchQuote() {\n      try {\n        if (queryArgs && params) {\n          const result = await getClientSideQuote(queryArgs, params, config)\n          setFetchedResult({\n            quoteResult: result.data,\n            error: result.error,\n          })\n        }\n      } catch (e) {\n        setFetchedResult({\n          quoteResult: undefined,\n          error: true,\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n  }, [queryArgs, params])\n\n  const route = useMemo(\n    () => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult),\n    [currencyIn, currencyOut, quoteResult, tradeType]\n  )\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = useStablecoinAmountFromFiatValue(quoteResult?.gasUseEstimateUSD) ?? null\n\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (loading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    let otherAmount = undefined\n    if (tradeType === TradeType.EXACT_INPUT && currencyOut && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote)\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT && currencyIn && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote)\n    }\n\n    if (error || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, gasUseEstimateUSD)\n      return {\n        // always return VALID regardless of isFetching status\n        state: TradeState.VALID,\n        trade,\n      }\n    } catch (e) {\n      console.debug('transformRoutesToTrade failed: ', e)\n      return { state: TradeState.INVALID, trade: undefined }\n    }\n  }, [currencyIn, currencyOut, loading, quoteResult, tradeType, error, route, queryArgs, gasUseEstimateUSD])\n}\n","import { Placement } from '@popperjs/core'\nimport { HelpCircle, Icon } from 'lib/icons'\nimport styled from 'lib/theme'\nimport { ComponentProps, ReactNode, useCallback, useState } from 'react'\n\nimport { IconButton } from './Button'\nimport Popover from './Popover'\n\nexport interface TooltipHandlers {\n  onMouseEnter: () => void\n  onMouseLeave: () => void\n  onFocus: () => void\n  onBlur: () => void\n}\n\nexport function useTooltip(): [boolean, (show: boolean) => void, TooltipHandlers] {\n  const [show, setShow] = useState(false)\n  const enable = useCallback(() => setShow(true), [])\n  const disable = useCallback(() => setShow(false), [])\n  return [show, setShow, { onMouseEnter: enable, onMouseLeave: disable, onFocus: enable, onBlur: disable }]\n}\n\nconst IconTooltip = styled(IconButton)`\n  cursor: help;\n`\n\ninterface TooltipProps {\n  icon?: Icon\n  iconProps?: ComponentProps<Icon>\n  children: ReactNode\n  placement?: Placement\n  offset?: number\n  contained?: true\n}\n\nexport default function Tooltip({\n  icon: Icon = HelpCircle,\n  iconProps,\n  children,\n  placement = 'auto',\n  offset,\n  contained,\n}: TooltipProps) {\n  const [showTooltip, , tooltipProps] = useTooltip()\n  return (\n    <Popover content={children} show={showTooltip} placement={placement} offset={offset} contained={contained}>\n      <IconTooltip icon={Icon} iconProps={iconProps} {...tooltipProps} />\n    </Popover>\n  )\n}\n","import { TransactionReceipt, TransactionResponse } from '@ethersproject/abstract-provider'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { atomWithImmer } from 'jotai/immer'\n\nexport enum TransactionType {\n  APPROVAL,\n  SWAP,\n}\n\ninterface BaseTransactionInfo {\n  type: TransactionType\n  response: TransactionResponse\n}\n\nexport interface ApprovalTransactionInfo extends BaseTransactionInfo {\n  type: TransactionType.APPROVAL\n  tokenAddress: string\n  spenderAddress: string\n}\n\nexport interface SwapTransactionInfo extends BaseTransactionInfo {\n  type: TransactionType.SWAP\n  tradeType: TradeType\n  inputCurrencyAmount: CurrencyAmount<Currency>\n  outputCurrencyAmount: CurrencyAmount<Currency>\n}\n\nexport interface InputSwapTransactionInfo extends SwapTransactionInfo {\n  tradeType: TradeType.EXACT_INPUT\n  expectedOutputCurrencyAmount: string\n  minimumOutputCurrencyAmount: string\n}\n\nexport interface OutputSwapTransactionInfo extends SwapTransactionInfo {\n  tradeType: TradeType.EXACT_OUTPUT\n  expectedInputCurrencyAmount: string\n  maximumInputCurrencyAmount: string\n}\n\nexport type TransactionInfo = ApprovalTransactionInfo | SwapTransactionInfo\n\nexport interface Transaction<T extends TransactionInfo = TransactionInfo> {\n  addedTime: number\n  lastCheckedBlockNumber?: number\n  receipt?: TransactionReceipt\n  info: T\n}\n\nexport const transactionsAtom = atomWithImmer<{\n  [chainId: string]: { [hash: string]: Transaction }\n}>({})\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useAtomValue } from 'jotai/utils'\nimport { autoSlippageAtom, maxSlippageAtom } from 'lib/state/settings'\nimport { InterfaceTrade } from 'state/routing/types'\n\nexport function toPercent(maxSlippage: number | undefined): Percent | undefined {\n  if (!maxSlippage) return undefined\n  const numerator = Math.floor(maxSlippage * 100)\n  return new Percent(numerator, 10_000)\n}\n\n/** Returns the user-inputted max slippage. */\nexport default function useMaxSlippage(trade: InterfaceTrade<Currency, Currency, TradeType> | undefined): Percent {\n  const autoSlippage = useAutoSlippageTolerance(trade)\n  const maxSlippage = toPercent(useAtomValue(maxSlippageAtom))\n  return useAtomValue(autoSlippageAtom) ? autoSlippage : maxSlippage ?? autoSlippage\n}\n","import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useClientSideV3Trade } from 'hooks/useClientSideV3Trade'\nimport useDebounce from 'hooks/useDebounce'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport useClientSideSmartOrderRouterTrade from '../routing/useClientSideSmartOrderRouterTrade'\n\n/**\n * Returns the currency amount from independent field, currency from independent field,\n * and currency from dependent field.\n */\nfunction getTradeInputs(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  tradeType: TradeType\n): [CurrencyAmount<Currency> | undefined, Currency | undefined, Currency | undefined] {\n  if (trade) {\n    if (tradeType === TradeType.EXACT_INPUT) {\n      return [trade.inputAmount, trade.inputAmount.currency, trade.outputAmount.currency]\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT) {\n      return [trade.outputAmount, trade.outputAmount.currency, trade.inputAmount.currency]\n    }\n  }\n  return [undefined, undefined, undefined]\n}\n\ninterface TradeDebouncingParams {\n  amounts: [CurrencyAmount<Currency> | undefined, CurrencyAmount<Currency> | undefined]\n  indepdenentCurrencies: [Currency | undefined, Currency | undefined]\n  dependentCurrencies: [Currency | undefined, Currency | undefined]\n}\n\n/**\n * Returns wether debounced values are stale compared to latest values from trade.\n */\nfunction isTradeDebouncing({ amounts, indepdenentCurrencies, dependentCurrencies }: TradeDebouncingParams): boolean {\n  // Ensure that amount from user input matches latest trade.\n  const amountsMatch = amounts[0] && amounts[1]?.equalTo(amounts[0])\n\n  // Ensure active swap currencies match latest trade.\n  const currenciesMatch =\n    indepdenentCurrencies[0] &&\n    indepdenentCurrencies[1]?.equals(indepdenentCurrencies[0]) &&\n    dependentCurrencies[0] &&\n    dependentCurrencies[1]?.equals(dependentCurrencies[0])\n\n  return !amountsMatch || !currenciesMatch\n}\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(\n  tradeType: TradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n} {\n  // Debounce is used to prevent excessive requests to SOR, as it is data intensive.\n  // This helps provide a \"syncing\" state the UI can reference for loading animations.\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce(\n    useMemo(() => [amountSpecified, otherCurrency], [amountSpecified, otherCurrency]),\n    200\n  )\n\n  const clientSORTrade = useClientSideSmartOrderRouterTrade(tradeType, debouncedAmount, debouncedOtherCurrency)\n\n  const [amountFromLatestTrade, currencyFromTrade, otherCurrencyFromTrade] = getTradeInputs(\n    clientSORTrade.trade,\n    tradeType\n  )\n\n  const debouncing =\n    (amountSpecified && debouncedAmount && amountSpecified !== debouncedAmount) ||\n    (amountSpecified && debouncedOtherCurrency && otherCurrency && debouncedOtherCurrency !== otherCurrency)\n\n  const syncing =\n    amountSpecified &&\n    isTradeDebouncing({\n      amounts: [amountFromLatestTrade, amountSpecified],\n      indepdenentCurrencies: [currencyFromTrade, amountSpecified?.currency],\n      dependentCurrencies: [otherCurrencyFromTrade, debouncedOtherCurrency],\n    })\n\n  const useFallback = !syncing && clientSORTrade.state === TradeState.NO_ROUTE_FOUND\n\n  // Use a simple client side logic as backup if SOR is not available.\n  const fallbackTrade = useClientSideV3Trade(\n    tradeType,\n    useFallback ? debouncedAmount : undefined,\n    useFallback ? debouncedOtherCurrency : undefined\n  )\n\n  return useMemo(\n    () => ({\n      ...(useFallback ? fallbackTrade : clientSORTrade),\n      ...(syncing ? { state: TradeState.SYNCING } : {}),\n      ...(debouncing ? { state: TradeState.LOADING } : {}),\n    }),\n    [debouncing, fallbackTrade, syncing, clientSORTrade, useFallback]\n  )\n}\n","import styled, { css, ThemedText } from 'lib/theme'\nimport { ReactNode } from 'react'\n// eslint-disable-next-line no-restricted-imports\nimport { AnyStyledComponent } from 'styled-components'\n\nimport Row from '../../Row'\nimport Tooltip from '../../Tooltip'\n\nexport const optionCss = (selected: boolean) => css`\n  border: 1px solid ${({ theme }) => (selected ? theme.active : theme.outline)};\n  border-radius: ${({ theme }) => theme.borderRadius * 0.2}em;\n  color: ${({ theme }) => theme.primary} !important;\n  display: grid;\n  grid-gap: 0.25em;\n  padding: calc(0.75em - 1px) 0.625em;\n\n  :enabled:hover {\n    border-color: ${({ theme }) => theme.onHover(selected ? theme.active : theme.outline)};\n  }\n\n  :enabled:focus-within {\n    border-color: ${({ theme }) => theme.active};\n  }\n`\n\nexport function value(Value: AnyStyledComponent) {\n  return styled(Value)<{ selected?: boolean; cursor?: string }>`\n    cursor: ${({ cursor }) => cursor ?? 'pointer'};\n  `\n}\n\ninterface LabelProps {\n  name: ReactNode\n  tooltip?: ReactNode\n}\n\nexport function Label({ name, tooltip }: LabelProps) {\n  return (\n    <Row gap={0.5} justify=\"flex-start\">\n      <ThemedText.Subhead2>{name}</ThemedText.Subhead2>\n      {tooltip && (\n        <Tooltip placement=\"top\" contained>\n          <ThemedText.Caption>{tooltip}</ThemedText.Caption>\n        </Tooltip>\n      )}\n    </Row>\n  )\n}\n","import { css } from 'lib/theme'\n\n// need to use $loading as `loading` is a reserved prop\nexport const loadingOpacityCss = css<{ $loading: boolean }>`\n  filter: ${({ $loading }) => ($loading ? 'grayscale(1)' : 'none')};\n  opacity: ${({ $loading }) => ($loading ? '0.4' : '1')};\n  transition: opacity 0.2s ease-in-out;\n`\n","import { Trans } from '@lingui/macro'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport { AlertTriangle, Expando, Icon, Info, LargeIcon } from 'lib/icons'\nimport styled, { Color, ThemedText } from 'lib/theme'\nimport { ReactNode, useState } from 'react'\n\nimport ActionButton from '../ActionButton'\nimport { IconButton } from '../Button'\nimport Column from '../Column'\nimport Row from '../Row'\nimport Rule from '../Rule'\n\nconst HeaderIcon = styled(LargeIcon)`\n  flex-grow: 1;\n\n  svg {\n    transition: height 0.25s, width 0.25s;\n  }\n`\n\ninterface StatusHeaderProps {\n  icon: Icon\n  iconColor?: Color\n  iconSize?: number\n  children: ReactNode\n}\n\nexport function StatusHeader({ icon: Icon, iconColor, iconSize = 4, children }: StatusHeaderProps) {\n  return (\n    <>\n      <Column flex style={{ flexGrow: 1 }}>\n        <HeaderIcon icon={Icon} color={iconColor} size={iconSize} />\n        <Column gap={0.75} flex style={{ textAlign: 'center' }}>\n          {children}\n        </Column>\n      </Column>\n      <Rule />\n    </>\n  )\n}\n\nconst ErrorHeader = styled(Column)<{ open: boolean }>`\n  transition: gap 0.25s;\n\n  div:last-child {\n    max-height: ${({ open }) => (open ? 0 : 60 / 14)}em; // 3 * line-height\n    overflow-y: hidden;\n    transition: max-height 0.25s;\n  }\n`\nconst ErrorColumn = styled(Column)``\nconst ExpandoColumn = styled(Column)<{ open: boolean }>`\n  flex-grow: ${({ open }) => (open ? 2 : 0)};\n  transition: flex-grow 0.25s, gap 0.25s;\n\n  ${Rule} {\n    margin-bottom: ${({ open }) => (open ? 0 : 0.75)}em;\n    transition: margin-bottom 0.25s;\n  }\n\n  ${ErrorColumn} {\n    flex-basis: 0;\n    flex-grow: ${({ open }) => (open ? 1 : 0)};\n    overflow-y: hidden;\n    position: relative;\n    transition: flex-grow 0.25s;\n\n    ${Column} {\n      height: 100%;\n      padding: ${({ open }) => (open ? '0.5em 0' : 0)};\n      transition: padding 0.25s;\n\n      :after {\n        background: linear-gradient(#ffffff00, ${({ theme }) => theme.dialog});\n        bottom: 0;\n        content: '';\n        height: 0.75em;\n        pointer-events: none;\n        position: absolute;\n        width: calc(100% - 1em);\n      }\n    }\n  }\n`\n\ninterface ErrorDialogProps {\n  header?: ReactNode\n  error: Error\n  action: ReactNode\n  onAction: () => void\n}\n\nexport default function ErrorDialog({ header, error, action, onAction }: ErrorDialogProps) {\n  const [open, setOpen] = useState(false)\n  const [details, setDetails] = useState<HTMLDivElement | null>(null)\n  const scrollbar = useScrollbar(details)\n  return (\n    <Column flex padded gap={0.75} align=\"stretch\" style={{ height: '100%' }}>\n      <StatusHeader icon={AlertTriangle} iconColor=\"error\" iconSize={open ? 3 : 4}>\n        <ErrorHeader gap={open ? 0 : 0.75} open={open}>\n          <ThemedText.Subhead1>\n            <Trans>Something went wrong.</Trans>\n          </ThemedText.Subhead1>\n          <ThemedText.Body2>{header}</ThemedText.Body2>\n        </ErrorHeader>\n      </StatusHeader>\n      <Row>\n        <Row gap={0.5}>\n          <Info color=\"secondary\" />\n          <ThemedText.Subhead2 color=\"secondary\">\n            <Trans>Error details</Trans>\n          </ThemedText.Subhead2>\n        </Row>\n        <IconButton color=\"secondary\" onClick={() => setOpen(!open)} icon={Expando} iconProps={{ open }} />\n      </Row>\n      <ExpandoColumn flex align=\"stretch\" open={open}>\n        <Rule />\n        <ErrorColumn>\n          <Column gap={0.5} ref={setDetails} css={scrollbar}>\n            <ThemedText.Code>\n              {error.name}\n              {error.message ? `: ${error.message}` : ''}\n            </ThemedText.Code>\n          </Column>\n        </ErrorColumn>\n        <ActionButton onClick={onAction}>{action}</ActionButton>\n      </ExpandoColumn>\n    </Column>\n  )\n}\n","export class IntegrationError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'Integration Error'\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport { DEFAULT_DEADLINE_FROM_NOW, L2_DEADLINE_FROM_NOW } from 'constants/misc'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport { useAtom } from 'jotai'\nimport { transactionTtlAtom } from 'lib/state/settings'\nimport { useMemo } from 'react'\n\nimport useActiveWeb3React from './useActiveWeb3React'\n\n/** Returns the default transaction TTL for the chain, in minutes. */\nexport function useDefaultTransactionTtl(): number {\n  const { chainId } = useActiveWeb3React()\n  if (chainId && L2_CHAIN_IDS.includes(chainId)) return L2_DEADLINE_FROM_NOW / 60\n  return DEFAULT_DEADLINE_FROM_NOW / 60\n}\n\n/** Returns the user-inputted transaction TTL, in minutes. */\nexport function useTransactionTtl(): [number | undefined, (ttl?: number) => void] {\n  return useAtom(transactionTtlAtom)\n}\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const [ttl] = useTransactionTtl()\n  const defaultTtl = useDefaultTransactionTtl()\n\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (!blockTimestamp) return undefined\n    return blockTimestamp.add((ttl || defaultTtl) /* in seconds */ * 60)\n  }, [blockTimestamp, defaultTtl, ttl])\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport styled, { ThemedText } from 'lib/theme'\n\nimport Button from '../Button'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\n\nconst TokenButton = styled(Button)`\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  padding: 0.25em 0.75em 0.25em 0.25em;\n`\n\ninterface TokenBaseProps {\n  value: Currency\n  onClick: (value: Currency) => void\n}\n\nexport default function TokenBase({ value, onClick }: TokenBaseProps) {\n  return (\n    <TokenButton onClick={() => onClick(value)}>\n      <ThemedText.ButtonMedium>\n        <Row gap={0.5}>\n          <TokenImg token={value} size={1.5} />\n          {value.symbol}\n        </Row>\n      </ThemedText.ButtonMedium>\n    </TokenButton>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { ChevronDown } from 'lib/icons'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\n\nimport Button from '../Button'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\n\nconst StyledTokenButton = styled(Button)<{ empty?: boolean }>`\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  padding: 0.25em;\n  padding-left: ${({ empty }) => (empty ? 0.75 : 0.25)}em;\n\n  :disabled {\n    // prevents border from expanding the button's box size\n    padding: calc(0.25em - 1px);\n    padding-left: calc(${({ empty }) => (empty ? 0.75 : 0.25)}em - 1px);\n  }\n`\n\nconst TokenButtonRow = styled(Row)<{ collapsed: boolean }>`\n  height: 1.2em;\n  max-width: ${({ collapsed }) => (collapsed ? '1.2' : '8.2')}em;\n  overflow-x: hidden;\n  transition: max-width 0.25s linear;\n`\n\ninterface TokenButtonProps {\n  value?: Currency\n  collapsed: boolean\n  disabled?: boolean\n  onClick: () => void\n}\n\nexport default function TokenButton({ value, collapsed, disabled, onClick }: TokenButtonProps) {\n  const buttonBackgroundColor = useMemo(() => (value ? 'interactive' : 'accent'), [value])\n  const contentColor = useMemo(() => (value || disabled ? 'onInteractive' : 'onAccent'), [value, disabled])\n  return (\n    <StyledTokenButton onClick={onClick} empty={!value} color={buttonBackgroundColor} disabled={disabled}>\n      <ThemedText.ButtonLarge color={contentColor}>\n        <TokenButtonRow gap={0.4} collapsed={Boolean(value) && collapsed}>\n          {value ? (\n            <>\n              <TokenImg token={value} size={1.2} />\n              {value.symbol}\n            </>\n          ) : (\n            <Trans>Select a token</Trans>\n          )}\n          <ChevronDown color={contentColor} strokeWidth={3} />\n        </TokenButtonRow>\n      </ThemedText.ButtonLarge>\n    </StyledTokenButton>\n  )\n}\n","import { useLingui } from '@lingui/react'\nimport { Currency } from '@uniswap/sdk-core'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport useCurrencyBalance from 'lib/hooks/useCurrencyBalance'\nimport useNativeEvent from 'lib/hooks/useNativeEvent'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport styled, { ThemedText } from 'lib/theme'\nimport {\n  ComponentClass,\n  CSSProperties,\n  forwardRef,\n  KeyboardEvent,\n  memo,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { areEqual, FixedSizeList, FixedSizeListProps } from 'react-window'\nimport invariant from 'tiny-invariant'\nimport { currencyId } from 'utils/currencyId'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\n\nimport { BaseButton } from '../Button'\nimport Column from '../Column'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\n\nconst TokenButton = styled(BaseButton)`\n  border-radius: 0;\n  outline: none;\n  padding: 0.5em 0.75em;\n`\n\nconst ITEM_SIZE = 56\ntype ItemData = Currency[]\ninterface FixedSizeTokenList extends FixedSizeList<ItemData>, ComponentClass<FixedSizeListProps<ItemData>> {}\nconst TokenList = styled(FixedSizeList as unknown as FixedSizeTokenList)<{\n  hover: number\n  scrollbar?: ReturnType<typeof useScrollbar>\n}>`\n  ${TokenButton}[data-index='${({ hover }) => hover}'] {\n    background-color: ${({ theme }) => theme.onHover(theme.module)};\n  }\n\n  ${({ scrollbar }) => scrollbar}\n  overscroll-behavior: none; // prevent Firefox's bouncy overscroll effect (because it does not trigger the scroll handler)\n`\nconst OnHover = styled.div<{ hover: number }>`\n  background-color: ${({ theme }) => theme.onHover(theme.module)};\n  height: ${ITEM_SIZE}px;\n  left: 0;\n  position: absolute;\n  top: ${({ hover }) => hover * ITEM_SIZE}px;\n  width: 100%;\n`\n\ninterface TokenOptionProps {\n  index: number\n  value: Currency\n  style: CSSProperties\n}\n\ninterface BubbledEvent extends SyntheticEvent {\n  index?: number\n  token?: Currency\n  ref?: HTMLButtonElement\n}\n\nfunction TokenOption({ index, value, style }: TokenOptionProps) {\n  const { i18n } = useLingui()\n  const ref = useRef<HTMLButtonElement>(null)\n  // Annotate the event to be handled later instead of passing in handlers to avoid rerenders.\n  // This prevents token logos from reloading and flashing on the screen.\n  const onEvent = (e: BubbledEvent) => {\n    e.index = index\n    e.token = value\n    e.ref = ref.current ?? undefined\n  }\n\n  const { account } = useActiveWeb3React()\n  const balance = useCurrencyBalance(account, value)\n\n  return (\n    <TokenButton\n      data-index={index}\n      style={style}\n      onClick={onEvent}\n      onBlur={onEvent}\n      onFocus={onEvent}\n      onMouseMove={onEvent}\n      onKeyDown={onEvent}\n      ref={ref}\n    >\n      <ThemedText.Body1>\n        <Row>\n          <Row gap={0.5}>\n            <TokenImg token={value} size={1.5} />\n            <Column flex gap={0.125} align=\"flex-start\">\n              <ThemedText.Subhead1>{value.symbol}</ThemedText.Subhead1>\n              <ThemedText.Caption color=\"secondary\">{value.name}</ThemedText.Caption>\n            </Column>\n          </Row>\n          {balance?.greaterThan(0) && formatCurrencyAmount(balance, 2, i18n.locale)}\n        </Row>\n      </ThemedText.Body1>\n    </TokenButton>\n  )\n}\n\nconst itemKey = (index: number, tokens: ItemData) => currencyId(tokens[index])\nconst ItemRow = memo(function ItemRow({\n  data: tokens,\n  index,\n  style,\n}: {\n  data: ItemData\n  index: number\n  style: CSSProperties\n}) {\n  return <TokenOption index={index} value={tokens[index]} style={style} />\n},\nareEqual)\n\ninterface TokenOptionsHandle {\n  onKeyDown: (e: KeyboardEvent) => void\n  blur: () => void\n}\n\ninterface TokenOptionsProps {\n  tokens: Currency[]\n  onSelect: (token: Currency) => void\n}\n\nconst TokenOptions = forwardRef<TokenOptionsHandle, TokenOptionsProps>(function TokenOptions(\n  { tokens, onSelect }: TokenOptionsProps,\n  ref\n) {\n  const [focused, setFocused] = useState(false)\n  const [hover, setHover] = useState(-1)\n  useEffect(() => setHover(-1), [tokens])\n\n  const list = useRef<FixedSizeList>(null)\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n        if (e.key === 'ArrowDown' && hover < tokens.length - 1) {\n          scrollTo(hover + 1)\n        } else if (e.key === 'ArrowUp' && hover > 0) {\n          scrollTo(hover - 1)\n        } else if (e.key === 'ArrowUp' && hover === -1) {\n          scrollTo(tokens.length - 1)\n        }\n        e.preventDefault()\n      }\n      if (e.key === 'Enter' && hover) {\n        onSelect(tokens[hover])\n      }\n\n      function scrollTo(index: number) {\n        list.current?.scrollToItem(index)\n        setHover(index)\n      }\n    },\n    [hover, onSelect, tokens]\n  )\n  const blur = useCallback(() => setHover(-1), [])\n  useImperativeHandle(ref, () => ({ onKeyDown, blur }), [blur, onKeyDown])\n\n  const onClick = useCallback(({ token }: BubbledEvent) => token && onSelect(token), [onSelect])\n  const onFocus = useCallback(({ index }: BubbledEvent) => {\n    if (index !== undefined) {\n      setHover(index)\n      setFocused(true)\n    }\n  }, [])\n  const onBlur = useCallback(() => setFocused(false), [])\n  const onMouseMove = useCallback(\n    ({ index, ref }: BubbledEvent) => {\n      if (index !== undefined) {\n        setHover(index)\n        if (focused) {\n          ref?.focus()\n        }\n      }\n    },\n    [focused]\n  )\n\n  const [element, setElement] = useState<HTMLElement | null>(null)\n  const scrollbar = useScrollbar(element, { padded: true })\n\n  const onHover = useRef<HTMLDivElement>(null)\n  // use native onscroll handler to capture Safari's bouncy overscroll effect\n  useNativeEvent(element, 'scroll', (e) => {\n    invariant(element)\n    if (onHover.current) {\n      // must be set synchronously to avoid jank (avoiding useState)\n      onHover.current.style.marginTop = `${-element.scrollTop}px`\n    }\n  })\n\n  return (\n    <Column\n      align=\"unset\"\n      grow\n      onKeyDown={onKeyDown}\n      onClick={onClick}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onMouseMove={onMouseMove}\n      style={{ overflow: 'hidden' }}\n    >\n      {/* OnHover is a workaround to Safari's incorrect (overflow: overlay) implementation */}\n      <OnHover hover={hover} ref={onHover} />\n      <AutoSizer disableWidth>\n        {({ height }) => (\n          <TokenList\n            hover={hover}\n            height={height}\n            width=\"100%\"\n            itemCount={tokens.length}\n            itemData={tokens}\n            itemKey={itemKey}\n            itemSize={ITEM_SIZE}\n            className=\"scrollbar\"\n            ref={list}\n            outerRef={setElement}\n            scrollbar={scrollbar}\n          >\n            {ItemRow}\n          </TokenList>\n        )}\n      </AutoSizer>\n    </Column>\n  )\n})\n\nexport default TokenOptions\n","import { Currency } from '@uniswap/sdk-core'\nimport { useTheme } from 'lib/theme'\nimport Vibrant from 'node-vibrant/lib/bundle'\nimport { useEffect, useLayoutEffect, useState } from 'react'\n\nimport useCurrencyLogoURIs from './useCurrencyLogoURIs'\n\nconst colors = new Map<string, string | undefined>()\n\n/**\n * Extracts the prominent color from a token.\n * NB: If cached, this function returns synchronously; using a callback allows sync or async returns.\n */\nasync function getColorFromLogoURIs(logoURIs: string[], cb: (color: string | undefined) => void = () => void 0) {\n  const key = logoURIs[0]\n  let color = colors.get(key)\n\n  if (!color) {\n    for (const logoURI of logoURIs) {\n      let uri = logoURI\n      if (logoURI.startsWith('http')) {\n        // Color extraction must use a CORS-compatible resource, but the resource may already be cached.\n        // Adds a dummy parameter to force a different browser resource cache entry. Without this, color extraction prevents resource caching.\n        uri += '?color'\n      }\n\n      color = await getColorFromUriPath(uri)\n      if (color) break\n    }\n  }\n\n  colors.set(key, color)\n  return cb(color)\n}\n\nasync function getColorFromUriPath(uri: string): Promise<string | undefined> {\n  try {\n    const palette = await Vibrant.from(uri).getPalette()\n    return palette.Vibrant?.hex\n  } catch {}\n  return\n}\n\nexport function usePrefetchCurrencyColor(token?: Currency) {\n  const theme = useTheme()\n  const logoURIs = useCurrencyLogoURIs(token)\n\n  useEffect(() => {\n    if (theme.tokenColorExtraction && token) {\n      getColorFromLogoURIs(logoURIs)\n    }\n  }, [token, logoURIs, theme.tokenColorExtraction])\n}\n\nexport default function useCurrencyColor(token?: Currency) {\n  const [color, setColor] = useState<string | undefined>(undefined)\n  const theme = useTheme()\n  const logoURIs = useCurrencyLogoURIs(token)\n\n  useLayoutEffect(() => {\n    let stale = false\n\n    if (theme.tokenColorExtraction && token) {\n      getColorFromLogoURIs(logoURIs, (color) => {\n        if (!stale && color) {\n          setColor(color)\n        }\n      })\n    }\n\n    return () => {\n      stale = true\n      setColor(undefined)\n    }\n  }, [token, logoURIs, theme.tokenColorExtraction])\n\n  return color\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { loadingOpacityCss } from 'lib/css/loading'\nimport styled, { keyframes, ThemedText } from 'lib/theme'\nimport { FocusEvent, ReactNode, useCallback, useRef, useState } from 'react'\n\nimport Button from '../Button'\nimport Column from '../Column'\nimport { DecimalInput } from '../Input'\nimport Row from '../Row'\nimport TokenSelect from '../TokenSelect'\n\nconst TokenInputRow = styled(Row)`\n  grid-template-columns: 1fr;\n`\n\nconst ValueInput = styled(DecimalInput)<{ $loading: boolean }>`\n  color: ${({ theme }) => theme.primary};\n\n  :hover:not(:focus-within) {\n    color: ${({ theme }) => theme.onHover(theme.primary)};\n  }\n\n  :hover:not(:focus-within)::placeholder {\n    color: ${({ theme }) => theme.onHover(theme.secondary)};\n  }\n\n  ${loadingOpacityCss}\n`\n\nconst delayedFadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  25% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n\nconst MaxButton = styled(Button)`\n  animation: ${delayedFadeIn} 0.25s linear;\n  border-radius: 0.75em;\n  padding: 0.5em;\n`\n\ninterface TokenInputProps {\n  currency?: Currency\n  amount: string\n  disabled?: boolean\n  onMax?: () => void\n  onChangeInput: (input: string) => void\n  onChangeCurrency: (currency: Currency) => void\n  loading?: boolean\n  children: ReactNode\n}\n\nexport default function TokenInput({\n  currency,\n  amount,\n  disabled,\n  onMax,\n  onChangeInput,\n  onChangeCurrency,\n  loading,\n  children,\n}: TokenInputProps) {\n  const max = useRef<HTMLButtonElement>(null)\n  const [showMax, setShowMax] = useState(false)\n  const onFocus = useCallback(() => setShowMax(Boolean(onMax)), [onMax])\n  const onBlur = useCallback((e: FocusEvent) => {\n    if (e.relatedTarget !== max.current) {\n      setShowMax(false)\n    }\n  }, [])\n\n  return (\n    <Column gap={0.25}>\n      <TokenInputRow gap={0.5} onBlur={onBlur}>\n        <ThemedText.H2>\n          <ValueInput\n            value={amount}\n            onFocus={onFocus}\n            onChange={onChangeInput}\n            disabled={disabled || !currency}\n            $loading={Boolean(loading)}\n          ></ValueInput>\n        </ThemedText.H2>\n        {showMax && (\n          <MaxButton onClick={onMax} ref={max}>\n            <ThemedText.ButtonMedium>\n              <Trans>Max</Trans>\n            </ThemedText.ButtonMedium>\n          </MaxButton>\n        )}\n        <TokenSelect value={currency} collapsed={showMax} disabled={disabled} onSelect={onChangeCurrency} />\n      </TokenInputRow>\n      {children}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport ErrorDialog, { StatusHeader } from 'lib/components/Error/ErrorDialog'\nimport useInterval from 'lib/hooks/useInterval'\nimport { CheckCircle, Clock, Spinner } from 'lib/icons'\nimport { SwapTransactionInfo, Transaction } from 'lib/state/transactions'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useCallback, useMemo, useState } from 'react'\n\nimport ActionButton from '../../ActionButton'\nimport Column from '../../Column'\nimport Row from '../../Row'\nimport Summary from '../Summary'\n\nconst errorMessage = (\n  <Trans>\n    Try increasing your slippage tolerance.\n    <br />\n    NOTE: Fee on transfer and rebase tokens are incompatible with Uniswap V3.\n  </Trans>\n)\n\nconst TransactionRow = styled(Row)`\n  flex-direction: row-reverse;\n`\n\nfunction ElapsedTime({ tx }: { tx: Transaction<SwapTransactionInfo> }) {\n  const [elapsedMs, setElapsedMs] = useState(0)\n  useInterval(\n    () => {\n      if (tx.info.response.timestamp) {\n        setElapsedMs(tx.info.response.timestamp - tx.addedTime)\n      } else {\n        setElapsedMs(Date.now() - tx.addedTime)\n      }\n    },\n    elapsedMs === tx.info.response.timestamp ? null : 1000\n  )\n  const toElapsedTime = useCallback((ms: number) => {\n    let sec = Math.floor(ms / 1000)\n    const min = Math.floor(sec / 60)\n    sec = sec % 60\n    if (min) {\n      return (\n        <Trans>\n          {min}m {sec}s\n        </Trans>\n      )\n    } else {\n      return <Trans>{sec}s</Trans>\n    }\n  }, [])\n  return (\n    <Row gap={0.5}>\n      <Clock />\n      <ThemedText.Body2>{toElapsedTime(elapsedMs)}</ThemedText.Body2>\n    </Row>\n  )\n}\n\nconst EtherscanA = styled.a`\n  color: ${({ theme }) => theme.accent};\n  text-decoration: none;\n`\n\ninterface TransactionStatusProps {\n  tx: Transaction<SwapTransactionInfo>\n  onClose: () => void\n}\n\nfunction TransactionStatus({ tx, onClose }: TransactionStatusProps) {\n  const Icon = useMemo(() => {\n    return tx.receipt?.status ? CheckCircle : Spinner\n  }, [tx.receipt?.status])\n  const heading = useMemo(() => {\n    return tx.receipt?.status ? <Trans>Transaction submitted</Trans> : <Trans>Transaction pending</Trans>\n  }, [tx.receipt?.status])\n  return (\n    <Column flex padded gap={0.75} align=\"stretch\" style={{ height: '100%' }}>\n      <StatusHeader icon={Icon} iconColor={tx.receipt?.status ? 'success' : undefined}>\n        <ThemedText.Subhead1>{heading}</ThemedText.Subhead1>\n        <Summary input={tx.info.inputCurrencyAmount} output={tx.info.outputCurrencyAmount} />\n      </StatusHeader>\n      <TransactionRow flex>\n        <ThemedText.ButtonSmall>\n          <EtherscanA href=\"//etherscan.io\" target=\"_blank\">\n            <Trans>View on Etherscan</Trans>\n          </EtherscanA>\n        </ThemedText.ButtonSmall>\n        <ElapsedTime tx={tx} />\n      </TransactionRow>\n      <ActionButton onClick={onClose}>\n        <Trans>Close</Trans>\n      </ActionButton>\n    </Column>\n  )\n}\n\nexport default function TransactionStatusDialog({ tx, onClose }: TransactionStatusProps) {\n  return tx.receipt?.status === 0 ? (\n    <ErrorDialog\n      header={errorMessage}\n      error={new Error('TODO(zzmp)')}\n      action={<Trans>Dismiss</Trans>}\n      onAction={onClose}\n    />\n  ) : (\n    <TransactionStatus tx={tx} onClose={onClose} />\n  )\n}\n","import { HTMLProps } from 'react'\n\n/**\n * Outbound link\n */\nexport default function ExternalLink({\n  target = '_blank',\n  href,\n  rel = 'noopener noreferrer',\n  ...rest\n}: Omit<HTMLProps<HTMLAnchorElement>, 'as' | 'ref' | 'onClick'> & { href: string }) {\n  return (\n    <a target={target} rel={rel} href={href} {...rest}>\n      {rest.children}\n    </a>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Percent } from '@uniswap/sdk-core'\nimport { useAtom } from 'jotai'\nimport Popover from 'lib/components/Popover'\nimport { TooltipHandlers, useTooltip } from 'lib/components/Tooltip'\nimport { AlertTriangle, Check, Icon, LargeIcon, XOctagon } from 'lib/icons'\nimport { autoSlippageAtom, MAX_VALID_SLIPPAGE, maxSlippageAtom, MIN_HIGH_SLIPPAGE } from 'lib/state/settings'\nimport styled, { Color, ThemedText } from 'lib/theme'\nimport { memo, PropsWithChildren, ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { BaseButton, TextButton } from '../../Button'\nimport Column from '../../Column'\nimport { DecimalInput, inputCss } from '../../Input'\nimport Row from '../../Row'\nimport { Label, optionCss } from './components'\n\nconst tooltip = (\n  <Trans>Your transaction will revert if the price changes unfavorably by more than this percentage.</Trans>\n)\nconst highSlippage = <Trans>High slippage increases the risk of price movement</Trans>\nconst invalidSlippage = <Trans>Please enter a valid slippage %</Trans>\n\nconst placeholder = '0.10'\n\nconst Button = styled(TextButton)<{ selected: boolean }>`\n  ${({ selected }) => optionCss(selected)}\n`\n\nconst Custom = styled(BaseButton)<{ selected: boolean }>`\n  ${({ selected }) => optionCss(selected)}\n  ${inputCss}\n  padding: calc(0.75em - 3px) 0.625em;\n`\n\ninterface OptionProps extends Partial<TooltipHandlers> {\n  wrapper: typeof Button | typeof Custom\n  selected: boolean\n  onSelect: () => void\n  icon?: ReactNode\n}\n\nfunction Option({\n  wrapper: Wrapper,\n  children,\n  selected,\n  onSelect,\n  icon,\n  ...tooltipHandlers\n}: PropsWithChildren<OptionProps>) {\n  return (\n    <Wrapper selected={selected} onClick={onSelect} {...tooltipHandlers}>\n      <Row gap={0.5}>\n        {children}\n        {icon ? icon : <LargeIcon icon={selected ? Check : undefined} size={1.25} />}\n      </Row>\n    </Wrapper>\n  )\n}\n\nenum WarningState {\n  NONE,\n  HIGH_SLIPPAGE,\n  INVALID_SLIPPAGE,\n}\n\nconst Warning = memo(function Warning({ state, showTooltip }: { state: WarningState; showTooltip: boolean }) {\n  let icon: Icon\n  let color: Color\n  let content: ReactNode\n  let show = showTooltip\n  switch (state) {\n    case WarningState.INVALID_SLIPPAGE:\n      icon = XOctagon\n      color = 'error'\n      content = invalidSlippage\n      show = true\n      break\n    case WarningState.HIGH_SLIPPAGE:\n      icon = AlertTriangle\n      color = 'warning'\n      content = highSlippage\n      break\n    case WarningState.NONE:\n      return null\n  }\n  return (\n    <Popover\n      key={state}\n      content={<ThemedText.Caption>{content}</ThemedText.Caption>}\n      show={show}\n      placement=\"top\"\n      offset={16}\n      contained\n    >\n      <LargeIcon icon={icon} color={color} size={1.25} />\n    </Popover>\n  )\n})\n\nexport default function MaxSlippageSelect() {\n  const input = useRef<HTMLInputElement>(null)\n  const focus = useCallback(() => input.current?.focus(), [input])\n\n  const [autoSlippage, setAutoSlippage] = useAtom(autoSlippageAtom)\n  const [maxSlippage, setMaxSlippage] = useAtom(maxSlippageAtom)\n  const maxSlippageInput = useMemo(() => maxSlippage?.toString() || '', [maxSlippage])\n  const [warning, setWarning] = useState(WarningState.NONE)\n  const [showTooltip, setShowTooltip, tooltipProps] = useTooltip()\n\n  const processInput = useCallback(\n    (input: number | undefined) => {\n      const numerator = input && Math.floor(input * 100)\n      if (numerator) {\n        const percent = new Percent(numerator, 10_000)\n        if (percent.greaterThan(MAX_VALID_SLIPPAGE)) {\n          setWarning(WarningState.INVALID_SLIPPAGE)\n          setAutoSlippage(true)\n          setMaxSlippage(input)\n        } else if (percent.greaterThan(MIN_HIGH_SLIPPAGE)) {\n          setWarning(WarningState.HIGH_SLIPPAGE)\n          setAutoSlippage(false)\n          setMaxSlippage(input)\n        } else {\n          setWarning(WarningState.NONE)\n          setAutoSlippage(false)\n          setMaxSlippage(input)\n        }\n      } else {\n        setAutoSlippage(true)\n        setMaxSlippage(undefined)\n      }\n    },\n    [setAutoSlippage, setMaxSlippage]\n  )\n  const onInputSelect = useCallback(() => {\n    focus()\n    processInput(maxSlippage)\n  }, [focus, maxSlippage, processInput])\n\n  useEffect(() => processInput(maxSlippage), [maxSlippage, processInput]) // processes any warnings on mount\n  useEffect(() => setShowTooltip(true), [warning, setShowTooltip]) // enables the tooltip if a warning is set\n\n  return (\n    <Column gap={0.75}>\n      <Label name={<Trans>Max slippage</Trans>} tooltip={tooltip} />\n      <Row gap={0.5} grow=\"last\">\n        <Option wrapper={Button} selected={autoSlippage} onSelect={() => setAutoSlippage(true)}>\n          <ThemedText.ButtonMedium>\n            <Trans>Auto</Trans>\n          </ThemedText.ButtonMedium>\n        </Option>\n        <Option\n          wrapper={Custom}\n          selected={!autoSlippage}\n          onSelect={onInputSelect}\n          icon={<Warning state={warning} showTooltip={showTooltip} />}\n          {...tooltipProps}\n        >\n          <Row color={warning === WarningState.INVALID_SLIPPAGE ? 'error' : undefined}>\n            <DecimalInput\n              size={Math.max(maxSlippageInput.length, 3)}\n              value={maxSlippageInput}\n              onChange={(input) => processInput(+input)}\n              placeholder={placeholder}\n              ref={input}\n            />\n            %\n          </Row>\n        </Option>\n      </Row>\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useDefaultTransactionTtl, useTransactionTtl } from 'lib/hooks/useTransactionDeadline'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useRef } from 'react'\n\nimport Column from '../../Column'\nimport { inputCss, IntegerInput } from '../../Input'\nimport Row from '../../Row'\nimport { Label } from './components'\n\nconst tooltip = <Trans>Your transaction will revert if it has been pending for longer than this period of time.</Trans>\n\nconst Input = styled(Row)`\n  ${inputCss}\n`\n\nexport default function TransactionTtlInput() {\n  const [ttl, setTtl] = useTransactionTtl()\n  const defaultTtl = useDefaultTransactionTtl()\n  const placeholder = defaultTtl.toString()\n  const input = useRef<HTMLInputElement>(null)\n  return (\n    <Column gap={0.75}>\n      <Label name={<Trans>Transaction deadline</Trans>} tooltip={tooltip} />\n      <ThemedText.Body1>\n        <Input justify=\"start\" onClick={() => input.current?.focus()}>\n          <IntegerInput\n            placeholder={placeholder}\n            value={ttl?.toString() ?? ''}\n            onChange={(value) => setTtl(value ? parseFloat(value) : 0)}\n            size={Math.max(ttl?.toString().length || 0, placeholder.length)}\n            ref={input}\n          />\n          <Trans>minutes</Trans>\n        </Input>\n      </ThemedText.Body1>\n    </Column>\n  )\n}\n","import { Info } from 'lib/icons'\n\nexport default function RoutingTooltip() {\n  return <Info color=\"secondary\" />\n  /* TODO(zzmp): Implement post-beta launch.\n  return (\n    <Tooltip icon={Info} placement=\"bottom\">\n      <ThemeProvider>\n        <ThemedText.Subhead2>TODO: Routing Tooltip</ThemedText.Subhead2>\n      </ThemeProvider>\n    </Tooltip>\n  )\n  */\n}\n","import { Trans } from '@lingui/macro'\nimport Row from 'lib/components/Row'\nimport { Logo } from 'lib/icons'\nimport styled, { brand, ThemedText } from 'lib/theme'\n\nimport ExternalLink from './ExternalLink'\n\nconst UniswapA = styled(ExternalLink)`\n  color: ${({ theme }) => theme.secondary};\n  cursor: pointer;\n  text-decoration: none;\n\n  ${Logo} {\n    fill: ${({ theme }) => theme.secondary};\n    height: 1em;\n    transition: transform 0.25s ease, fill 0.25s ease;\n    width: 1em;\n    will-change: transform;\n  }\n\n  :hover ${Logo} {\n    fill: ${brand};\n    transform: rotate(-5deg);\n  }\n`\n\nexport default function BrandedFooter() {\n  return (\n    <Row justify=\"center\">\n      <UniswapA href={`https://app.uniswap.org/`}>\n        <Row gap={0.25}>\n          <Logo />\n          <ThemedText.Caption>\n            <Trans>Powered by the Uniswap protocol</Trans>\n          </ThemedText.Caption>\n        </Row>\n      </UniswapA>\n    </Row>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport useUSDCPrice from 'hooks/useUSDCPrice'\nimport { AlertTriangle, Icon, Info, Spinner } from 'lib/icons'\nimport { ThemedText } from 'lib/theme'\nimport { ReactNode, useMemo, useState } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { TextButton } from '../../Button'\nimport Row from '../../Row'\nimport RoutingTooltip from './RoutingTooltip'\n\ninterface CaptionProps {\n  icon?: Icon\n  caption: ReactNode\n}\n\nfunction Caption({ icon: Icon = AlertTriangle, caption }: CaptionProps) {\n  return (\n    <>\n      <Icon color=\"secondary\" />\n      {caption}\n    </>\n  )\n}\n\nexport function ConnectWallet() {\n  return <Caption caption={<Trans>Connect wallet to swap</Trans>} />\n}\nexport function UnsupportedNetwork() {\n  return <Caption caption={<Trans>Unsupported network - switch to another network to swap</Trans>} />\n}\nexport function InsufficientBalance({ currency }: { currency: Currency }) {\n  return <Caption caption={<Trans>Insufficient {currency?.symbol} balance</Trans>} />\n}\nexport function InsufficientLiquidity() {\n  return <Caption caption={<Trans>Insufficient liquidity in the pool for your trade</Trans>} />\n}\nexport function Empty() {\n  return <Caption icon={Info} caption={<Trans>Enter an amount</Trans>} />\n}\nexport function LoadingTrade() {\n  return <Caption icon={Spinner} caption={<Trans>Fetching best price…</Trans>} />\n}\n\nexport function Trade({ trade }: { trade: InterfaceTrade<Currency, Currency, TradeType> }) {\n  const [flip, setFlip] = useState(true)\n  const { inputAmount, outputAmount, executionPrice } = trade\n  const fiatValueInput = useUSDCPrice(inputAmount.currency)\n  const fiatValueOutput = useUSDCPrice(outputAmount.currency)\n\n  const ratio = useMemo(() => {\n    const [a, b] = flip ? [outputAmount, inputAmount] : [inputAmount, outputAmount]\n    const priceString = (!flip ? executionPrice : executionPrice?.invert())?.toSignificant(6)\n\n    const ratio = `1 ${a.currency.symbol} = ${priceString} ${b.currency.symbol}`\n    const usdc = !flip\n      ? fiatValueInput\n        ? ` ($${fiatValueInput.toSignificant(6)})`\n        : null\n      : fiatValueOutput\n      ? ` ($${fiatValueOutput.toSignificant(6)})`\n      : null\n\n    return (\n      <Row gap={0.25} style={{ userSelect: 'text' }}>\n        {ratio}\n        {usdc && <ThemedText.Caption color=\"secondary\">{usdc}</ThemedText.Caption>}\n      </Row>\n    )\n  }, [executionPrice, fiatValueInput, fiatValueOutput, flip, inputAmount, outputAmount])\n\n  return (\n    <>\n      <RoutingTooltip />\n      <TextButton color=\"primary\" onClick={() => setFlip(!flip)}>\n        {ratio}\n      </TextButton>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\nimport { useUSDCValue } from 'hooks/useUSDCPrice'\nimport { atom } from 'jotai'\nimport { useAtomValue } from 'jotai/utils'\nimport BrandedFooter from 'lib/components/BrandedFooter'\nimport { loadingOpacityCss } from 'lib/css/loading'\nimport { useSwapAmount, useSwapCurrency, useSwapInfo } from 'lib/hooks/swap'\nimport useCurrencyColor from 'lib/hooks/useCurrencyColor'\nimport { Field, independentFieldAtom } from 'lib/state/swap'\nimport styled, { DynamicThemeProvider, ThemedText } from 'lib/theme'\nimport { ReactNode, useMemo } from 'react'\nimport { TradeState } from 'state/routing/types'\nimport { computeFiatValuePriceImpact } from 'utils/computeFiatValuePriceImpact'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\n\nimport Column from '../Column'\nimport Row from '../Row'\nimport TokenInput from './TokenInput'\n\nexport const colorAtom = atom<string | undefined>(undefined)\n\nconst LoadingSpan = styled.span<{ $loading: boolean }>`\n  ${loadingOpacityCss};\n`\n\nconst OutputColumn = styled(Column)<{ hasColor: boolean | null }>`\n  background-color: ${({ theme }) => theme.module};\n  border-radius: ${({ theme }) => theme.borderRadius - 0.25}em;\n  padding: 0.75em;\n  padding-bottom: 0.5em;\n  position: relative;\n\n  // Set transitions to reduce color flashes when switching color/token.\n  // When color loads, transition the background so that it transitions from the empty or last state, but not _to_ the empty state.\n  transition: ${({ hasColor }) => (hasColor ? 'background-color 0.25s ease-out' : undefined)};\n  > {\n    // When color is loading, delay the color/stroke so that it seems to transition from the last state.\n    transition: ${({ hasColor }) => (hasColor === null ? 'color 0.25s ease-in, stroke 0.25s ease-in' : undefined)};\n  }\n`\n\ninterface OutputProps {\n  disabled?: boolean\n  children: ReactNode\n}\n\nexport default function Output({ disabled, children }: OutputProps) {\n  const { i18n } = useLingui()\n\n  const {\n    trade: { state: tradeState },\n    currencyBalances: { [Field.OUTPUT]: balance },\n    currencyAmounts: { [Field.INPUT]: inputCurrencyAmount, [Field.OUTPUT]: outputCurrencyAmount },\n  } = useSwapInfo()\n\n  const [swapOutputAmount, updateSwapOutputAmount] = useSwapAmount(Field.OUTPUT)\n  const [swapOutputCurrency, updateSwapOutputCurrency] = useSwapCurrency(Field.OUTPUT)\n\n  //loading status of the trade\n  const isTradeLoading = useMemo(\n    () => TradeState.LOADING === tradeState || TradeState.SYNCING === tradeState,\n    [tradeState]\n  )\n\n  const isDependentField = useAtomValue(independentFieldAtom) !== Field.OUTPUT\n  const isLoading = isDependentField && isTradeLoading\n\n  const overrideColor = useAtomValue(colorAtom)\n  const dynamicColor = useCurrencyColor(swapOutputCurrency)\n  const color = overrideColor || dynamicColor\n\n  // different state true/null/false allow smoother color transition\n  const hasColor = swapOutputCurrency ? Boolean(color) || null : false\n\n  const inputUSDC = useUSDCValue(inputCurrencyAmount)\n  const outputUSDC = useUSDCValue(outputCurrencyAmount)\n\n  const priceImpact = useMemo(() => {\n    const computedChange = computeFiatValuePriceImpact(inputUSDC, outputUSDC)\n    return computedChange ? parseFloat(computedChange.multiply(-1)?.toSignificant(3)) : undefined\n  }, [inputUSDC, outputUSDC])\n\n  const usdc = useMemo(() => {\n    if (outputUSDC) {\n      return `$${outputUSDC.toFixed(2)} (${priceImpact && priceImpact > 0 ? '+' : ''}${priceImpact}%)`\n    }\n    return ''\n  }, [priceImpact, outputUSDC])\n\n  return (\n    <DynamicThemeProvider color={color}>\n      <OutputColumn hasColor={hasColor} gap={0.5}>\n        <Row>\n          <ThemedText.Subhead2 color=\"secondary\">\n            <Trans>For</Trans>\n          </ThemedText.Subhead2>\n        </Row>\n        <TokenInput\n          currency={swapOutputCurrency}\n          amount={(swapOutputAmount !== undefined ? swapOutputAmount : outputCurrencyAmount?.toSignificant(6)) ?? ''}\n          disabled={disabled}\n          onChangeInput={updateSwapOutputAmount}\n          onChangeCurrency={updateSwapOutputCurrency}\n          loading={isLoading}\n        >\n          <ThemedText.Body2 color=\"secondary\">\n            <Row>\n              <LoadingSpan $loading={isLoading}>{usdc}</LoadingSpan>\n              {balance && (\n                <span>\n                  Balance: <span style={{ userSelect: 'text' }}>{formatCurrencyAmount(balance, 4, i18n.locale)}</span>\n                </span>\n              )}\n            </Row>\n          </ThemedText.Body2>\n        </TokenInput>\n        {children}\n        <BrandedFooter />\n      </OutputColumn>\n    </DynamicThemeProvider>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\nimport { useUSDCValue } from 'hooks/useUSDCPrice'\nimport { useAtomValue } from 'jotai/utils'\nimport { loadingOpacityCss } from 'lib/css/loading'\nimport { useSwapAmount, useSwapCurrency, useSwapInfo } from 'lib/hooks/swap'\nimport { usePrefetchCurrencyColor } from 'lib/hooks/useCurrencyColor'\nimport { Field, independentFieldAtom } from 'lib/state/swap'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\nimport { TradeState } from 'state/routing/types'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\n\nimport Column from '../Column'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\nimport TokenInput from './TokenInput'\n\nconst LoadingSpan = styled.span<{ $loading: boolean }>`\n  ${loadingOpacityCss};\n`\n\nconst InputColumn = styled(Column)<{ approved?: boolean }>`\n  margin: 0.75em;\n  position: relative;\n\n  ${TokenImg} {\n    filter: ${({ approved }) => (approved ? undefined : 'saturate(0) opacity(0.4)')};\n    transition: filter 0.25s;\n  }\n`\n\ninterface InputProps {\n  disabled?: boolean\n}\n\nexport default function Input({ disabled }: InputProps) {\n  const { i18n } = useLingui()\n  const {\n    trade: { state: tradeState },\n    currencyBalances: { [Field.INPUT]: balance },\n    currencyAmounts: { [Field.INPUT]: inputCurrencyAmount },\n  } = useSwapInfo()\n  const inputUSDC = useUSDCValue(inputCurrencyAmount)\n\n  const [swapInputAmount, updateSwapInputAmount] = useSwapAmount(Field.INPUT)\n  const [swapInputCurrency, updateSwapInputCurrency] = useSwapCurrency(Field.INPUT)\n\n  // extract eagerly in case of reversal\n  usePrefetchCurrencyColor(swapInputCurrency)\n\n  const isTradeLoading = useMemo(\n    () => TradeState.LOADING === tradeState || TradeState.SYNCING === tradeState,\n    [tradeState]\n  )\n  const isDependentField = useAtomValue(independentFieldAtom) !== Field.INPUT\n  const isLoading = isDependentField && isTradeLoading\n\n  //TODO(ianlapham): mimic logic from app swap page\n  const mockApproved = true\n\n  const onMax = useMemo(() => {\n    if (balance?.greaterThan(0)) {\n      return () => updateSwapInputAmount(balance.toExact())\n    }\n    return\n  }, [balance, updateSwapInputAmount])\n\n  return (\n    <InputColumn gap={0.5} approved={mockApproved}>\n      <Row>\n        <ThemedText.Subhead2 color=\"secondary\">\n          <Trans>Trading</Trans>\n        </ThemedText.Subhead2>\n      </Row>\n      <TokenInput\n        currency={swapInputCurrency}\n        amount={(swapInputAmount !== undefined ? swapInputAmount : inputCurrencyAmount?.toSignificant(6)) ?? ''}\n        disabled={disabled}\n        onMax={onMax}\n        onChangeInput={updateSwapInputAmount}\n        onChangeCurrency={updateSwapInputCurrency}\n        loading={isLoading}\n      >\n        <ThemedText.Body2 color=\"secondary\">\n          <Row>\n            <LoadingSpan $loading={isLoading}>{inputUSDC ? `$${inputUSDC.toFixed(2)}` : '-'}</LoadingSpan>\n            {balance && (\n              <ThemedText.Body2 color={inputCurrencyAmount?.greaterThan(balance) ? 'error' : undefined}>\n                Balance: <span style={{ userSelect: 'text' }}>{formatCurrencyAmount(balance, 4, i18n.locale)}</span>\n              </ThemedText.Body2>\n            )}\n          </Row>\n        </ThemedText.Body2>\n      </TokenInput>\n      <Row />\n    </InputColumn>\n  )\n}\n","import { useSwitchSwapCurrencies } from 'lib/hooks/swap'\nimport { ArrowDown as ArrowDownIcon, ArrowUp as ArrowUpIcon } from 'lib/icons'\nimport styled, { Layer } from 'lib/theme'\nimport { useCallback, useState } from 'react'\n\nimport Button from '../Button'\nimport Row from '../Row'\n\nconst ReverseRow = styled(Row)`\n  left: 50%;\n  position: absolute;\n  top: 7.45em;\n  transform: translateX(-50%);\n  z-index: ${Layer.OVERLAY};\n`\n\nconst ArrowUp = styled(ArrowUpIcon)`\n  left: calc(50% - 0.37em);\n  position: absolute;\n  top: calc(50% - 0.82em);\n`\n\nconst ArrowDown = styled(ArrowDownIcon)`\n  bottom: calc(50% - 0.82em);\n  position: absolute;\n  right: calc(50% - 0.37em);\n`\n\nconst Overlay = styled.div`\n  background-color: ${({ theme }) => theme.container};\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  padding: 0.25em;\n`\n\nconst StyledReverseButton = styled(Button)<{ turns: number }>`\n  border-radius: ${({ theme }) => theme.borderRadius * 0.75}em;\n  height: 2.5em;\n  position: relative;\n  width: 2.5em;\n\n  div {\n    transform: rotate(${({ turns }) => turns / 2}turn);\n    transition: transform 0.25s ease-in-out;\n    will-change: transform;\n  }\n`\n\nexport default function ReverseButton({ disabled }: { disabled?: boolean }) {\n  const [turns, setTurns] = useState(0)\n  const switchCurrencies = useSwitchSwapCurrencies()\n  const onClick = useCallback(() => {\n    switchCurrencies()\n    setTurns((turns) => ++turns)\n  }, [switchCurrencies])\n\n  return (\n    <ReverseRow justify=\"center\">\n      <Overlay>\n        <StyledReverseButton disabled={disabled} onClick={onClick} turns={turns}>\n          <div>\n            <ArrowUp strokeWidth={3} />\n            <ArrowDown strokeWidth={3} />\n          </div>\n        </StyledReverseButton>\n      </Overlay>\n    </ReverseRow>\n  )\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { feeOptionsAtom } from 'lib/state/swap'\nimport { useEffect } from 'react'\n\ninterface FeeOptionsArgs {\n  convenienceFee?: number\n  convenienceFeeRecipient?: string | string | { [chainId: number]: string }\n}\n\nexport default function useSyncConvenienceFee({ convenienceFee, convenienceFeeRecipient }: FeeOptionsArgs) {\n  const { chainId } = useActiveWeb3React()\n  const updateFeeOptions = useUpdateAtom(feeOptionsAtom)\n\n  useEffect(() => {\n    if (convenienceFee && convenienceFeeRecipient) {\n      if (typeof convenienceFeeRecipient === 'string') {\n        updateFeeOptions({\n          fee: new Percent(convenienceFee, 10_000),\n          recipient: convenienceFeeRecipient,\n        })\n        return\n      }\n      if (chainId && convenienceFeeRecipient[chainId]) {\n        updateFeeOptions({\n          fee: new Percent(convenienceFee, 10_000),\n          recipient: convenienceFeeRecipient[chainId],\n        })\n        return\n      }\n    }\n    updateFeeOptions(undefined)\n  }, [chainId, convenienceFee, convenienceFeeRecipient, updateFeeOptions])\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { nativeOnChain } from 'constants/tokens'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { DefaultAddress } from 'lib/components/Swap'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { useToken } from 'lib/hooks/useCurrency'\nimport { Field, Swap, swapAtom } from 'lib/state/swap'\nimport { useCallback, useLayoutEffect, useState } from 'react'\n\nfunction useDefaultToken(\n  defaultAddress: DefaultAddress | undefined,\n  chainId: number | undefined\n): Currency | null | undefined {\n  let address = undefined\n  if (typeof defaultAddress === 'string') {\n    address = defaultAddress\n  } else if (typeof defaultAddress === 'object' && chainId) {\n    address = defaultAddress[chainId]\n  }\n  const token = useToken(address)\n  if (chainId && address === 'NATIVE') {\n    return nativeOnChain(chainId)\n  }\n  return token\n}\n\ninterface UseSwapDefaultsArgs {\n  defaultInputAddress?: DefaultAddress\n  defaultInputAmount?: string\n  defaultOutputAddress?: DefaultAddress\n  defaultOutputAmount?: string\n}\n\nexport default function useSyncSwapDefaults({\n  defaultInputAddress,\n  defaultInputAmount,\n  defaultOutputAddress,\n  defaultOutputAmount,\n}: UseSwapDefaultsArgs) {\n  const updateSwap = useUpdateAtom(swapAtom)\n  const { chainId } = useActiveWeb3React()\n  const defaultInputToken = useDefaultToken(defaultInputAddress, chainId)\n  const defaultOutputToken = useDefaultToken(defaultOutputAddress, chainId)\n\n  const setToDefaults = useCallback(() => {\n    const defaultSwapState: Swap = {\n      amount: '',\n      [Field.INPUT]: defaultInputToken || undefined,\n      [Field.OUTPUT]: defaultOutputToken || undefined,\n      independentField: Field.INPUT,\n    }\n    if (defaultInputAmount && defaultInputToken) {\n      defaultSwapState.amount = defaultInputAmount\n    } else if (defaultOutputAmount && defaultOutputToken) {\n      defaultSwapState.independentField = Field.OUTPUT\n      defaultSwapState.amount = defaultOutputAmount\n    }\n    updateSwap((swap) => ({ ...swap, ...defaultSwapState }))\n  }, [defaultInputToken, defaultOutputToken, defaultInputAmount, defaultOutputAmount, updateSwap])\n\n  const [previousChainId, setPreviousChainId] = useState(chainId)\n  useLayoutEffect(() => {\n    setPreviousChainId(chainId)\n  }, [chainId])\n  useLayoutEffect(() => {\n    if (chainId && chainId !== previousChainId) {\n      setToDefaults()\n    }\n  }, [chainId, previousChainId, setToDefaults])\n}\n","import { Trans } from '@lingui/macro'\nimport { Wallet as WalletIcon } from 'lib/icons'\nimport styled, { ThemedText } from 'lib/theme'\n\nimport Row from './Row'\n\ninterface WalletProps {\n  disabled?: boolean\n  onClick?: () => void\n}\n\nconst ClickableRow = styled(Row)<{ onClick?: unknown }>`\n  cursor: ${({ onClick }) => onClick && 'pointer'};\n`\n\nexport default function Wallet({ disabled, onClick }: WalletProps) {\n  return disabled ? (\n    <ThemedText.Caption color=\"secondary\">\n      <ClickableRow gap={0.5} onClick={onClick}>\n        <WalletIcon />\n        <Trans>Connect your wallet</Trans>\n      </ClickableRow>\n    </ThemedText.Caption>\n  ) : null\n}\n","import { Trans } from '@lingui/macro'\nimport { Token, TradeType } from '@uniswap/sdk-core'\nimport { CHAIN_INFO } from 'constants/chainInfo'\nimport { useERC20PermitFromTrade } from 'hooks/useERC20Permit'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { useAtomValue } from 'jotai/utils'\nimport { useSwapInfo } from 'lib/hooks/swap'\nimport useSwapApproval, {\n  ApprovalState,\n  useSwapApprovalOptimizedTrade,\n  useSwapRouterAddress,\n} from 'lib/hooks/swap/useSwapApproval'\nimport { useSwapCallback } from 'lib/hooks/swap/useSwapCallback'\nimport { useAddTransaction } from 'lib/hooks/transactions'\nimport { usePendingApproval } from 'lib/hooks/transactions'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport useTransactionDeadline from 'lib/hooks/useTransactionDeadline'\nimport { Link, Spinner } from 'lib/icons'\nimport { displayTxHashAtom, Field, independentFieldAtom } from 'lib/state/swap'\nimport { TransactionType } from 'lib/state/transactions'\nimport styled, { useTheme } from 'lib/theme'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport invariant from 'tiny-invariant'\n\nimport ActionButton from '../ActionButton'\nimport Dialog from '../Dialog'\nimport Row from '../Row'\nimport { SummaryDialog } from './Summary'\n\ninterface SwapButtonProps {\n  disabled?: boolean\n}\n\nconst EtherscanA = styled.a`\n  color: currentColor;\n  text-decoration: none;\n`\n\nfunction useIsPendingApproval(token?: Token, spender?: string): boolean {\n  return Boolean(usePendingApproval(token, spender))\n}\n\nexport default function SwapButton({ disabled }: SwapButtonProps) {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { tokenColorExtraction } = useTheme()\n\n  const {\n    trade,\n    allowedSlippage,\n    currencies: { [Field.INPUT]: inputCurrency },\n    currencyBalances: { [Field.INPUT]: inputCurrencyBalance },\n    currencyAmounts: { [Field.INPUT]: inputCurrencyAmount, [Field.OUTPUT]: outputCurrencyAmount },\n    feeOptions,\n  } = useSwapInfo()\n\n  const independentField = useAtomValue(independentFieldAtom)\n\n  const [activeTrade, setActiveTrade] = useState<typeof trade.trade | undefined>()\n  useEffect(() => {\n    setActiveTrade((activeTrade) => activeTrade && trade.trade)\n  }, [trade])\n\n  // TODO(zzmp): Return an optimized trade directly from useSwapInfo.\n  const optimizedTrade =\n    // Use trade.trade if there is no swap optimized trade. This occurs if approvals are still pending.\n    useSwapApprovalOptimizedTrade(trade.trade, allowedSlippage, useIsPendingApproval) || trade.trade\n  const [approval, getApproval] = useSwapApproval(optimizedTrade, allowedSlippage, useIsPendingApproval)\n  const approvalHash = usePendingApproval(\n    inputCurrency?.isToken ? inputCurrency : undefined,\n    useSwapRouterAddress(optimizedTrade)\n  )\n\n  const addTransaction = useAddTransaction()\n  const addApprovalTransaction = useCallback(() => {\n    getApproval().then((transaction) => {\n      if (transaction) {\n        addTransaction({ type: TransactionType.APPROVAL, ...transaction })\n      }\n    })\n  }, [addTransaction, getApproval])\n\n  const actionProps = useMemo(() => {\n    if (disabled) return { disabled: true }\n\n    if (chainId && inputCurrencyAmount && inputCurrencyBalance?.greaterThan(inputCurrencyAmount)) {\n      if (approval === ApprovalState.PENDING) {\n        return {\n          disabled: true,\n          update: {\n            message: (\n              <EtherscanA href={approvalHash && `${CHAIN_INFO[chainId].explorer}tx/${approvalHash}`} target=\"_blank\">\n                <Row gap={0.25}>\n                  <Trans>\n                    Approval pending <Link />\n                  </Trans>\n                </Row>\n              </EtherscanA>\n            ),\n            action: <Trans>Approve</Trans>,\n            icon: Spinner,\n          },\n        }\n      } else if (approval === ApprovalState.NOT_APPROVED) {\n        return {\n          update: {\n            message: <Trans>Approve {inputCurrencyAmount.currency.symbol} first</Trans>,\n            action: <Trans>Approve</Trans>,\n          },\n        }\n      }\n      return {}\n    }\n\n    return { disabled: true }\n  }, [approval, approvalHash, chainId, disabled, inputCurrencyAmount, inputCurrencyBalance])\n\n  const deadline = useTransactionDeadline()\n  const { signatureData } = useERC20PermitFromTrade(optimizedTrade, allowedSlippage, deadline)\n\n  // the callback to execute the swap\n  const { callback: swapCallback } = useSwapCallback({\n    trade: optimizedTrade,\n    allowedSlippage,\n    recipientAddressOrName: account ?? null,\n    signatureData,\n    deadline,\n    feeOptions,\n  })\n\n  //@TODO(ianlapham): add a loading state, process errors\n  const setDisplayTxHash = useUpdateAtom(displayTxHashAtom)\n\n  const onConfirm = useCallback(() => {\n    swapCallback?.()\n      .then((response) => {\n        setDisplayTxHash(response.hash)\n        invariant(inputCurrencyAmount && outputCurrencyAmount)\n        addTransaction({\n          response,\n          type: TransactionType.SWAP,\n          tradeType: independentField === Field.INPUT ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n          inputCurrencyAmount,\n          outputCurrencyAmount,\n        })\n      })\n      .catch((error) => {\n        //@TODO(ianlapham): add error handling\n        console.log(error)\n      })\n      .finally(() => {\n        setActiveTrade(undefined)\n      })\n  }, [addTransaction, independentField, inputCurrencyAmount, outputCurrencyAmount, setDisplayTxHash, swapCallback])\n\n  return (\n    <>\n      <ActionButton\n        color={tokenColorExtraction ? 'interactive' : 'accent'}\n        onClick={() => setActiveTrade(trade.trade)}\n        onUpdate={addApprovalTransaction}\n        {...actionProps}\n      >\n        <Trans>Review swap</Trans>\n      </ActionButton>\n      {activeTrade && (\n        <Dialog color=\"dialog\" onClose={() => setActiveTrade(undefined)}>\n          <SummaryDialog trade={activeTrade} allowedSlippage={allowedSlippage} onConfirm={onConfirm} />\n        </Dialog>\n      )}\n    </>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { DefaultAddress, SwapProps } from 'lib/components/Swap'\nimport { IntegrationError } from 'lib/errors'\nimport { PropsWithChildren, useEffect } from 'react'\n\nimport { isAddress } from '../../../utils'\n\nfunction isAddressOrAddressMap(addressOrMap: DefaultAddress): boolean {\n  if (typeof addressOrMap === 'object') {\n    return Object.values(addressOrMap).every((address) => isAddress(address))\n  }\n  if (typeof addressOrMap === 'string') {\n    return typeof isAddress(addressOrMap) === 'string'\n  }\n  return false\n}\n\ntype ValidatorProps = PropsWithChildren<SwapProps>\n\nexport default function SwapPropValidator(props: ValidatorProps) {\n  const { convenienceFee, convenienceFeeRecipient } = props\n  useEffect(() => {\n    if (convenienceFee) {\n      if (convenienceFee > 100 || convenienceFee < 0) {\n        throw new IntegrationError(`convenienceFee must be between 0 and 100. (You set it to ${convenienceFee})`)\n      }\n      if (!convenienceFeeRecipient) {\n        throw new IntegrationError('convenienceFeeRecipient is required when convenienceFee is set.')\n      }\n\n      if (typeof convenienceFeeRecipient === 'string') {\n        if (!isAddress(convenienceFeeRecipient)) {\n          throw new IntegrationError(\n            `convenienceFeeRecipient must be a valid address. (You set it to ${convenienceFeeRecipient}.)`\n          )\n        }\n      } else if (typeof convenienceFeeRecipient === 'object') {\n        Object.values(convenienceFeeRecipient).forEach((recipient) => {\n          if (!isAddress(recipient)) {\n            const values = Object.values(convenienceFeeRecipient).join(', ')\n            throw new IntegrationError(\n              `All values in convenienceFeeRecipient object must be valid addresses. (You used ${values}.)`\n            )\n          }\n        })\n      }\n    }\n  }, [convenienceFee, convenienceFeeRecipient])\n\n  const { defaultInputAddress, defaultInputAmount, defaultOutputAddress, defaultOutputAmount } = props\n  useEffect(() => {\n    if (defaultOutputAmount && defaultInputAmount) {\n      throw new IntegrationError('defaultInputAmount and defaultOutputAmount may not both be defined.')\n    }\n    if (defaultInputAmount && BigNumber.from(defaultInputAmount).lt(0)) {\n      throw new IntegrationError(`defaultInputAmount must be a positive number. (You set it to ${defaultInputAmount})`)\n    }\n    if (defaultOutputAmount && BigNumber.from(defaultOutputAmount).lt(0)) {\n      throw new IntegrationError(\n        `defaultOutputAmount must be a positive number. (You set it to ${defaultOutputAmount})`\n      )\n    }\n    if (defaultInputAddress && !isAddressOrAddressMap(defaultInputAddress) && defaultInputAddress !== 'NATIVE') {\n      throw new IntegrationError(\n        `defaultInputAddress(es) must be a valid address or \"NATIVE\". (You set it to ${defaultInputAddress}`\n      )\n    }\n    if (defaultOutputAddress && !isAddressOrAddressMap(defaultOutputAddress) && defaultOutputAddress !== 'NATIVE') {\n      throw new IntegrationError(\n        `defaultOutputAddress(es) must be a valid address or \"NATIVE\". (You set it to ${defaultOutputAddress}`\n      )\n    }\n  }, [defaultInputAddress, defaultInputAmount, defaultOutputAddress, defaultOutputAmount])\n\n  return <>{props.children}</>\n}\n"],"sourceRoot":""}