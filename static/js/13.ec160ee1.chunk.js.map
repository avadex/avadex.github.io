{"version":3,"sources":["lib/hooks/swap/index.ts","lib/state/swap.ts","lib/state/atoms.ts","lib/state/settings.ts","lib/hooks/swap/useSwapInfo.tsx","lib/hooks/routing/useClientSideSmartOrderRouterTrade.ts","lib/hooks/swap/useBestTrade.ts"],"names":["amountAtom","pickAtom","swapAtom","useSwitchSwapCurrencies","update","useUpdateAtom","useCallback","swap","oldOutput","Field","OUTPUT","INPUT","independentField","useSwapCurrency","field","atom","useMemo","otherAtom","otherField","useAtom","currency","setCurrency","otherCurrency","useAtomValue","switchSwapCurrencies","setOrSwitchCurrency","useSwapAmount","amount","independentFieldAtom","value","undefined","updateSwap","updateAmount","useIsAmountPopulated","Boolean","atomWithImmer","nativeOnChain","SupportedChainId","AVALANCHE","displayTxHashAtom","feeOptionsAtom","anAtom","key","setter","draft","get","set","withImmer","derived","setTogglable","MAX_VALID_SLIPPAGE","Percent","MIN_HIGH_SLIPPAGE","initialSettings","maxSlippage","transactionTtl","mockTogglable","clientSideRouter","settingsAtom","atomWithReset","maxSlippageAtom","transactionTtlAtom","mockTogglableAtom","clientSideRouterAtom","BAD_RECIPIENT_ADDRESSES","swapInfoAtom","currencies","currencyBalances","currencyAmounts","trade","state","TradeState","INVALID","allowedSlippage","feeOptions","SwapInfoUpdater","setSwapInfo","swapInfo","account","useActiveWeb3React","inputCurrency","outputCurrency","to","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","tryParseCurrencyAmount","useBestTrade","TradeType","EXACT_INPUT","EXACT_OUTPUT","inputAmount","outputAmount","autoSlippageTolerance","useAutoSlippageTolerance","inputError","formattedTo","isAddress","maximumAmountIn","balanceIn","amountIn","lessThan","symbol","useComputeSwapInfo","useEffect","useSwapInfo","config","protocols","Protocol","V2","V3","useClientSideSmartOrderRouterTrade","tradeType","amountSpecified","chainId","library","currencyIn","currencyOut","queryArgs","useRoutingAPIArguments","tokenIn","tokenOut","useClientSideRouter","params","provider","useState","loading","setLoading","quoteResult","error","setFetchedResult","a","getClientSideQuote","result","data","fetchQuote","route","computeRoutes","gasUseEstimateUSD","useStablecoinAmountFromFiatValue","LOADING","otherAmount","CurrencyAmount","fromRawAmount","quote","length","NO_ROUTE_FOUND","transformRoutesToTrade","VALID","e","console","debug","useDebounce","debouncedAmount","debouncedOtherCurrency","clientSORTrade","getTradeInputs","amountFromLatestTrade","currencyFromTrade","otherCurrencyFromTrade","debouncing","syncing","amounts","indepdenentCurrencies","dependentCurrencies","amountsMatch","equalTo","currenciesMatch","equals","isTradeDebouncing","useFallback","fallbackTrade","useClientSideV3Trade","SYNCING"],"mappings":"ggBAQO,IAAMA,EAAaC,mBAASC,WAAU,UAatC,SAASC,IACd,IAAMC,EAASC,wBAAcH,YAC7B,OAAOI,uBAAY,WACjBF,GAAO,SAACG,GACN,IAAMC,EAAYD,EAAKE,QAAMC,QAG7B,OAFAH,EAAKE,QAAMC,QAAUH,EAAKE,QAAME,OAChCJ,EAAKE,QAAME,OAASH,EACZD,EAAKK,kBACX,KAAKH,QAAME,MACTJ,EAAKK,iBAAmBH,QAAMC,OAC9B,MACF,KAAKD,QAAMC,OACTH,EAAKK,iBAAmBH,QAAME,YAInC,CAACP,IAGC,SAASS,EAAgBC,GAC9B,IAAMC,EAAOC,mBAAQ,kBAAMf,mBAASC,WAAUY,KAAQ,CAACA,IACjDG,EAAYD,mBAAQ,kBAAMf,mBAASC,WAhC3C,SAAoBY,GAClB,OAAQA,GACN,KAAKL,QAAME,MACT,OAAOF,QAAMC,OAEf,KAAKD,QAAMC,OACT,OAAOD,QAAME,OA0BkCO,CAAWJ,MAAS,CAACA,IACxE,EAAgCK,kBAAQJ,GAAxC,mBAAOK,EAAP,KAAiBC,EAAjB,KACMC,EAAgBC,uBAAaN,GAC7BO,EAAuBrB,IACvBsB,EAAsBnB,uBAC1B,SAACc,GACKA,IAAaE,EACfE,IAEAH,EAAYD,KAGhB,CAACE,EAAeD,EAAaG,IAE/B,MAAO,CAACJ,EAAUK,GAGb,SAASC,EAAcZ,GAC5B,IAAMa,EAASJ,uBAAavB,GACtBY,EAAmBW,uBAAaK,wBAChCC,EAAQb,mBAAQ,kBAAOJ,IAAqBE,EAAQa,OAASG,IAAY,CAACH,EAAQf,EAAkBE,IACpGiB,EAAa1B,wBAAcH,YAC3B8B,EAAe1B,uBACnB,SAACqB,GAAD,OACEI,GAAW,SAACxB,GACVA,EAAKK,iBAAmBE,EACxBP,EAAKoB,OAASA,OAElB,CAACb,EAAOiB,IAEV,MAAO,CAACF,EAAOG,GAIV,SAASC,IACd,OAAOC,QAAQX,uBAAavB,M,iRCrElBS,E,8DAAAA,K,cAAAA,E,iBAAAA,M,KAYL,IAAMP,EAAWiC,wBAAa,aACnCvB,iBAAkBH,EAAME,MACxBgB,OAAQ,IACPlB,EAAME,MAAQyB,YAAcC,IAAiBC,aAGnCV,EAAuB3B,mBAASC,EAAU,oBAG1CqC,EAAoBxB,oBAAyBe,GAE7CU,EAAiBzB,oBAA6Be,I,iCC/B3D,oHAoBO,SAAS7B,EACdwC,EACAC,GAGmC,IAFnCC,EAEkC,uDAFwC,SAACC,EAAOxC,GAAR,OACxEA,GAEF,OAAOW,gBACL,SAAC8B,GAAD,OAASA,EAAIJ,GAAQC,MACrB,SAACG,EAAKC,EAAK1C,GAAX,OACE0C,EAAIC,oBAAUN,IAAS,SAACZ,GACtB,IAAMmB,EAAUL,EAAOd,EAAMa,GAAMtC,GACnCyB,EAAMa,GAAOM,QAMd,SAASC,EAAaL,GAC3B,OAAQA,I,iCCtCV,gYAKaM,EAAqB,IAAIC,UAAQ,EAAG,GACpCC,EAAoB,IAAID,UAAQ,EAAG,KAS1CE,EAA4B,CAChCC,YAAa,OACbC,oBAAgBzB,EAChB0B,eAAe,EACfC,kBAAkB,GAGPC,EAAeC,wBAAcN,GAC7BO,EAAkB3D,mBAASyD,EAAc,eACzCG,EAAqB5D,mBAASyD,EAAc,kBAC5CI,EAAoB7D,mBAASyD,EAAc,gBAAiBT,gBAC5Dc,EAAuB9D,mBAASyD,EAAc,qB,0QCGrDM,EAAuD,CAC3D,8CAA8C,EAC9C,8CAA8C,EAC9C,8CAA8C,GAuHhD,IAAMC,EAAelD,eAAe,CAClCmD,WAAY,GACZC,iBAAkB,GAClBC,gBAAiB,GACjBC,MAAO,CAAEC,MAAOC,IAAWC,SAC3BC,gBAAiB,IAAItB,UAAQ,GAC7BuB,gBAAY5C,IAGP,SAAS6C,IACd,IAAMC,EAAcvE,wBAAc4D,GAC5BY,EA9HR,WAAyC,IAAD,MAC9BC,EAAYC,oBAAZD,QAER,EAKIvD,uBAAarB,YAJfU,EADF,EACEA,iBACAe,EAFF,EAEEA,OACeqD,EAHjB,EAGGvE,QAAME,OACSsE,EAJlB,EAIGxE,QAAMC,QAGHgE,EAAanD,uBAAaiB,kBAE1B0C,EAAKJ,EAELK,EAAwBC,8BAC5BN,EACA9D,mBAAQ,iBAAM,QAACgE,QAAD,IAACA,SAAiBlD,EAAlB,OAA6BmD,QAA7B,IAA6BA,SAAkBnD,KAAY,CAACkD,EAAeC,KAGrFI,EAAqBzE,IAAqBH,QAAME,MAChD2E,EAAetE,mBACnB,wBAAMuE,kBAAuB5D,EAAD,UAAU0D,EAAYL,EAAgBC,SAAtC,aAAyDnD,KACrF,CAACkD,EAAeK,EAAWJ,EAAgBtD,IAIvC0C,EAAQmB,uBACZH,EAAYI,YAAUC,YAAcD,YAAUE,aAC9CL,EAFwB,UAGvBD,EAAYJ,EAAiBD,SAHN,aAGwBlD,GAG5CoC,EAAalD,mBACjB,2CACGP,QAAME,MADT,OACiBqE,QADjB,IACiBA,SAAiBlD,GADlC,cAEGrB,QAAMC,OAFT,OAEkBuE,QAFlB,IAEkBA,SAAkBnD,GAFpC,IAIA,CAACkD,EAAeC,IAGZd,EAAmBnD,mBACvB,2CACGP,QAAME,MAAQwE,EAAsB,IADvC,cAEG1E,QAAMC,OAASyE,EAAsB,IAFxC,IAIA,CAACA,IAGGf,EAAkBpD,mBACtB,+CACGP,QAAME,MADT,UACiB0D,EAAMA,aADvB,aACiB,EAAauB,aAD9B,cAEGnF,QAAMC,OAFT,UAEkB2D,EAAMA,aAFxB,aAEkB,EAAawB,cAF/B,IAIA,WAACxB,EAAMA,aAAP,aAAC,EAAauB,YAAd,UAA2BvB,EAAMA,aAAjC,aAA2B,EAAawB,eAOpCC,EAAwBC,YAAyB1B,EAAMA,OACvDf,EAAc/B,uBAAaqC,mBAC3Ba,EAAkBzD,mBACtB,iBAAuB,SAAhBsC,EAAyBwC,EAAwBxC,IACxD,CAACwC,EAAuBxC,IAGpB0C,EAAahF,mBAAQ,WAAO,IAAD,EAC3BgF,EAMuD,EAIxC,EARdlB,IACHkB,EAAa,0CAGV9B,EAAWzD,QAAME,QAAWuD,EAAWzD,QAAMC,UAChDsF,EAAU,UAAGA,SAAH,QAAiB,wCAGxBV,IACHU,EAAU,UAAGA,SAAH,QAAiB,2CAG7B,IAI4C,EAHnB,EADnBC,EAAcC,YAAUhB,GACzBA,GAAOe,EAGNjC,EAAwBiC,KAC1BD,EAAU,UAAGA,SAAH,QAAiB,6CAH7BA,EAAU,UAAGA,SAAH,QAAiB,4CAQ7B,MAA8B,CAAC7B,EAAiB1D,QAAME,OAAxB,UAAgC0D,EAAMA,aAAtC,aAAgC,EAAa8B,gBAAgB1B,IAApF2B,EAAP,KAAkBC,EAAlB,KAMA,OAJID,GAAaC,GAAYD,EAAUE,SAASD,KAC9CL,EAAa,2DAAqBK,EAASjF,SAASmF,WAG/CP,IACN,CAAClB,EAASL,EAAiBP,EAAYC,EAAkBmB,EAAcJ,EAAIb,EAAMA,QAEpF,OAAOrD,mBACL,iBAAO,CACLkD,aACAC,mBACAC,kBACA4B,aACA3B,QACAI,kBACAC,gBAEF,CAACR,EAAYC,EAAkBC,EAAiB4B,EAAY3B,EAAOI,EAAiBC,IAerE8B,GAIjB,OAHAC,qBAAU,WACR7B,EAAYC,KACX,CAACA,EAAUD,IACP,KAIM,SAAS8B,IACtB,OAAOnF,uBAAa0C,K,gMC/JhB0C,EAAS,CAAEC,UADa,CAACC,WAASC,GAAID,WAASE,KAGtC,SAASC,EACtBC,EACAC,EACA5F,GAIC,IAAD,EACM6F,EAAO,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAiB9F,SAAS+F,QAClCC,EAAYrC,oBAAZqC,QAER,EAAgFpG,mBAC9E,kBACEiG,IAAcxB,YAAUC,YACpB,QAACwB,QAAD,IAACA,OAAD,EAACA,EAAiB9F,SAAUE,GAC5B,CAACA,EAAD,OAAgB4F,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAiB9F,YACvC,CAAC8F,EAAiB5F,EAAe2F,IALnC,mBAAOI,EAAP,KAAmBC,EAAnB,KAQMC,EAAYC,iCAAuB,CACvCC,QAASJ,EACTK,SAAUJ,EACV3F,OAAQuF,EACRD,YACAU,qBAAqB,IAEjBC,EAAS5G,mBAAQ,kBAAMmG,GAAWC,GAAW,CAAED,UAASU,SAAUT,KAAW,CAACD,EAASC,IAE7F,EAA8BU,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAmDF,mBAGhD,CACDG,iBAAanG,EACboG,WAAOpG,IALT,0BAASmG,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,MAASC,EAA/B,KASA1B,qBAAU,WAAM,4CAId,4BAAA2B,EAAA,mEAEQb,IAAaK,EAFrB,gCAG2BS,6BAAmBd,EAAWK,EAAQjB,GAHjE,OAGY2B,EAHZ,OAIMH,EAAiB,CACfF,YAAaK,EAAOC,KACpBL,MAAOI,EAAOJ,QANtB,uDAUIC,EAAiB,CACfF,iBAAanG,EACboG,OAAO,IAZb,yBAeIF,GAAW,GAff,6EAJc,sBACdA,GAAW,GADG,mCAEdQ,KAoBC,CAACjB,EAAWK,IAEf,IAAMa,EAAQzH,mBACZ,kBAAM0H,YAAcrB,EAAYC,EAAaL,EAAWgB,KACxD,CAACZ,EAAYC,EAAaW,EAAahB,IAInC0B,EAAiB,UAAGC,YAAgC,OAACX,QAAD,IAACA,OAAD,EAACA,EAAaU,0BAAjD,QAAuE,KAE9F,OAAO3H,mBAAQ,WACb,IAAKqG,IAAeC,EAClB,MAAO,CACLhD,MAAOC,IAAWC,QAClBH,WAAOvC,GAIX,GAAIiG,IAAYE,EAEd,MAAO,CACL3D,MAAOC,IAAWsE,QAClBxE,WAAOvC,GAIX,IAAIgH,OAAchH,EAQlB,GAPImF,IAAcxB,YAAUC,aAAe4B,GAAeW,IACxDa,EAAcC,iBAAeC,cAAc1B,EAAaW,EAAYgB,QAElEhC,IAAcxB,YAAUE,cAAgB0B,GAAcY,IACxDa,EAAcC,iBAAeC,cAAc3B,EAAYY,EAAYgB,QAGjEf,IAAUY,IAAgBL,GAA0B,IAAjBA,EAAMS,SAAiB3B,EAC5D,MAAO,CACLjD,MAAOC,IAAW4E,eAClB9E,WAAOvC,GAIX,IACE,IAAMuC,EAAQ+E,YAAuBX,EAAOxB,EAAW0B,GACvD,MAAO,CAELrE,MAAOC,IAAW8E,MAClBhF,SAEF,MAAOiF,GAEP,OADAC,QAAQC,MAAM,kCAAmCF,GAC1C,CAAEhF,MAAOC,IAAWC,QAASH,WAAOvC,MAE5C,CAACuF,EAAYC,EAAaS,EAASE,EAAahB,EAAWiB,EAAOO,EAAOlB,EAAWoB,M,2JCtElF,SAASnD,EACdyB,EACAC,EACA5F,GAOA,MAAkDmI,YAChDzI,mBAAQ,iBAAM,CAACkG,EAAiB5F,KAAgB,CAAC4F,EAAiB5F,IAClE,KAFF,mBAAOoI,EAAP,KAAwBC,EAAxB,KAKMC,EAAiB5C,kBAAmCC,EAAWyC,EAAiBC,GAEtF,EA7DF,SACEtF,EACA4C,GAEA,GAAI5C,EAAO,CACT,GAAI4C,IAAcxB,YAAUC,YAC1B,MAAO,CAACrB,EAAMuB,YAAavB,EAAMuB,YAAYxE,SAAUiD,EAAMwB,aAAazE,UAE5E,GAAI6F,IAAcxB,YAAUE,aAC1B,MAAO,CAACtB,EAAMwB,aAAcxB,EAAMwB,aAAazE,SAAUiD,EAAMuB,YAAYxE,UAG/E,MAAO,MAACU,OAAWA,OAAWA,GAiD6C+H,CACzED,EAAevF,MACf4C,GAFF,mBAAO6C,EAAP,KAA8BC,EAA9B,KAAiDC,EAAjD,KAKMC,EACH/C,GAAmBwC,GAAmBxC,IAAoBwC,GAC1DxC,GAAmByC,GAA0BrI,GAAiBqI,IAA2BrI,EAEtF4I,EACJhD,GA/CJ,YAAqH,IAAD,MAAvFiD,EAAuF,EAAvFA,QAASC,EAA8E,EAA9EA,sBAAuBC,EAAuD,EAAvDA,oBAErDC,EAAeH,EAAQ,KAAR,UAAcA,EAAQ,UAAtB,aAAc,EAAYI,QAAQJ,EAAQ,KAGzDK,EACJJ,EAAsB,KAAtB,UACAA,EAAsB,UADtB,aACA,EAA0BK,OAAOL,EAAsB,MACvDC,EAAoB,KAFpB,UAGAA,EAAoB,UAHpB,aAGA,EAAwBI,OAAOJ,EAAoB,KAErD,OAAQC,IAAiBE,EAqCvBE,CAAkB,CAChBP,QAAS,CAACL,EAAuB5C,GACjCkD,sBAAuB,CAACL,EAAD,OAAoB7C,QAApB,IAAoBA,OAApB,EAAoBA,EAAiB9F,UAC5DiJ,oBAAqB,CAACL,EAAwBL,KAG5CgB,GAAeT,GAAWN,EAAetF,QAAUC,IAAW4E,eAG9DyB,EAAgBC,YACpB5D,EACA0D,EAAcjB,OAAkB5H,EAChC6I,EAAchB,OAAyB7H,GAGzC,OAAOd,mBACL,8BAAC,2BACK2J,EAAcC,EAAgBhB,GAC9BM,EAAU,CAAE5F,MAAOC,IAAWuG,SAAY,IAC1Cb,EAAa,CAAE3F,MAAOC,IAAWsE,SAAY,MAEnD,CAACoB,EAAYW,EAAeV,EAASN,EAAgBe","file":"static/js/13.ec160ee1.chunk.js","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useAtom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { pickAtom } from 'lib/state/atoms'\nimport { Field, independentFieldAtom, swapAtom } from 'lib/state/swap'\nimport { useCallback, useMemo } from 'react'\nexport { default as useSwapInfo } from './useSwapInfo'\n\nexport const amountAtom = pickAtom(swapAtom, 'amount')\n\nfunction otherField(field: Field) {\n  switch (field) {\n    case Field.INPUT:\n      return Field.OUTPUT\n      break\n    case Field.OUTPUT:\n      return Field.INPUT\n      break\n  }\n}\n\nexport function useSwitchSwapCurrencies() {\n  const update = useUpdateAtom(swapAtom)\n  return useCallback(() => {\n    update((swap) => {\n      const oldOutput = swap[Field.OUTPUT]\n      swap[Field.OUTPUT] = swap[Field.INPUT]\n      swap[Field.INPUT] = oldOutput\n      switch (swap.independentField) {\n        case Field.INPUT:\n          swap.independentField = Field.OUTPUT\n          break\n        case Field.OUTPUT:\n          swap.independentField = Field.INPUT\n          break\n      }\n    })\n  }, [update])\n}\n\nexport function useSwapCurrency(field: Field): [Currency | undefined, (currency?: Currency) => void] {\n  const atom = useMemo(() => pickAtom(swapAtom, field), [field])\n  const otherAtom = useMemo(() => pickAtom(swapAtom, otherField(field)), [field])\n  const [currency, setCurrency] = useAtom(atom)\n  const otherCurrency = useAtomValue(otherAtom)\n  const switchSwapCurrencies = useSwitchSwapCurrencies()\n  const setOrSwitchCurrency = useCallback(\n    (currency?: Currency) => {\n      if (currency === otherCurrency) {\n        switchSwapCurrencies()\n      } else {\n        setCurrency(currency)\n      }\n    },\n    [otherCurrency, setCurrency, switchSwapCurrencies]\n  )\n  return [currency, setOrSwitchCurrency]\n}\n\nexport function useSwapAmount(field: Field): [string | undefined, (amount: string) => void] {\n  const amount = useAtomValue(amountAtom)\n  const independentField = useAtomValue(independentFieldAtom)\n  const value = useMemo(() => (independentField === field ? amount : undefined), [amount, independentField, field])\n  const updateSwap = useUpdateAtom(swapAtom)\n  const updateAmount = useCallback(\n    (amount: string) =>\n      updateSwap((swap) => {\n        swap.independentField = field\n        swap.amount = amount\n      }),\n    [field, updateSwap]\n  )\n  return [value, updateAmount]\n}\n\n// check if any amount has been entered by user\nexport function useIsAmountPopulated() {\n  return Boolean(useAtomValue(amountAtom))\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { atom } from 'jotai'\nimport { atomWithImmer } from 'jotai/immer'\nimport { pickAtom } from 'lib/state/atoms'\n\nexport enum Field {\n  INPUT = 'INPUT',\n  OUTPUT = 'OUTPUT',\n}\n\nexport interface Swap {\n  independentField: Field\n  amount: string\n  [Field.INPUT]?: Currency\n  [Field.OUTPUT]?: Currency\n}\n\nexport const swapAtom = atomWithImmer<Swap>({\n  independentField: Field.INPUT,\n  amount: '',\n  [Field.INPUT]: nativeOnChain(SupportedChainId.AVALANCHE),\n})\n\nexport const independentFieldAtom = pickAtom(swapAtom, 'independentField')\n\n// If set to a transaction hash, that transaction will display in a status dialog.\nexport const displayTxHashAtom = atom<string | undefined>(undefined)\n\nexport const feeOptionsAtom = atom<FeeOptions | undefined>(undefined)\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Draft } from 'immer'\nimport { atom, WritableAtom } from 'jotai'\nimport { withImmer } from 'jotai/immer'\n\n/**\n * Creates a derived atom whose value is the picked object property.\n * By default, the setter acts as a primitive atom's, changing the original atom.\n * A custom setter may also be passed, which uses an Immer Draft so that it may be mutated directly.\n */\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter?: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key] = (draft, update) =>\n    update as Draft<Value>[Key]\n): WritableAtom<Value[Key], Update> {\n  return atom(\n    (get) => get(anAtom)[key],\n    (get, set, update: Update) =>\n      set(withImmer(anAtom), (value) => {\n        const derived = setter(value[key], update)\n        value[key] = derived\n      })\n  )\n}\n\n/** Sets a togglable atom to invert its state at the next render. */\nexport function setTogglable(draft: boolean) {\n  return !draft\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { atomWithReset } from 'jotai/utils'\n\nimport { pickAtom, setTogglable } from './atoms'\n\nexport const MAX_VALID_SLIPPAGE = new Percent(1, 2)\nexport const MIN_HIGH_SLIPPAGE = new Percent(1, 100)\n\ninterface Settings {\n  maxSlippage: Percent | 'auto' // auto will cause slippage to resort to default calculation\n  transactionTtl: number | undefined\n  mockTogglable: boolean\n  clientSideRouter: boolean // whether to use the client-side router or query the remote API\n}\n\nconst initialSettings: Settings = {\n  maxSlippage: 'auto',\n  transactionTtl: undefined,\n  mockTogglable: true,\n  clientSideRouter: true,\n}\n\nexport const settingsAtom = atomWithReset(initialSettings)\nexport const maxSlippageAtom = pickAtom(settingsAtom, 'maxSlippage')\nexport const transactionTtlAtom = pickAtom(settingsAtom, 'transactionTtl')\nexport const mockTogglableAtom = pickAtom(settingsAtom, 'mockTogglable', setTogglable)\nexport const clientSideRouterAtom = pickAtom(settingsAtom, 'clientSideRouter')\n","import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { atom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { useCurrencyBalances } from 'lib/hooks/useCurrencyBalance'\nimport { maxSlippageAtom } from 'lib/state/settings'\nimport { feeOptionsAtom, Field, swapAtom } from 'lib/state/swap'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useEffect, useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { isAddress } from '../../../utils'\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport { useBestTrade } from './useBestTrade'\n\ninterface SwapInfo {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  currencyAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  trade: {\n    trade?: InterfaceTrade<Currency, Currency, TradeType>\n    state: TradeState\n  }\n  allowedSlippage: Percent\n  feeOptions: FeeOptions | undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: { [address: string]: true } = {\n  '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10': true, // v2 factory\n  '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106': true, // v2 router 01\n  '0x60aE616a2155Ee3d9A68541Ba4544862310933d4': true, // v2 router 02\n}\n\n// from the current swap inputs, compute the best trade and return it.\nfunction useComputeSwapInfo(): SwapInfo {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    amount,\n    [Field.INPUT]: inputCurrency,\n    [Field.OUTPUT]: outputCurrency,\n  } = useAtomValue(swapAtom)\n\n  const feeOptions = useAtomValue(feeOptionsAtom)\n\n  const to = account\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency])\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = useMemo(\n    () => tryParseCurrencyAmount(amount, (isExactIn ? inputCurrency : outputCurrency) ?? undefined),\n    [inputCurrency, isExactIn, outputCurrency, amount]\n  )\n\n  //@TODO(ianlapham): this would eventually be replaced with routing api logic.\n  const trade = useBestTrade(\n    isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    parsedAmount,\n    (isExactIn ? outputCurrency : inputCurrency) ?? undefined\n  )\n\n  const currencies = useMemo(\n    () => ({\n      [Field.INPUT]: inputCurrency ?? undefined,\n      [Field.OUTPUT]: outputCurrency ?? undefined,\n    }),\n    [inputCurrency, outputCurrency]\n  )\n\n  const currencyBalances = useMemo(\n    () => ({\n      [Field.INPUT]: relevantTokenBalances[0],\n      [Field.OUTPUT]: relevantTokenBalances[1],\n    }),\n    [relevantTokenBalances]\n  )\n\n  const currencyAmounts = useMemo(\n    () => ({\n      [Field.INPUT]: trade.trade?.inputAmount,\n      [Field.OUTPUT]: trade.trade?.outputAmount,\n    }),\n    [trade.trade?.inputAmount, trade.trade?.outputAmount]\n  )\n\n  /*\n   * If user has enabled 'auto' slippage, use the default best slippage calculated\n   * based on the trade. If user has entered custom slippage, use that instead.\n   */\n  const autoSlippageTolerance = useAutoSlippageTolerance(trade.trade)\n  const maxSlippage = useAtomValue(maxSlippageAtom)\n  const allowedSlippage = useMemo(\n    () => (maxSlippage === 'auto' ? autoSlippageTolerance : maxSlippage),\n    [autoSlippageTolerance, maxSlippage]\n  )\n\n  const inputError = useMemo(() => {\n    let inputError: ReactNode | undefined\n\n    if (!account) {\n      inputError = <Trans>Connect Wallet</Trans>\n    }\n\n    if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n      inputError = inputError ?? <Trans>Select token</Trans>\n    }\n\n    if (!parsedAmount) {\n      inputError = inputError ?? <Trans>Enter an amount</Trans>\n    }\n\n    const formattedTo = isAddress(to)\n    if (!to || !formattedTo) {\n      inputError = inputError ?? <Trans>Enter a recipient</Trans>\n    } else {\n      if (BAD_RECIPIENT_ADDRESSES[formattedTo]) {\n        inputError = inputError ?? <Trans>Invalid recipient</Trans>\n      }\n    }\n\n    // compare input balance to max input based on version\n    const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], trade.trade?.maximumAmountIn(allowedSlippage)]\n\n    if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n      inputError = <Trans>Insufficient {amountIn.currency.symbol} balance</Trans>\n    }\n\n    return inputError\n  }, [account, allowedSlippage, currencies, currencyBalances, parsedAmount, to, trade.trade])\n\n  return useMemo(\n    () => ({\n      currencies,\n      currencyBalances,\n      currencyAmounts,\n      inputError,\n      trade,\n      allowedSlippage,\n      feeOptions,\n    }),\n    [currencies, currencyBalances, currencyAmounts, inputError, trade, allowedSlippage, feeOptions]\n  )\n}\n\nconst swapInfoAtom = atom<SwapInfo>({\n  currencies: {},\n  currencyBalances: {},\n  currencyAmounts: {},\n  trade: { state: TradeState.INVALID },\n  allowedSlippage: new Percent(0),\n  feeOptions: undefined,\n})\n\nexport function SwapInfoUpdater() {\n  const setSwapInfo = useUpdateAtom(swapInfoAtom)\n  const swapInfo = useComputeSwapInfo()\n  useEffect(() => {\n    setSwapInfo(swapInfo)\n  }, [swapInfo, setSwapInfo])\n  return null\n}\n\n/** Requires that SwapInfoUpdater be installed in the DOM tree. **/\nexport default function useSwapInfo(): SwapInfo {\n  return useAtomValue(swapInfoAtom)\n}\n","import { Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useUSDCPrice'\nimport { useEffect, useMemo, useState } from 'react'\nimport { GetQuoteResult, InterfaceTrade, TradeState } from 'state/routing/types'\nimport { computeRoutes, transformRoutesToTrade } from 'state/routing/utils'\n\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport { getClientSideQuote } from './clientSideSmartOrderRouter'\nimport { useRoutingAPIArguments } from './useRoutingAPIArguments'\n\nconst protocols: Protocol[] = [Protocol.V2, Protocol.V3]\nconst config = { protocols }\n\nexport default function useClientSideSmartOrderRouterTrade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined\n} {\n  const chainId = amountSpecified?.currency.chainId\n  const { library } = useActiveWeb3React()\n\n  const [currencyIn, currencyOut]: [Currency | undefined, Currency | undefined] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [amountSpecified, otherCurrency, tradeType]\n  )\n\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n    useClientSideRouter: true,\n  })\n  const params = useMemo(() => chainId && library && { chainId, provider: library }, [chainId, library])\n\n  const [loading, setLoading] = useState(false)\n  const [{ quoteResult, error }, setFetchedResult] = useState<{\n    quoteResult: GetQuoteResult | undefined\n    error: unknown\n  }>({\n    quoteResult: undefined,\n    error: undefined,\n  })\n\n  // When arguments update, make a new call to SOR for updated quote\n  useEffect(() => {\n    setLoading(true)\n    fetchQuote()\n\n    async function fetchQuote() {\n      try {\n        if (queryArgs && params) {\n          const result = await getClientSideQuote(queryArgs, params, config)\n          setFetchedResult({\n            quoteResult: result.data,\n            error: result.error,\n          })\n        }\n      } catch (e) {\n        setFetchedResult({\n          quoteResult: undefined,\n          error: true,\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n  }, [queryArgs, params])\n\n  const route = useMemo(\n    () => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult),\n    [currencyIn, currencyOut, quoteResult, tradeType]\n  )\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = useStablecoinAmountFromFiatValue(quoteResult?.gasUseEstimateUSD) ?? null\n\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (loading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    let otherAmount = undefined\n    if (tradeType === TradeType.EXACT_INPUT && currencyOut && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote)\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT && currencyIn && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote)\n    }\n\n    if (error || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, gasUseEstimateUSD)\n      return {\n        // always return VALID regardless of isFetching status\n        state: TradeState.VALID,\n        trade,\n      }\n    } catch (e) {\n      console.debug('transformRoutesToTrade failed: ', e)\n      return { state: TradeState.INVALID, trade: undefined }\n    }\n  }, [currencyIn, currencyOut, loading, quoteResult, tradeType, error, route, queryArgs, gasUseEstimateUSD])\n}\n","import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useClientSideV3Trade } from 'hooks/useClientSideV3Trade'\nimport useDebounce from 'hooks/useDebounce'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport useClientSideSmartOrderRouterTrade from '../routing/useClientSideSmartOrderRouterTrade'\n\n/**\n * Returns the currency amount from independent field, currency from independent field,\n * and currency from dependent field.\n */\nfunction getTradeInputs(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  tradeType: TradeType\n): [CurrencyAmount<Currency> | undefined, Currency | undefined, Currency | undefined] {\n  if (trade) {\n    if (tradeType === TradeType.EXACT_INPUT) {\n      return [trade.inputAmount, trade.inputAmount.currency, trade.outputAmount.currency]\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT) {\n      return [trade.outputAmount, trade.outputAmount.currency, trade.inputAmount.currency]\n    }\n  }\n  return [undefined, undefined, undefined]\n}\n\ninterface TradeDebouncingParams {\n  amounts: [CurrencyAmount<Currency> | undefined, CurrencyAmount<Currency> | undefined]\n  indepdenentCurrencies: [Currency | undefined, Currency | undefined]\n  dependentCurrencies: [Currency | undefined, Currency | undefined]\n}\n\n/**\n * Returns wether debounced values are stale compared to latest values from trade.\n */\nfunction isTradeDebouncing({ amounts, indepdenentCurrencies, dependentCurrencies }: TradeDebouncingParams): boolean {\n  // Ensure that amount from user input matches latest trade.\n  const amountsMatch = amounts[0] && amounts[1]?.equalTo(amounts[0])\n\n  // Ensure active swap currencies match latest trade.\n  const currenciesMatch =\n    indepdenentCurrencies[0] &&\n    indepdenentCurrencies[1]?.equals(indepdenentCurrencies[0]) &&\n    dependentCurrencies[0] &&\n    dependentCurrencies[1]?.equals(dependentCurrencies[0])\n\n  return !amountsMatch || !currenciesMatch\n}\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(\n  tradeType: TradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n} {\n  // Debounce is used to prevent excessive requests to SOR, as it is data intensive.\n  // This helps provide a \"syncing\" state the UI can reference for loading animations.\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce(\n    useMemo(() => [amountSpecified, otherCurrency], [amountSpecified, otherCurrency]),\n    200\n  )\n\n  const clientSORTrade = useClientSideSmartOrderRouterTrade(tradeType, debouncedAmount, debouncedOtherCurrency)\n\n  const [amountFromLatestTrade, currencyFromTrade, otherCurrencyFromTrade] = getTradeInputs(\n    clientSORTrade.trade,\n    tradeType\n  )\n\n  const debouncing =\n    (amountSpecified && debouncedAmount && amountSpecified !== debouncedAmount) ||\n    (amountSpecified && debouncedOtherCurrency && otherCurrency && debouncedOtherCurrency !== otherCurrency)\n\n  const syncing =\n    amountSpecified &&\n    isTradeDebouncing({\n      amounts: [amountFromLatestTrade, amountSpecified],\n      indepdenentCurrencies: [currencyFromTrade, amountSpecified?.currency],\n      dependentCurrencies: [otherCurrencyFromTrade, debouncedOtherCurrency],\n    })\n\n  const useFallback = !syncing && clientSORTrade.state === TradeState.NO_ROUTE_FOUND\n\n  // Use a simple client side logic as backup if SOR is not available.\n  const fallbackTrade = useClientSideV3Trade(\n    tradeType,\n    useFallback ? debouncedAmount : undefined,\n    useFallback ? debouncedOtherCurrency : undefined\n  )\n\n  return useMemo(\n    () => ({\n      ...(useFallback ? fallbackTrade : clientSORTrade),\n      ...(syncing ? { state: TradeState.SYNCING } : {}),\n      ...(debouncing ? { state: TradeState.LOADING } : {}),\n    }),\n    [debouncing, fallbackTrade, syncing, clientSORTrade, useFallback]\n  )\n}\n"],"sourceRoot":""}