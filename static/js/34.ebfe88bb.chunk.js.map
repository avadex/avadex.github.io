{"version":3,"sources":["lib/theme/index.tsx","lib/components/Button.tsx","lib/theme/styled.ts","lib/theme/dynamic.tsx","lib/theme/layer.ts","lib/theme/type.tsx"],"names":["styled","brand","stateColors","active","success","warning","error","lightTheme","accent","container","module","interactive","outline","dialog","onAccent","primary","secondary","hint","onInteractive","currentColor","darkThemeAccent","darkTheme","readableColor","defaultTheme","borderRadius","fontFamily","fontFamilyVariable","fontFamilyCode","tokenColorExtraction","useSystemTheme","prefersDark","window","matchMedia","useState","matches","systemTheme","setSystemTheme","addEventListener","e","ThemeContext","createContext","toComputedTheme","ThemeProvider","theme","children","contextTheme","useContext","value","useMemo","Provider","Number","isFinite","Math","min","max","onHover","color","transparentize","mix","BaseButton","button","transparentButton","defaultColor","TextButton","SecondaryButton","IconButton","Icon","icon","iconProps","props","css","styledCss","keyframes","styledKeyframes","useTheme","useStyled","ThemedProvider","StyledProvider","black","white","light","dark","getDynamicTheme","colors","opacify","DynamicThemeProvider","accessibleColor","AAscore","hex","contrastify","darken","lighten","getAccessibleColor","style","Layer","TextWrapper","Text","lineHeight","TransitionTextWrapper","H1","className","fontSize","fontWeight","H2","H3","Subhead1","Subhead2","Body1","Body2","Caption","Badge","ButtonLarge","ButtonMedium","ButtonSmall","TransitionButton","buttonSize","small","medium","large","Code"],"mappings":"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","file":"static/js/34.ebfe88bb.chunk.js","sourcesContent":["import 'lib/assets/fonts.scss'\nimport '@fontsource/ibm-plex-mono/400.css'\nimport '@fontsource/inter/variable.css'\nimport '@fontsource/inter/400.css'\nimport '@fontsource/inter/500.css'\nimport '@fontsource/inter/600.css'\n\nimport { mix, readableColor, transparentize } from 'polished'\nimport { createContext, ReactNode, useContext, useMemo, useState } from 'react'\n\nimport styled, { ThemedProvider } from './styled'\nimport { Colors, ComputedTheme, Theme } from './theme'\n\nexport default styled\nexport * from './dynamic'\nexport * from './layer'\nexport * from './styled'\nexport * from './theme'\nexport * as ThemedText from './type'\n\nexport const brand = 'hsl(331.3, 100%, 50%)'\n\nconst stateColors = {\n  active: 'hsl(215, 79%, 51.4%)',\n  success: 'hsl(145, 63.4%, 41.8%)',\n  warning: 'hsl(43, 89.9%, 53.5%)',\n  error: 'hsl(0, 98%, 62.2%)',\n}\n\nexport const lightTheme: Colors = {\n  // surface\n  accent: brand,\n  container: 'hsl(220, 23%, 97.5%)',\n  module: 'hsl(231, 14%, 90%)',\n  interactive: 'hsl(229, 13%, 83%)',\n  outline: 'hsl(225, 7%, 78%)',\n  dialog: 'hsl(0, 0%, 100%)',\n\n  // text\n  onAccent: 'hsl(0, 0%, 100%)',\n  primary: 'hsl(0, 0%, 0%)',\n  secondary: 'hsl(227, 10%, 37.5%)',\n  hint: 'hsl(224, 9%, 57%)',\n  onInteractive: 'hsl(0, 0%, 0%)',\n\n  // state\n  ...stateColors,\n\n  currentColor: 'currentColor',\n}\n\nconst darkThemeAccent = 'hsl(215, 79%, 51.4%)'\n\nexport const darkTheme: Colors = {\n  // surface\n  accent: darkThemeAccent,\n  container: 'hsl(220, 10.7%, 11%)',\n  module: 'hsl(222, 10.2%, 19.2%)',\n  interactive: 'hsl(224, 10.5%, 281%)',\n  outline: 'hsl(227, 10%, 37.5%)',\n  dialog: 'hsl(0, 0%, 0%)',\n\n  // text\n  onAccent: readableColor(darkThemeAccent),\n  primary: 'hsl(0, 0%, 100%)',\n  secondary: 'hsl(224, 8.7%, 57.1%)',\n  hint: 'hsl(225, 10%, 47.1%)',\n  onInteractive: 'hsl(0, 0%, 100%)',\n\n  // state\n  ...stateColors,\n\n  currentColor: 'currentColor',\n}\n\nexport const defaultTheme = {\n  borderRadius: 1,\n  fontFamily: '\"Inter\", sans-serif',\n  fontFamilyVariable: '\"InterVariable\", sans-serif',\n  fontFamilyCode: 'IBM Plex Mono',\n  tokenColorExtraction: false,\n  ...lightTheme,\n}\n\nexport function useSystemTheme() {\n  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)')\n  const [systemTheme, setSystemTheme] = useState(prefersDark.matches ? darkTheme : lightTheme)\n  prefersDark.addEventListener('change', (e) => {\n    setSystemTheme(e.matches ? darkTheme : lightTheme)\n  })\n  return systemTheme\n}\n\nconst ThemeContext = createContext<ComputedTheme>(toComputedTheme(defaultTheme))\n\ninterface ThemeProviderProps {\n  theme?: Theme\n  children: ReactNode\n}\n\nexport function ThemeProvider({ theme, children }: ThemeProviderProps) {\n  const contextTheme = useContext(ThemeContext)\n  const value = useMemo(() => {\n    return toComputedTheme({\n      ...contextTheme,\n      ...theme,\n    } as Required<Theme>)\n  }, [contextTheme, theme])\n  return (\n    <ThemeContext.Provider value={value}>\n      <ThemedProvider theme={value}>{children}</ThemedProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nfunction toComputedTheme(theme: Required<Theme>): ComputedTheme {\n  return {\n    ...theme,\n    borderRadius: clamp(\n      Number.isFinite(theme.borderRadius) ? (theme.borderRadius as number) : theme.borderRadius ? 1 : 0\n    ),\n    onHover: (color: string) =>\n      color === theme.primary ? transparentize(0.4, theme.primary) : mix(0.16, theme.primary, color),\n  }\n\n  function clamp(value: number) {\n    return Math.min(Math.max(value, 0), 1)\n  }\n}\n","import { Icon } from 'lib/icons'\nimport styled, { Color } from 'lib/theme'\nimport { ComponentProps } from 'react'\n\nexport const BaseButton = styled.button`\n  background-color: transparent;\n  border: none;\n  border-radius: 0.5em;\n  color: currentColor;\n  cursor: pointer;\n  font-size: inherit;\n  font-weight: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0;\n\n  :disabled {\n    cursor: initial;\n    filter: saturate(0) opacity(0.4);\n  }\n`\n\nexport default styled(BaseButton)<{ color?: Color }>`\n  color: ${({ color = 'interactive', theme }) => color === 'interactive' && theme.onInteractive};\n\n  :enabled {\n    background-color: ${({ color = 'interactive', theme }) => theme[color]};\n  }\n\n  :enabled:hover {\n    background-color: ${({ color = 'interactive', theme }) => theme.onHover(theme[color])};\n  }\n\n  :disabled {\n    border: 1px solid ${({ theme }) => theme.outline};\n    color: ${({ theme }) => theme.secondary};\n    cursor: initial;\n  }\n`\n\nconst transparentButton = (defaultColor: Color) => styled(BaseButton)<{ color?: Color }>`\n  color: ${({ color = defaultColor, theme }) => theme[color]};\n\n  :enabled:hover {\n    color: ${({ color = defaultColor, theme }) => theme.onHover(theme[color])};\n  }\n`\n\nexport const TextButton = transparentButton('accent')\n\nconst SecondaryButton = transparentButton('secondary')\n\ninterface IconButtonProps {\n  icon: Icon\n  iconProps?: ComponentProps<Icon>\n}\n\nexport function IconButton({ icon: Icon, iconProps, ...props }: IconButtonProps & ComponentProps<typeof BaseButton>) {\n  return (\n    <SecondaryButton {...props}>\n      <Icon {...iconProps} />\n    </SecondaryButton>\n  )\n}\n","/* eslint-disable no-restricted-imports */\nimport styled, {\n  css as styledCss,\n  keyframes as styledKeyframes,\n  ThemedBaseStyledInterface,\n  ThemedCssFunction,\n  ThemeProvider as StyledProvider,\n  ThemeProviderComponent,\n  useTheme as useStyled,\n} from 'styled-components/macro'\n\nimport { ComputedTheme } from './theme'\n\nexport default styled as unknown as ThemedBaseStyledInterface<ComputedTheme>\nexport const css = styledCss as unknown as ThemedCssFunction<ComputedTheme>\nexport const keyframes = styledKeyframes\nexport const useTheme = useStyled as unknown as () => ComputedTheme\nexport const ThemedProvider = StyledProvider as unknown as ThemeProviderComponent<ComputedTheme>\n","import { darken, lighten, opacify, transparentize } from 'polished'\nimport { readableColor } from 'polished'\nimport { ReactNode, useMemo } from 'react'\nimport { hex } from 'wcag-contrast'\n\nimport { ThemedProvider, useTheme } from './styled'\nimport { Colors, ComputedTheme } from './theme'\n\ntype DynamicColors = Pick<Colors, 'interactive' | 'outline' | 'primary' | 'secondary' | 'onInteractive'>\n\nconst black = 'hsl(0, 0%, 0%)'\nconst white = 'hsl(0, 0%, 100%)'\n\nconst light: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.54, black),\n  outline: transparentize(1 - 0.24, black),\n\n  // text\n  primary: black,\n  secondary: transparentize(1 - 0.64, black),\n  onInteractive: white,\n}\n\nconst dark: DynamicColors = {\n  // surface\n  interactive: transparentize(1 - 0.48, white),\n  outline: transparentize(1 - 0.12, white),\n\n  // text\n  primary: white,\n  secondary: transparentize(1 - 0.6, white),\n  onInteractive: black,\n}\n\nexport function getDynamicTheme(theme: ComputedTheme, color: string): ComputedTheme {\n  const colors = { light, dark }[readableColor(color, 'light', 'dark', false) as 'light' | 'dark']\n  return {\n    ...theme,\n    ...colors,\n    module: color,\n    onHover: (color: string) => (color === colors.primary ? transparentize(0.4, colors.primary) : opacify(0.25, color)),\n  }\n}\n\nfunction getAccessibleColor(theme: ComputedTheme, color: string) {\n  const dynamic = getDynamicTheme(theme, color)\n  let { primary } = dynamic\n  let AAscore = hex(color, primary)\n  const contrastify = hex(color, '#000') > hex(color, '#fff') ? darken : lighten\n  while (AAscore < 3) {\n    color = contrastify(0.005, color)\n    primary = getDynamicTheme(theme, color).primary\n    AAscore = hex(color, primary)\n  }\n  return color\n}\n\ninterface DynamicThemeProviderProps {\n  color?: string\n  children: ReactNode\n}\n\nexport function DynamicThemeProvider({ color, children }: DynamicThemeProviderProps) {\n  const theme = useTheme()\n  const value = useMemo(() => {\n    if (!color) {\n      return theme\n    }\n\n    const accessibleColor = getAccessibleColor(theme, color)\n    return getDynamicTheme(theme, accessibleColor)\n  }, [theme, color])\n  return (\n    <ThemedProvider theme={value}>\n      <div style={{ color: value.primary }}>{children}</div>\n    </ThemedProvider>\n  )\n}\n","export enum Layer {\n  OVERLAY = 100,\n  DIALOG = 1000,\n  TOOLTIP = 2000,\n}\n","import { Text, TextProps as TextPropsWithCss } from 'rebass'\n\nimport styled, { useTheme } from './styled'\nimport { Color } from './theme'\n\ntype TextProps = Omit<TextPropsWithCss, 'css' | 'color'> & { color?: Color }\n\nconst TextWrapper = styled(Text)<{ color?: Color; lineHeight: string }>`\n  color: ${({ color = 'currentColor', theme }) => theme[color as Color]};\n  // Avoid the need for placeholders by setting min-height to line-height.\n  min-height: ${({ lineHeight }) => lineHeight};\n`\n\nconst TransitionTextWrapper = styled(TextWrapper)`\n  transition: font-size 0.25s ease-out, line-height 0.25s ease-out;\n`\n\nexport function H1(props: TextProps) {\n  return <TextWrapper className=\"headline headline-1\" fontSize={36} fontWeight={400} lineHeight=\"36px\" {...props} />\n}\n\nexport function H2(props: TextProps) {\n  return <TextWrapper className=\"headline headline-2\" fontSize={24} fontWeight={400} lineHeight=\"32px\" {...props} />\n}\n\nexport function H3(props: TextProps) {\n  return <TextWrapper className=\"headline headline-3\" fontSize={20} fontWeight={400} lineHeight=\"20px\" {...props} />\n}\n\nexport function Subhead1(props: TextProps) {\n  return <TextWrapper className=\"subhead subhead-1\" fontSize={16} fontWeight={500} lineHeight=\"16px\" {...props} />\n}\n\nexport function Subhead2(props: TextProps) {\n  return <TextWrapper className=\"subhead subhead-2\" fontSize={14} fontWeight={500} lineHeight=\"14px\" {...props} />\n}\n\nexport function Body1(props: TextProps) {\n  return <TextWrapper className=\"body body-1\" fontSize={16} fontWeight={400} lineHeight=\"24px\" {...props} />\n}\n\nexport function Body2(props: TextProps) {\n  return <TextWrapper className=\"body body-2\" fontSize={14} fontWeight={400} lineHeight=\"20px\" {...props} />\n}\n\nexport function Caption(props: TextProps) {\n  return <TextWrapper className=\"caption\" fontSize={12} fontWeight={400} lineHeight=\"16px\" {...props} />\n}\n\nexport function Badge(props: TextProps) {\n  return <TextWrapper className=\"badge\" fontSize={8} fontWeight={600} lineHeight=\"8px\" {...props} />\n}\n\nexport function ButtonLarge(props: TextProps) {\n  return <TextWrapper className=\"button button-large\" fontSize={20} fontWeight={500} lineHeight=\"20px\" {...props} />\n}\n\nexport function ButtonMedium(props: TextProps) {\n  return <TextWrapper className=\"button button-medium\" fontSize={16} fontWeight={500} lineHeight=\"16px\" {...props} />\n}\n\nexport function ButtonSmall(props: TextProps) {\n  return <TextWrapper className=\"button button-small\" fontSize={14} fontWeight={500} lineHeight=\"14px\" {...props} />\n}\n\nexport function TransitionButton(props: TextProps & { buttonSize: 'small' | 'medium' | 'large' }) {\n  const className = `button button-${props.buttonSize}`\n  const fontSize = { small: 14, medium: 16, large: 20 }[props.buttonSize]\n  const lineHeight = `${fontSize}px`\n  return (\n    <TransitionTextWrapper\n      className={className}\n      fontSize={fontSize}\n      fontWeight={500}\n      lineHeight={lineHeight}\n      {...props}\n    />\n  )\n}\n\nexport function Code(props: TextProps) {\n  const { fontFamilyCode } = useTheme()\n  return (\n    <TextWrapper\n      className=\"code\"\n      fontSize={12}\n      fontWeight={400}\n      lineHeight=\"16px\"\n      fontFamily={fontFamilyCode}\n      {...props}\n    />\n  )\n}\n"],"sourceRoot":""}