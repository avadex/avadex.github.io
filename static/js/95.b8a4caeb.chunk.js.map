{"version":3,"sources":["lib/utils/uriToHttp.test.ts"],"names":["describe","it","expect","uriToHttp","toEqual"],"mappings":"6HAAA,oBAEAA,SAAS,aAAa,WACpBC,GAAG,mCAAmC,WACpCC,OAAOC,kBAAU,mBAAmBC,QAAQ,OAE9CH,GAAG,gCAAgC,WACjCC,OAAOC,kBAAU,oBAAoBC,QAAQ,CAAC,mBAAoB,uBAEpEH,GAAG,2BAA2B,WAC5BC,OAAOC,kBAAU,qBAAqBC,QAAQ,CAAC,wBAEjDH,GAAG,0CAA0C,WAC3CC,OAAOC,kBAAU,0DAA0DC,QAAQ,CACjF,mFACA,4EAGJH,GAAG,0CAA0C,WAC3CC,OAAOC,kBAAU,2BAA2BC,QAAQ,CAClD,oDACA,6CAGJH,GAAG,0CAA0C,WAC3CC,OAAOC,kBAAU,cAAcC,QAAQ","file":"static/js/95.b8a4caeb.chunk.js","sourcesContent":["import uriToHttp from './uriToHttp'\n\ndescribe('uriToHttp', () => {\n  it('returns .eth.link for ens names', () => {\n    expect(uriToHttp('t2crtokens.eth')).toEqual([])\n  })\n  it('returns https first for http', () => {\n    expect(uriToHttp('http://test.com')).toEqual(['https://test.com', 'http://test.com'])\n  })\n  it('returns https for https', () => {\n    expect(uriToHttp('https://test.com')).toEqual(['https://test.com'])\n  })\n  it('returns ipfs gateways for ipfs:// urls', () => {\n    expect(uriToHttp('ipfs://QmV8AfDE8GFSGQvt3vck8EwAzsPuNTmtP8VcQJE3qxRPaZ')).toEqual([\n      'https://cloudflare-ipfs.com/ipfs/QmV8AfDE8GFSGQvt3vck8EwAzsPuNTmtP8VcQJE3qxRPaZ/',\n      'https://ipfs.io/ipfs/QmV8AfDE8GFSGQvt3vck8EwAzsPuNTmtP8VcQJE3qxRPaZ/',\n    ])\n  })\n  it('returns ipns gateways for ipns:// urls', () => {\n    expect(uriToHttp('ipns://app.uniswap.org')).toEqual([\n      'https://cloudflare-ipfs.com/ipns/app.uniswap.org/',\n      'https://ipfs.io/ipns/app.uniswap.org/',\n    ])\n  })\n  it('returns empty array for invalid scheme', () => {\n    expect(uriToHttp('blah:test')).toEqual([])\n  })\n})\n"],"sourceRoot":""}