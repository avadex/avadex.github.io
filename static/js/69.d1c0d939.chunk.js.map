{"version":3,"sources":["lib/state/atoms.ts","lib/state/settings.ts"],"names":["pickAtom","anAtom","key","setter","draft","update","atom","get","set","withImmer","value","derived","setTogglable","MAX_VALID_SLIPPAGE","Percent","MIN_HIGH_SLIPPAGE","initialSettings","autoSlippage","maxSlippage","undefined","transactionTtl","mockTogglable","clientSideRouter","settingsAtom","atomWithReset","autoSlippageAtom","maxSlippageAtom","transactionTtlAtom","mockTogglableAtom","clientSideRouterAtom"],"mappings":"gIAAA,oHAoBO,SAASA,EACdC,EACAC,GAGmC,IAFnCC,EAEkC,uDAFwC,SAACC,EAAOC,GAAR,OACxEA,GAEF,OAAOC,gBACL,SAACC,GAAD,OAASA,EAAIN,GAAQC,MACrB,SAACK,EAAKC,EAAKH,GAAX,OACEG,EAAIC,oBAAUR,IAAS,SAACS,GACtB,IAAMC,EAAUR,EAAOO,EAAMR,GAAMG,GACnCK,EAAMR,GAAOS,QAMd,SAASC,EAAaR,GAC3B,OAAQA,I,iCCtCV,ibAKaS,EAAqB,IAAIC,UAAQ,EAAG,GACpCC,EAAoB,IAAID,UAAQ,EAAG,KAU1CE,EAA4B,CAChCC,cAAc,EACdC,iBAAaC,EACbC,oBAAgBD,EAChBE,eAAe,EACfC,kBAAkB,GAGPC,EAAeC,wBAAcR,GAC7BS,EAAmBzB,mBAASuB,EAAc,gBAC1CG,EAAkB1B,mBAASuB,EAAc,eACzCI,EAAqB3B,mBAASuB,EAAc,kBAC5CK,EAAoB5B,mBAASuB,EAAc,gBAAiBX,gBAC5DiB,EAAuB7B,mBAASuB,EAAc","file":"static/js/69.d1c0d939.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { Draft } from 'immer'\nimport { atom, WritableAtom } from 'jotai'\nimport { withImmer } from 'jotai/immer'\n\n/**\n * Creates a derived atom whose value is the picked object property.\n * By default, the setter acts as a primitive atom's, changing the original atom.\n * A custom setter may also be passed, which uses an Immer Draft so that it may be mutated directly.\n */\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter?: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key] = (draft, update) =>\n    update as Draft<Value>[Key]\n): WritableAtom<Value[Key], Update> {\n  return atom(\n    (get) => get(anAtom)[key],\n    (get, set, update: Update) =>\n      set(withImmer(anAtom), (value) => {\n        const derived = setter(value[key], update)\n        value[key] = derived\n      })\n  )\n}\n\n/** Sets a togglable atom to invert its state at the next render. */\nexport function setTogglable(draft: boolean) {\n  return !draft\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { atomWithReset } from 'jotai/utils'\n\nimport { pickAtom, setTogglable } from './atoms'\n\nexport const MAX_VALID_SLIPPAGE = new Percent(1, 2)\nexport const MIN_HIGH_SLIPPAGE = new Percent(1, 100)\n\ninterface Settings {\n  autoSlippage: boolean // if true, slippage will use the default calculation\n  maxSlippage: number | undefined // expressed as a percent\n  transactionTtl: number | undefined\n  mockTogglable: boolean\n  clientSideRouter: boolean // whether to use the client-side router or query the remote API\n}\n\nconst initialSettings: Settings = {\n  autoSlippage: true,\n  maxSlippage: undefined,\n  transactionTtl: undefined,\n  mockTogglable: true,\n  clientSideRouter: true,\n}\n\nexport const settingsAtom = atomWithReset(initialSettings)\nexport const autoSlippageAtom = pickAtom(settingsAtom, 'autoSlippage')\nexport const maxSlippageAtom = pickAtom(settingsAtom, 'maxSlippage')\nexport const transactionTtlAtom = pickAtom(settingsAtom, 'transactionTtl')\nexport const mockTogglableAtom = pickAtom(settingsAtom, 'mockTogglable', setTogglable)\nexport const clientSideRouterAtom = pickAtom(settingsAtom, 'clientSideRouter')\n"],"sourceRoot":""}