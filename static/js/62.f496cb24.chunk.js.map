{"version":3,"sources":["lib/state/swap.ts","lib/state/atoms.ts","lib/hooks/swap/useSyncSwapDefaults.ts"],"names":["Field","swapAtom","atomWithImmer","independentField","INPUT","amount","nativeOnChain","SupportedChainId","AVALANCHE","independentFieldAtom","pickAtom","displayTxHashAtom","atom","undefined","feeOptionsAtom","anAtom","key","setter","draft","update","get","set","withImmer","value","derived","setTogglable","useDefaultToken","defaultAddress","chainId","address","token","useToken","useSyncSwapDefaults","defaultInputAddress","defaultInputAmount","defaultOutputAddress","defaultOutputAmount","updateSwap","useUpdateAtom","useActiveWeb3React","defaultInputToken","defaultOutputToken","setToDefaults","useCallback","defaultSwapState","OUTPUT","swap","useState","previousChainId","setPreviousChainId","useLayoutEffect"],"mappings":"mXAQYA,E,8DAAAA,K,cAAAA,E,iBAAAA,M,KAYL,IAAMC,EAAWC,wBAAa,aACnCC,iBAAkBH,EAAMI,MACxBC,OAAQ,IACPL,EAAMI,MAAQE,YAAcC,IAAiBC,aAGnCC,EAAuBC,mBAAST,EAAU,oBAG1CU,EAAoBC,oBAAyBC,GAE7CC,EAAiBF,oBAA6BC,I,iCC/B3D,oHAoBO,SAASH,EACdK,EACAC,GAGmC,IAFnCC,EAEkC,uDAFwC,SAACC,EAAOC,GAAR,OACxEA,GAEF,OAAOP,gBACL,SAACQ,GAAD,OAASA,EAAIL,GAAQC,MACrB,SAACI,EAAKC,EAAKF,GAAX,OACEE,EAAIC,oBAAUP,IAAS,SAACQ,GACtB,IAAMC,EAAUP,EAAOM,EAAMP,GAAMG,GACnCI,EAAMP,GAAOQ,QAMd,SAASC,EAAaP,GAC3B,OAAQA,I,+JC7BV,SAASQ,EACPC,EACAC,GAEA,IAAIC,OAAUhB,EACgB,kBAAnBc,EACTE,EAAUF,EACyB,kBAAnBA,GAA+BC,IAC/CC,EAAUF,EAAeC,IAE3B,IAAME,EAAQC,mBAASF,GACvB,OAAID,GAAuB,WAAZC,EACNvB,YAAcsB,GAEhBE,EAUM,SAASE,EAAT,GAKU,IAJvBC,EAIsB,EAJtBA,oBACAC,EAGsB,EAHtBA,mBACAC,EAEsB,EAFtBA,qBACAC,EACsB,EADtBA,oBAEMC,EAAaC,wBAAcrC,YACzB2B,EAAYW,oBAAZX,QACFY,EAAoBd,EAAgBO,EAAqBL,GACzDa,EAAqBf,EAAgBS,EAAsBP,GAE3Dc,EAAgBC,uBAAY,WAAO,IAAD,EAChCC,GAAsB,GAC1BvC,OAAQ,IADkB,cAEzBL,QAAMI,MAAQoC,QAAqB3B,GAFV,cAGzBb,QAAM6C,OAASJ,QAAsB5B,GAHZ,iCAIRb,QAAMI,OAJE,GAMxB8B,GAAsBM,EACxBI,EAAiBvC,OAAS6B,EACjBE,GAAuBK,IAChCG,EAAiBzC,iBAAmBH,QAAM6C,OAC1CD,EAAiBvC,OAAS+B,GAE5BC,GAAW,SAACS,GAAD,mBAAC,eAAeA,GAASF,QACnC,CAACJ,EAAmBC,EAAoBP,EAAoBE,EAAqBC,IAEpF,EAA8CU,mBAASnB,GAAvD,mBAAOoB,EAAP,KAAwBC,EAAxB,KACAC,2BAAgB,WACdD,EAAmBrB,KAClB,CAACA,IACJsB,2BAAgB,WACVtB,GAAWA,IAAYoB,GACzBN,MAED,CAACd,EAASoB,EAAiBN","file":"static/js/62.f496cb24.chunk.js","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { atom } from 'jotai'\nimport { atomWithImmer } from 'jotai/immer'\nimport { pickAtom } from 'lib/state/atoms'\n\nexport enum Field {\n  INPUT = 'INPUT',\n  OUTPUT = 'OUTPUT',\n}\n\nexport interface Swap {\n  independentField: Field\n  amount: string\n  [Field.INPUT]?: Currency\n  [Field.OUTPUT]?: Currency\n}\n\nexport const swapAtom = atomWithImmer<Swap>({\n  independentField: Field.INPUT,\n  amount: '',\n  [Field.INPUT]: nativeOnChain(SupportedChainId.AVALANCHE),\n})\n\nexport const independentFieldAtom = pickAtom(swapAtom, 'independentField')\n\n// If set to a transaction hash, that transaction will display in a status dialog.\nexport const displayTxHashAtom = atom<string | undefined>(undefined)\n\nexport const feeOptionsAtom = atom<FeeOptions | undefined>(undefined)\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Draft } from 'immer'\nimport { atom, WritableAtom } from 'jotai'\nimport { withImmer } from 'jotai/immer'\n\n/**\n * Creates a derived atom whose value is the picked object property.\n * By default, the setter acts as a primitive atom's, changing the original atom.\n * A custom setter may also be passed, which uses an Immer Draft so that it may be mutated directly.\n */\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter?: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key] = (draft, update) =>\n    update as Draft<Value>[Key]\n): WritableAtom<Value[Key], Update> {\n  return atom(\n    (get) => get(anAtom)[key],\n    (get, set, update: Update) =>\n      set(withImmer(anAtom), (value) => {\n        const derived = setter(value[key], update)\n        value[key] = derived\n      })\n  )\n}\n\n/** Sets a togglable atom to invert its state at the next render. */\nexport function setTogglable(draft: boolean) {\n  return !draft\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { nativeOnChain } from 'constants/tokens'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { DefaultAddress } from 'lib/components/Swap'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { useToken } from 'lib/hooks/useCurrency'\nimport { Field, Swap, swapAtom } from 'lib/state/swap'\nimport { useCallback, useLayoutEffect, useState } from 'react'\n\nfunction useDefaultToken(\n  defaultAddress: DefaultAddress | undefined,\n  chainId: number | undefined\n): Currency | null | undefined {\n  let address = undefined\n  if (typeof defaultAddress === 'string') {\n    address = defaultAddress\n  } else if (typeof defaultAddress === 'object' && chainId) {\n    address = defaultAddress[chainId]\n  }\n  const token = useToken(address)\n  if (chainId && address === 'NATIVE') {\n    return nativeOnChain(chainId)\n  }\n  return token\n}\n\ninterface UseSwapDefaultsArgs {\n  defaultInputAddress?: DefaultAddress\n  defaultInputAmount?: string\n  defaultOutputAddress?: DefaultAddress\n  defaultOutputAmount?: string\n}\n\nexport default function useSyncSwapDefaults({\n  defaultInputAddress,\n  defaultInputAmount,\n  defaultOutputAddress,\n  defaultOutputAmount,\n}: UseSwapDefaultsArgs) {\n  const updateSwap = useUpdateAtom(swapAtom)\n  const { chainId } = useActiveWeb3React()\n  const defaultInputToken = useDefaultToken(defaultInputAddress, chainId)\n  const defaultOutputToken = useDefaultToken(defaultOutputAddress, chainId)\n\n  const setToDefaults = useCallback(() => {\n    const defaultSwapState: Swap = {\n      amount: '',\n      [Field.INPUT]: defaultInputToken || undefined,\n      [Field.OUTPUT]: defaultOutputToken || undefined,\n      independentField: Field.INPUT,\n    }\n    if (defaultInputAmount && defaultInputToken) {\n      defaultSwapState.amount = defaultInputAmount\n    } else if (defaultOutputAmount && defaultOutputToken) {\n      defaultSwapState.independentField = Field.OUTPUT\n      defaultSwapState.amount = defaultOutputAmount\n    }\n    updateSwap((swap) => ({ ...swap, ...defaultSwapState }))\n  }, [defaultInputToken, defaultOutputToken, defaultInputAmount, defaultOutputAmount, updateSwap])\n\n  const [previousChainId, setPreviousChainId] = useState(chainId)\n  useLayoutEffect(() => {\n    setPreviousChainId(chainId)\n  }, [chainId])\n  useLayoutEffect(() => {\n    if (chainId && chainId !== previousChainId) {\n      setToDefaults()\n    }\n  }, [chainId, previousChainId, setToDefaults])\n}\n"],"sourceRoot":""}