{"version":3,"sources":["lib/errors.ts","lib/components/Swap/SwapPropValidator.tsx"],"names":["IntegrationError","message","name","Error","isAddressOrAddressMap","addressOrMap","Object","values","every","address","isAddress","SwapPropValidator","props","convenienceFee","convenienceFeeRecipient","useEffect","forEach","recipient","join","defaultInputAddress","defaultInputAmount","defaultOutputAddress","defaultOutputAmount","BigNumber","from","lt","children"],"mappings":"mOAAaA,EAAb,kDACE,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IACDC,KAAO,oBAFe,EAD/B,mCAAsCC,S,iCCAtC,0FAOA,SAASC,EAAsBC,GAC7B,MAA4B,kBAAjBA,EACFC,OAAOC,OAAOF,GAAcG,OAAM,SAACC,GAAD,OAAaC,YAAUD,MAEtC,kBAAjBJ,GACiC,kBAA5BK,YAAUL,GAOb,SAASM,EAAkBC,GACxC,IAAQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,wBACxBC,qBAAU,WACR,GAAIF,EAAgB,CAClB,GAAIA,EAAiB,KAAOA,EAAiB,EAC3C,MAAM,IAAIb,mBAAJ,mEAAiFa,EAAjF,MAER,IAAKC,EACH,MAAM,IAAId,mBAAiB,mEAG7B,GAAuC,kBAA5Bc,GACT,IAAKJ,YAAUI,GACb,MAAM,IAAId,mBAAJ,0EAC+Dc,EAD/D,WAIoC,kBAA5BA,GAChBR,OAAOC,OAAOO,GAAyBE,SAAQ,SAACC,GAC9C,IAAKP,YAAUO,GAAY,CACzB,IAAMV,EAASD,OAAOC,OAAOO,GAAyBI,KAAK,MAC3D,MAAM,IAAIlB,mBAAJ,0FAC+EO,EAD/E,cAOb,CAACM,EAAgBC,IAEpB,IAAQK,EAAuFP,EAAvFO,oBAAqBC,EAAkER,EAAlEQ,mBAAoBC,EAA8CT,EAA9CS,qBAAsBC,EAAwBV,EAAxBU,oBAyBvE,OAxBAP,qBAAU,WACR,GAAIO,GAAuBF,EACzB,MAAM,IAAIpB,mBAAiB,uEAE7B,GAAIoB,GAAsBG,IAAUC,KAAKJ,GAAoBK,GAAG,GAC9D,MAAM,IAAIzB,mBAAJ,uEAAqFoB,EAArF,MAER,GAAIE,GAAuBC,IAAUC,KAAKF,GAAqBG,GAAG,GAChE,MAAM,IAAIzB,mBAAJ,wEAC6DsB,EAD7D,MAIR,GAAIH,IAAwBf,EAAsBe,IAAgD,WAAxBA,EACxE,MAAM,IAAInB,mBAAJ,sFAC2EmB,IAGnF,GAAIE,IAAyBjB,EAAsBiB,IAAkD,WAAzBA,EAC1E,MAAM,IAAIrB,mBAAJ,uFAC4EqB,MAGnF,CAACF,EAAqBC,EAAoBC,EAAsBC,IAE5D,mCAAGV,EAAMc","file":"static/js/66.2fc8c3cd.chunk.js","sourcesContent":["export class IntegrationError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'Integration Error'\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { DefaultAddress, SwapProps } from 'lib/components/Swap'\nimport { IntegrationError } from 'lib/errors'\nimport { PropsWithChildren, useEffect } from 'react'\n\nimport { isAddress } from '../../../utils'\n\nfunction isAddressOrAddressMap(addressOrMap: DefaultAddress): boolean {\n  if (typeof addressOrMap === 'object') {\n    return Object.values(addressOrMap).every((address) => isAddress(address))\n  }\n  if (typeof addressOrMap === 'string') {\n    return typeof isAddress(addressOrMap) === 'string'\n  }\n  return false\n}\n\ntype ValidatorProps = PropsWithChildren<SwapProps>\n\nexport default function SwapPropValidator(props: ValidatorProps) {\n  const { convenienceFee, convenienceFeeRecipient } = props\n  useEffect(() => {\n    if (convenienceFee) {\n      if (convenienceFee > 100 || convenienceFee < 0) {\n        throw new IntegrationError(`convenienceFee must be between 0 and 100. (You set it to ${convenienceFee})`)\n      }\n      if (!convenienceFeeRecipient) {\n        throw new IntegrationError('convenienceFeeRecipient is required when convenienceFee is set.')\n      }\n\n      if (typeof convenienceFeeRecipient === 'string') {\n        if (!isAddress(convenienceFeeRecipient)) {\n          throw new IntegrationError(\n            `convenienceFeeRecipient must be a valid address. (You set it to ${convenienceFeeRecipient}.)`\n          )\n        }\n      } else if (typeof convenienceFeeRecipient === 'object') {\n        Object.values(convenienceFeeRecipient).forEach((recipient) => {\n          if (!isAddress(recipient)) {\n            const values = Object.values(convenienceFeeRecipient).join(', ')\n            throw new IntegrationError(\n              `All values in convenienceFeeRecipient object must be valid addresses. (You used ${values}.)`\n            )\n          }\n        })\n      }\n    }\n  }, [convenienceFee, convenienceFeeRecipient])\n\n  const { defaultInputAddress, defaultInputAmount, defaultOutputAddress, defaultOutputAmount } = props\n  useEffect(() => {\n    if (defaultOutputAmount && defaultInputAmount) {\n      throw new IntegrationError('defaultInputAmount and defaultOutputAmount may not both be defined.')\n    }\n    if (defaultInputAmount && BigNumber.from(defaultInputAmount).lt(0)) {\n      throw new IntegrationError(`defaultInputAmount must be a positive number. (You set it to ${defaultInputAmount})`)\n    }\n    if (defaultOutputAmount && BigNumber.from(defaultOutputAmount).lt(0)) {\n      throw new IntegrationError(\n        `defaultOutputAmount must be a positive number. (You set it to ${defaultOutputAmount})`\n      )\n    }\n    if (defaultInputAddress && !isAddressOrAddressMap(defaultInputAddress) && defaultInputAddress !== 'NATIVE') {\n      throw new IntegrationError(\n        `defaultInputAddress(es) must be a valid address or \"NATIVE\". (You set it to ${defaultInputAddress}`\n      )\n    }\n    if (defaultOutputAddress && !isAddressOrAddressMap(defaultOutputAddress) && defaultOutputAddress !== 'NATIVE') {\n      throw new IntegrationError(\n        `defaultOutputAddress(es) must be a valid address or \"NATIVE\". (You set it to ${defaultOutputAddress}`\n      )\n    }\n  }, [defaultInputAddress, defaultInputAmount, defaultOutputAddress, defaultOutputAmount])\n\n  return <>{props.children}</>\n}\n"],"sourceRoot":""}