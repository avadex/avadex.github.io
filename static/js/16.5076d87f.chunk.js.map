{"version":3,"sources":["lib/hooks/swap/index.ts","lib/hooks/transactions/index.tsx","lib/components/TokenSelect/index.tsx","lib/components/Swap/Summary/index.tsx","lib/components/Swap/Settings/index.tsx","lib/components/Swap/Status/index.ts","lib/components/Swap/Toolbar/index.tsx","lib/components/Swap/index.tsx","lib/components/Row.tsx","lib/components/Button.tsx","lib/components/Column.tsx","lib/state/swap.ts","lib/state/atoms.ts","lib/components/Rule.tsx","lib/state/settings.ts","lib/components/Dialog.tsx","lib/components/TokenImg.tsx","lib/hooks/useScrollbar.ts","lib/hooks/useNativeEvent.ts","lib/hooks/useUnmount.ts","lib/components/Input.tsx","lib/components/Header.tsx","lib/hooks/swap/useSwapInfo.tsx","../node_modules/popper-max-size-modifier/dist/popper-max-size-modifier.esm.js","lib/components/Popover.tsx","lib/components/ActionButton.tsx","lib/hooks/routing/useClientSideSmartOrderRouterTrade.ts","lib/components/Tooltip.tsx","lib/state/transactions.ts","lib/hooks/useAllowedSlippage.ts","lib/hooks/swap/useBestTrade.ts","lib/components/Swap/Settings/components.tsx","lib/css/loading.ts","lib/components/Error/ErrorDialog.tsx","lib/errors.ts","lib/hooks/useTransactionDeadline.ts","lib/components/TokenSelect/TokenBase.tsx","lib/components/TokenSelect/TokenButton.tsx","lib/components/TokenSelect/TokenOptions.tsx","lib/hooks/useCurrencyColor.ts","lib/components/Swap/TokenInput.tsx","lib/components/Swap/Status/StatusDialog.tsx","lib/components/ExternalLink.tsx","lib/components/Swap/Settings/MaxSlippageSelect.tsx","lib/components/Swap/Settings/TransactionTtlInput.tsx","lib/components/Swap/Toolbar/RoutingTooltip.tsx","lib/components/BrandedFooter.tsx","lib/components/Swap/Toolbar/Caption.tsx","lib/components/Swap/Output.tsx","lib/components/Swap/Input.tsx","lib/components/Swap/ReverseButton.tsx","lib/components/Swap/Summary/Details.tsx","lib/components/Swap/Summary/Summary.tsx","lib/hooks/swap/useSyncConvenienceFee.ts","lib/hooks/swap/useSyncSwapDefaults.ts","lib/components/Wallet.tsx","lib/components/Swap/SwapButton.tsx","lib/components/Swap/SwapPropValidator.tsx","lib/components/Swap/Swap.fixture.tsx"],"names":["amountAtom","pickAtom","swapAtom","useSwitchSwapCurrencies","update","useUpdateAtom","useCallback","swap","oldOutput","Field","OUTPUT","INPUT","independentField","useSwapCurrency","field","atom","useMemo","otherAtom","otherField","useAtom","currency","setCurrency","otherCurrency","useAtomValue","switchSwapCurrencies","setOrSwitchCurrency","useSwapAmount","amount","independentFieldAtom","value","undefined","updateSwap","updateAmount","useIsAmountPopulated","Boolean","usePendingTransactions","chainId","useActiveWeb3React","txs","transactionsAtom","useAddTransaction","blockNumber","useBlockNumber","updateTxs","info","invariant","txChainId","hash","response","chainTxs","addedTime","Date","getTime","lastCheckedBlockNumber","usePendingApproval","token","spender","Object","values","find","tx","receipt","type","TransactionType","APPROVAL","tokenAddress","address","spenderAddress","transaction","now","TransactionsUpdater","pendingTransactions","onCheck","Math","max","onReceipt","SearchInput","styled","StringInput","inputCss","TokenSelectDialog","onSelect","useState","query","setQuery","queriedTokens","useQueryTokenList","tokens","filter","baseTokens","input","useRef","useEffect","current","focus","options","setOptions","title","gap","pad","grow","Body1","onChange","placeholder","onKeyDown","onBlur","blur","ref","length","justify","flex","map","onClick","currencyId","padded","TokenSelect","collapsed","disabled","open","setOpen","selectAndClose","color","onClose","Summary","SummaryColumn","Column","ExpandoColumn","DetailsColumn","Estimate","ThemedText","Caption","Body","theme","dialog","priceUpdate","message","action","SummaryDialog","trade","allowedSlippage","onConfirm","inputAmount","outputAmount","executionPrice","inputCurrency","outputCurrency","priceImpact","computeRealizedPriceImpact","warning","greaterThan","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_MEDIUM","MIN_HIGH_SLIPPAGE","confirmedTrade","setConfirmedTrade","doesTradeDiffer","tradeMeaningfullyDiffers","details","setDetails","scrollbar","useScrollbar","i18n","useLingui","ruled","align","output","usdc","formatLocaleNumber","number","sigFigs","locale","symbol","formatPrice","Subhead2","icon","Expando","iconProps","css","formatCurrencyAmount","minimumAmountOut","maximumAmountIn","onUpdate","SettingsDialog","boundary","setBoundary","resetSettings","useResetAtom","settingsAtom","ButtonSmall","style","paddingTop","SettingsButton","IconButton","SettingsIcon","hover","Settings","setHover","onMouseEnter","onMouseLeave","ToolbarRow","Row","largeIconCss","Toolbar","useSwapInfo","state","currencies","balance","currencyBalances","swaps","TradeState","LOADING","SYNCING","routeFound","routeIsLoading","isAmountPopulated","caption","ALL_SUPPORTED_CHAIN_IDS","includes","iconSize","Swap","props","list","useTokenList","tokenList","useSyncSwapDefaults","useSyncConvenienceFee","active","account","displayTxHashAtom","displayTxHash","setDisplayTxHash","displayTx","SWAP","getSwapTx","onSupportedChain","some","onConnectWallet","div","children","Children","count","BaseButton","button","onInteractive","onHover","outline","secondary","transparentButton","defaultColor","TextButton","SecondaryButton","Icon","atomWithImmer","nativeOnChain","SupportedChainId","AVALANCHE","feeOptionsAtom","anAtom","key","setter","draft","get","set","withImmer","derived","setTogglable","Rule","hr","scrollingEdge","MAX_VALID_SLIPPAGE","Percent","initialSettings","autoSlippage","maxSlippage","transactionTtl","mockTogglable","clientSideRouter","atomWithReset","autoSlippageAtom","maxSlippageAtom","transactionTtlAtom","mockTogglableAtom","clientSideRouterAtom","Context","createContext","element","setActive","Provider","context","inert","OnCloseContext","Header","useContext","X","Modal","borderRadius","Layer","DIALOG","Dialog","useUnmount","close","e","document","addEventListener","removeEventListener","createPortal","badSrcs","Set","className","srcs","useCurrencyLogoURIs","src","setSrc","has","onError","add","alt","name","module","sqrt","size","overflowCss","scrollbarCss","interactive","overflow","setOverflow","hasOverflow","useNativeEvent","scrollHeight","clientHeight","eventListener","UNMOUNTING","node","parent","parentElement","removeChild","child","classList","onanimationend","call","Input","forwardRef","target","inputMode","autoComplete","autoCorrect","minLength","spellCheck","isNumericallyEqual","a","b","split","aInteger","aDecimal","bInteger","bDecimal","JSBI","equal","BigInt","NumericInput","enforcer","pattern","setState","validateChange","event","nextInput","replace","maxLength","integerRegexp","integerEnforcer","nextUserInput","test","parseInt","isNaN","toString","IntegerInput","decimalRegexp","decimalEnforcer","DecimalInput","container","HeaderRow","Subhead1","BAD_RECIPIENT_ADDRESSES","swapInfoAtom","currencyAmounts","INVALID","feeOptions","SwapInfoUpdater","setSwapInfo","swapInfo","to","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","tryParseCurrencyAmount","useBestTrade","TradeType","EXACT_INPUT","EXACT_OUTPUT","useAllowedSlippage","inputError","formattedTo","isAddress","balanceIn","amountIn","lessThan","useComputeSwapInfo","maxSize","enabled","phase","requiresIfExists","fn","_ref","detectOverflow","_ref2","modifiersData","preventOverflow","x","y","_state$rects$popper","rects","popper","width","height","basePlacement","placement","widthProp","heightProp","BoundaryContext","BoundaryProvider","PopoverContainer","show","TOOLTIP","Reference","Arrow","Popover","content","offset","contained","reference","popover","setPopover","arrow","setArrow","modifiers","padding","push","requires","styles","maxWidth","strategy","usePopper","attributes","StyledButton","Button","UpdateRow","keyframes","updateCss","Overlay","ActionButton","textColor","TransitionButton","buttonSize","AlertTriangle","config","protocols","Protocol","V2","V3","useClientSideSmartOrderRouterTrade","tradeType","amountSpecified","library","currencyIn","currencyOut","queryArgs","useRoutingAPIArguments","tokenIn","tokenOut","useClientSideRouter","params","provider","loading","setLoading","quoteResult","error","setFetchedResult","getClientSideQuote","result","data","fetchQuote","route","computeRoutes","gasUseEstimateUSD","useStablecoinAmountFromFiatValue","otherAmount","CurrencyAmount","fromRawAmount","quote","NO_ROUTE_FOUND","transformRoutesToTrade","VALID","console","debug","useTooltip","setShow","enable","disable","onFocus","IconTooltip","Tooltip","HelpCircle","showTooltip","tooltipProps","toPercent","numerator","floor","useMaxSlippage","useAutoSlippageTolerance","useDebounce","debouncedAmount","debouncedOtherCurrency","clientSORTrade","getTradeInputs","amountFromLatestTrade","currencyFromTrade","otherCurrencyFromTrade","debouncing","syncing","amounts","indepdenentCurrencies","dependentCurrencies","amountsMatch","equalTo","currenciesMatch","equals","isTradeDebouncing","useFallback","fallbackTrade","useClientSideV3Trade","optionCss","selected","primary","Value","cursor","Label","tooltip","loadingOpacityCss","$loading","HeaderIcon","LargeIcon","StatusHeader","iconColor","flexGrow","textAlign","ErrorHeader","ErrorColumn","ErrorDialog","header","onAction","Body2","Code","IntegrationError","Error","useDefaultTransactionTtl","L2_CHAIN_IDS","L2_DEADLINE_FROM_NOW","DEFAULT_DEADLINE_FROM_NOW","useTransactionTtl","useTransactionDeadline","ttl","defaultTtl","blockTimestamp","useCurrentBlockTimestamp","TokenButton","TokenBase","ButtonMedium","StyledTokenButton","empty","TokenButtonRow","buttonBackgroundColor","contentColor","ButtonLarge","strokeWidth","TokenList","FixedSizeList","OnHover","TokenOption","index","onEvent","useCurrencyBalance","onMouseMove","itemKey","ItemRow","memo","areEqual","TokenOptions","focused","setFocused","scrollTo","scrollToItem","preventDefault","useImperativeHandle","setElement","marginTop","scrollTop","disableWidth","itemCount","itemData","itemSize","outerRef","colors","Map","getColorFromLogoURIs","logoURIs","cb","logoURI","uri","startsWith","getColorFromUriPath","Vibrant","from","getPalette","palette","hex","usePrefetchCurrencyColor","useTheme","tokenColorExtraction","useCurrencyColor","setColor","useLayoutEffect","stale","TokenInputRow","ValueInput","delayedFadeIn","MaxButton","TokenInput","onMax","onChangeInput","onChangeCurrency","showMax","setShowMax","relatedTarget","H2","errorMessage","TransactionRow","ElapsedTime","elapsedMs","setElapsedMs","useInterval","timestamp","toElapsedTime","ms","sec","min","EtherscanA","accent","TransactionStatus","status","CheckCircle","Spinner","heading","inputCurrencyAmount","outputCurrencyAmount","href","TransactionStatusDialog","ExternalLink","rel","rest","WarningState","highSlippage","invalidSlippage","Custom","Option","Wrapper","wrapper","tooltipHandlers","Check","Warning","INVALID_SLIPPAGE","XOctagon","HIGH_SLIPPAGE","NONE","MaxSlippageSelect","setAutoSlippage","setMaxSlippage","maxSlippageInput","setWarning","setShowTooltip","processInput","percent","onInputSelect","TransactionTtlInput","setTtl","parseFloat","RoutingTooltip","UniswapA","Logo","brand","BrandedFooter","ConnectWallet","UnsupportedNetwork","InsufficientBalance","InsufficientLiquidity","Empty","Info","LoadingTrade","Trade","flip","setFlip","fiatValueInput","useUSDCPrice","fiatValueOutput","ratio","priceString","invert","toSignificant","userSelect","colorAtom","LoadingSpan","span","OutputColumn","hasColor","Output","tradeState","swapOutputAmount","updateSwapOutputAmount","swapOutputCurrency","updateSwapOutputCurrency","isTradeLoading","isLoading","overrideColor","dynamicColor","inputUSDC","useUSDCValue","outputUSDC","computedChange","computeFiatValuePriceImpact","multiply","toFixed","InputColumn","TokenImg","approved","swapInputAmount","updateSwapInputAmount","swapInputCurrency","updateSwapInputCurrency","toExact","ReverseRow","OVERLAY","ArrowUp","ArrowUpIcon","ArrowDown","ArrowDownIcon","StyledReverseButton","turns","ReverseButton","setTurns","switchCurrencies","Detail","label","Details","lpFeeAmount","computeRealizedLPFeeAmount","integrator","window","location","hostname","rows","parsedConvenienceFee","fee","priceImpactRow","localizedFeeAmount","localizedMaxSent","slippageToleranceRow","detail","gain","success","TokenValue","change","toPrecision","usdcAmount","inputUSDCValue","outputUSDCValue","convenienceFee","convenienceFeeRecipient","updateFeeOptions","recipient","useDefaultToken","defaultAddress","useToken","defaultInputAddress","defaultInputAmount","defaultOutputAddress","defaultOutputAmount","defaultInputToken","defaultOutputToken","setToDefaults","defaultSwapState","previousChainId","setPreviousChainId","ClickableRow","Wallet","useIsPendingApproval","SwapButton","inputCurrencyBalance","activeTrade","setActiveTrade","optimizedTrade","useSwapApprovalOptimizedTrade","useSwapApproval","approval","getApproval","approvalHash","isToken","useSwapRouterAddress","addTransaction","addApprovalTransaction","then","actionProps","ApprovalState","PENDING","CHAIN_INFO","explorer","NOT_APPROVED","deadline","signatureData","useERC20PermitFromTrade","swapCallback","useSwapCallback","recipientAddressOrName","callback","catch","log","finally","isAddressOrAddressMap","addressOrMap","every","SwapPropValidator","forEach","join","BigNumber","lt","validateColor","validator","createElement","Fixture","useValue","defaultValue","FEE_RECIPIENT_OPTIONS","useSelect","optionsToAddressMap","none","Native","DAI","USDC","addressOptions","keys","defaultInput","inputOptions","defaultOutput"],"mappings":"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","file":"static/js/16.5076d87f.chunk.js","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useAtom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { pickAtom } from 'lib/state/atoms'\nimport { Field, independentFieldAtom, swapAtom } from 'lib/state/swap'\nimport { useCallback, useMemo } from 'react'\nexport { default as useSwapInfo } from './useSwapInfo'\n\nexport const amountAtom = pickAtom(swapAtom, 'amount')\n\nfunction otherField(field: Field) {\n  switch (field) {\n    case Field.INPUT:\n      return Field.OUTPUT\n      break\n    case Field.OUTPUT:\n      return Field.INPUT\n      break\n  }\n}\n\nexport function useSwitchSwapCurrencies() {\n  const update = useUpdateAtom(swapAtom)\n  return useCallback(() => {\n    update((swap) => {\n      const oldOutput = swap[Field.OUTPUT]\n      swap[Field.OUTPUT] = swap[Field.INPUT]\n      swap[Field.INPUT] = oldOutput\n      switch (swap.independentField) {\n        case Field.INPUT:\n          swap.independentField = Field.OUTPUT\n          break\n        case Field.OUTPUT:\n          swap.independentField = Field.INPUT\n          break\n      }\n    })\n  }, [update])\n}\n\nexport function useSwapCurrency(field: Field): [Currency | undefined, (currency?: Currency) => void] {\n  const atom = useMemo(() => pickAtom(swapAtom, field), [field])\n  const otherAtom = useMemo(() => pickAtom(swapAtom, otherField(field)), [field])\n  const [currency, setCurrency] = useAtom(atom)\n  const otherCurrency = useAtomValue(otherAtom)\n  const switchSwapCurrencies = useSwitchSwapCurrencies()\n  const setOrSwitchCurrency = useCallback(\n    (currency?: Currency) => {\n      if (currency === otherCurrency) {\n        switchSwapCurrencies()\n      } else {\n        setCurrency(currency)\n      }\n    },\n    [otherCurrency, setCurrency, switchSwapCurrencies]\n  )\n  return [currency, setOrSwitchCurrency]\n}\n\nexport function useSwapAmount(field: Field): [string | undefined, (amount: string) => void] {\n  const amount = useAtomValue(amountAtom)\n  const independentField = useAtomValue(independentFieldAtom)\n  const value = useMemo(() => (independentField === field ? amount : undefined), [amount, independentField, field])\n  const updateSwap = useUpdateAtom(swapAtom)\n  const updateAmount = useCallback(\n    (amount: string) =>\n      updateSwap((swap) => {\n        swap.independentField = field\n        swap.amount = amount\n      }),\n    [field, updateSwap]\n  )\n  return [value, updateAmount]\n}\n\n// check if any amount has been entered by user\nexport function useIsAmountPopulated() {\n  return Boolean(useAtomValue(amountAtom))\n}\n","import { Token } from '@uniswap/sdk-core'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { Transaction, TransactionInfo, transactionsAtom, TransactionType } from 'lib/state/transactions'\nimport ms from 'ms.macro'\nimport { useCallback } from 'react'\nimport invariant from 'tiny-invariant'\n\nimport useBlockNumber from '../useBlockNumber'\nimport Updater from './updater'\n\nfunction isTransactionRecent(transaction: Transaction) {\n  return Date.now() - transaction.addedTime < ms`1d`\n}\n\nexport function usePendingTransactions() {\n  const { chainId } = useActiveWeb3React()\n  const txs = useAtomValue(transactionsAtom)\n  return (chainId ? txs[chainId] : null) ?? {}\n}\n\nexport function useAddTransaction() {\n  const { chainId } = useActiveWeb3React()\n  const blockNumber = useBlockNumber()\n  const updateTxs = useUpdateAtom(transactionsAtom)\n\n  return useCallback(\n    (info: TransactionInfo) => {\n      invariant(chainId)\n      const txChainId = chainId\n      const { hash } = info.response\n\n      updateTxs((chainTxs) => {\n        const txs = chainTxs[txChainId] || {}\n        txs[hash] = { addedTime: new Date().getTime(), lastCheckedBlockNumber: blockNumber, info }\n        chainTxs[chainId] = txs\n      })\n    },\n    [blockNumber, chainId, updateTxs]\n  )\n}\n\n/** Returns the hash of a pending approval transaction, if it exists. */\nexport function usePendingApproval(token?: Token, spender?: string): string | undefined {\n  const { chainId } = useActiveWeb3React()\n  const txs = useAtomValue(transactionsAtom)\n  if (!chainId || !token || !spender) return undefined\n\n  const chainTxs = txs[chainId]\n  if (!chainTxs) return undefined\n\n  return Object.values(chainTxs).find(\n    (tx) =>\n      tx &&\n      tx.receipt === undefined &&\n      tx.info.type === TransactionType.APPROVAL &&\n      tx.info.tokenAddress === token.address &&\n      tx.info.spenderAddress === spender &&\n      isTransactionRecent(tx)\n  )?.info.response.hash\n}\n\nexport function TransactionsUpdater() {\n  const pendingTransactions = usePendingTransactions()\n\n  const updateTxs = useUpdateAtom(transactionsAtom)\n  const onCheck = useCallback(\n    ({ chainId, hash, blockNumber }) => {\n      updateTxs((txs) => {\n        const tx = txs[chainId]?.[hash]\n        if (tx) {\n          tx.lastCheckedBlockNumber = tx.lastCheckedBlockNumber\n            ? Math.max(tx.lastCheckedBlockNumber, blockNumber)\n            : blockNumber\n        }\n      })\n    },\n    [updateTxs]\n  )\n  const onReceipt = useCallback(\n    ({ chainId, hash, receipt }) => {\n      updateTxs((txs) => {\n        const tx = txs[chainId]?.[hash]\n        if (tx) {\n          tx.receipt = receipt\n        }\n      })\n    },\n    [updateTxs]\n  )\n\n  return <Updater pendingTransactions={pendingTransactions} onCheck={onCheck} onReceipt={onReceipt} />\n}\n","import { t, Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useQueryTokenList } from 'lib/hooks/useTokenList'\nimport styled, { ThemedText } from 'lib/theme'\nimport { ElementRef, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { currencyId } from 'utils/currencyId'\n\nimport Column from '../Column'\nimport Dialog, { Header } from '../Dialog'\nimport { inputCss, StringInput } from '../Input'\nimport Row from '../Row'\nimport Rule from '../Rule'\nimport TokenBase from './TokenBase'\nimport TokenButton from './TokenButton'\nimport TokenOptions from './TokenOptions'\n\nconst SearchInput = styled(StringInput)`\n  ${inputCss}\n`\n\ninterface TokenSelectDialogProps {\n  value?: Currency\n  onSelect: (token: Currency) => void\n}\n\nexport function TokenSelectDialog({ value, onSelect }: TokenSelectDialogProps) {\n  const [query, setQuery] = useState('')\n  const queriedTokens = useQueryTokenList(query)\n  const tokens = useMemo(() => queriedTokens.filter((token) => token !== value), [queriedTokens, value])\n\n  const baseTokens: Currency[] = [] // TODO(zzmp): Add base tokens to token list functionality\n\n  const input = useRef<HTMLInputElement>(null)\n  useEffect(() => input.current?.focus(), [input])\n\n  const [options, setOptions] = useState<ElementRef<typeof TokenOptions> | null>(null)\n\n  return (\n    <>\n      <Header title={<Trans>Selec token</Trans>} />\n      <Column gap={0.75}>\n        <Row pad={0.75} grow>\n          <ThemedText.Body1>\n            <SearchInput\n              value={query}\n              onChange={setQuery}\n              placeholder={t`Search by token name or address`}\n              onKeyDown={options?.onKeyDown}\n              onBlur={options?.blur}\n              ref={input}\n            />\n          </ThemedText.Body1>\n        </Row>\n        {Boolean(baseTokens.length) && (\n          <Row pad={0.75} gap={0.25} justify=\"flex-start\" flex>\n            {baseTokens.map((token) => (\n              <TokenBase value={token} onClick={onSelect} key={currencyId(token)} />\n            ))}\n          </Row>\n        )}\n        <Rule padded />\n      </Column>\n      <TokenOptions tokens={tokens} onSelect={onSelect} ref={setOptions} />\n    </>\n  )\n}\n\ninterface TokenSelectProps {\n  value?: Currency\n  collapsed: boolean\n  disabled?: boolean\n  onSelect: (value: Currency) => void\n}\n\nexport default function TokenSelect({ value, collapsed, disabled, onSelect }: TokenSelectProps) {\n  const [open, setOpen] = useState(false)\n  const selectAndClose = useCallback(\n    (value: Currency) => {\n      onSelect(value)\n      setOpen(false)\n    },\n    [onSelect, setOpen]\n  )\n  return (\n    <>\n      <TokenButton value={value} collapsed={collapsed} disabled={disabled} onClick={() => setOpen(true)} />\n      {open && (\n        <Dialog color=\"module\" onClose={() => setOpen(false)}>\n          <TokenSelectDialog value={value} onSelect={selectAndClose} />\n        </Dialog>\n      )}\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_MEDIUM } from 'constants/misc'\nimport { useAtomValue } from 'jotai/utils'\nimport { IconButton } from 'lib/components/Button'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport { AlertTriangle, Expando, Info } from 'lib/icons'\nimport { MIN_HIGH_SLIPPAGE } from 'lib/state/settings'\nimport { Field, independentFieldAtom } from 'lib/state/swap'\nimport styled, { ThemedText } from 'lib/theme'\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber'\nimport { useMemo, useState } from 'react'\nimport { formatCurrencyAmount, formatPrice } from 'utils/formatCurrencyAmount'\nimport { computeRealizedPriceImpact } from 'utils/prices'\nimport { tradeMeaningfullyDiffers } from 'utils/tradeMeaningFullyDiffer'\n\nimport ActionButton from '../../ActionButton'\nimport Column from '../../Column'\nimport { Header } from '../../Dialog'\nimport Row from '../../Row'\nimport Rule from '../../Rule'\nimport Details from './Details'\nimport Summary from './Summary'\n\nexport default Summary\n\nconst SummaryColumn = styled(Column)``\nconst ExpandoColumn = styled(Column)``\nconst DetailsColumn = styled(Column)``\nconst Estimate = styled(ThemedText.Caption)``\nconst Body = styled(Column)<{ open: boolean }>`\n  height: calc(100% - 2.5em);\n\n  ${SummaryColumn} {\n    flex-grow: ${({ open }) => (open ? 0 : 1)};\n    transition: flex-grow 0.25s;\n  }\n\n  ${ExpandoColumn} {\n    flex-grow: ${({ open }) => (open ? 1 : 0)};\n    transition: flex-grow 0.25s;\n\n    ${DetailsColumn} {\n      flex-basis: ${({ open }) => (open ? 7 : 0)}em;\n      overflow-y: hidden;\n      position: relative;\n      transition: flex-basis 0.25s;\n\n      ${Column} {\n        height: 100%;\n        grid-template-rows: repeat(auto-fill, 1em);\n        padding: ${({ open }) => (open ? '0.5em 0' : 0)};\n        transition: padding 0.25s;\n\n        :after {\n          background: linear-gradient(#ffffff00, ${({ theme }) => theme.dialog});\n          bottom: 0;\n          content: '';\n          height: 0.75em;\n          pointer-events: none;\n          position: absolute;\n          width: calc(100% - 1em);\n        }\n      }\n    }\n\n    ${Estimate} {\n      max-height: ${({ open }) => (open ? 0 : 56 / 12)}em; // 2 * line-height + padding\n      min-height: 0;\n      overflow-y: hidden;\n      padding: ${({ open }) => (open ? 0 : '1em 0')};\n      transition: ${({ open }) =>\n        open\n          ? 'max-height 0.1s ease-out, padding 0.25s ease-out'\n          : 'flex-grow 0.25s ease-out, max-height 0.1s ease-in, padding 0.25s ease-out'};\n    }\n  }\n`\n\nconst priceUpdate = { message: <Trans>Price updated</Trans>, action: <Trans>Accept</Trans> }\n\ninterface SummaryDialogProps {\n  trade: Trade<Currency, Currency, TradeType>\n  allowedSlippage: Percent\n  onConfirm: () => void\n}\n\nexport function SummaryDialog({ trade, allowedSlippage, onConfirm }: SummaryDialogProps) {\n  const { inputAmount, outputAmount, executionPrice } = trade\n  const inputCurrency = inputAmount.currency\n  const outputCurrency = outputAmount.currency\n  const priceImpact = useMemo(() => computeRealizedPriceImpact(trade), [trade])\n\n  const independentField = useAtomValue(independentFieldAtom)\n\n  const warning = useMemo(() => {\n    if (priceImpact.greaterThan(ALLOWED_PRICE_IMPACT_HIGH)) return 'error'\n    if (priceImpact.greaterThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 'warning'\n    if (allowedSlippage.greaterThan(MIN_HIGH_SLIPPAGE)) return 'warning'\n    return\n  }, [allowedSlippage, priceImpact])\n\n  const [confirmedTrade, setConfirmedTrade] = useState(trade)\n  const doesTradeDiffer = useMemo(\n    () => Boolean(trade && confirmedTrade && tradeMeaningfullyDiffers(trade, confirmedTrade)),\n    [confirmedTrade, trade]\n  )\n  const [open, setOpen] = useState(false)\n\n  const [details, setDetails] = useState<HTMLDivElement | null>(null)\n\n  const scrollbar = useScrollbar(details)\n\n  const { i18n } = useLingui()\n\n  if (!(inputAmount && outputAmount && inputCurrency && outputCurrency)) {\n    return null\n  }\n\n  return (\n    <>\n      <Header title={<Trans>Swap summary</Trans>} ruled />\n      <Body flex align=\"stretch\" gap={0.75} padded open={open}>\n        <SummaryColumn gap={0.75} flex justify=\"center\">\n          <Summary input={inputAmount} output={outputAmount} usdc={true} />\n          <ThemedText.Caption>\n            {formatLocaleNumber({ number: 1, sigFigs: 1, locale: i18n.locale })} {inputCurrency.symbol} ={' '}\n            {formatPrice(executionPrice, 6, i18n.locale)} {outputCurrency.symbol}\n          </ThemedText.Caption>\n        </SummaryColumn>\n        <Rule />\n        <Row>\n          <Row gap={0.5}>\n            {warning ? <AlertTriangle color={warning} /> : <Info color=\"secondary\" />}\n            <ThemedText.Subhead2 color=\"secondary\">\n              <Trans>Swap details</Trans>\n            </ThemedText.Subhead2>\n          </Row>\n          <IconButton color=\"secondary\" onClick={() => setOpen(!open)} icon={Expando} iconProps={{ open }} />\n        </Row>\n        <ExpandoColumn flex align=\"stretch\">\n          <Rule />\n          <DetailsColumn>\n            <Column gap={0.5} ref={setDetails} css={scrollbar}>\n              <Details trade={trade} allowedSlippage={allowedSlippage} />\n            </Column>\n          </DetailsColumn>\n          <Estimate color=\"secondary\">\n            <Trans>Output is estimated.</Trans>\n            {independentField === Field.INPUT && (\n              <Trans>\n                You will receive at least{' '}\n                {formatCurrencyAmount(trade.minimumAmountOut(allowedSlippage), 6, i18n.locale)} {outputCurrency.symbol}{' '}\n                or the transaction will revert.\n              </Trans>\n            )}\n            {independentField === Field.OUTPUT && (\n              <Trans>\n                You will send at most {formatCurrencyAmount(trade.maximumAmountIn(allowedSlippage), 6, i18n.locale)}{' '}\n                {inputCurrency.symbol} or the transaction will revert.\n              </Trans>\n            )}\n          </Estimate>\n          <ActionButton\n            onClick={onConfirm}\n            onUpdate={() => setConfirmedTrade(trade)}\n            update={doesTradeDiffer ? priceUpdate : undefined}\n          >\n            <Trans>Confirm swap</Trans>\n          </ActionButton>\n        </ExpandoColumn>\n      </Body>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useResetAtom } from 'jotai/utils'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport { Settings as SettingsIcon } from 'lib/icons'\nimport { settingsAtom } from 'lib/state/settings'\nimport styled, { ThemedText } from 'lib/theme'\nimport React, { useState } from 'react'\n\nimport { IconButton, TextButton } from '../../Button'\nimport Column from '../../Column'\nimport Dialog, { Header } from '../../Dialog'\nimport { BoundaryProvider } from '../../Popover'\nimport MaxSlippageSelect from './MaxSlippageSelect'\nimport TransactionTtlInput from './TransactionTtlInput'\n\nexport function SettingsDialog() {\n  const [boundary, setBoundary] = useState<HTMLDivElement | null>(null)\n  const scrollbar = useScrollbar(boundary, { padded: true })\n  const resetSettings = useResetAtom(settingsAtom)\n  return (\n    <>\n      <Header title={<Trans>Settings</Trans>} ruled>\n        <TextButton onClick={resetSettings}>\n          <ThemedText.ButtonSmall>\n            <Trans>Reset</Trans>\n          </ThemedText.ButtonSmall>\n        </TextButton>\n      </Header>\n      <Column gap={1} style={{ paddingTop: '1em' }} ref={setBoundary} padded css={scrollbar}>\n        <BoundaryProvider value={boundary}>\n          <MaxSlippageSelect />\n          <TransactionTtlInput />\n        </BoundaryProvider>\n      </Column>\n    </>\n  )\n}\n\nconst SettingsButton = styled(IconButton)<{ hover: boolean }>`\n  ${SettingsIcon} {\n    transform: ${({ hover }) => hover && 'rotate(45deg)'};\n    transition: ${({ hover }) => hover && 'transform 0.25s'};\n    will-change: transform;\n  }\n`\n\nexport default function Settings({ disabled }: { disabled?: boolean }) {\n  const [open, setOpen] = useState(false)\n  const [hover, setHover] = useState(false)\n  return (\n    <>\n      <SettingsButton\n        disabled={disabled}\n        hover={hover}\n        onClick={() => setOpen(true)}\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        icon={SettingsIcon}\n      />\n      {open && (\n        <Dialog color=\"module\" onClose={() => setOpen(false)}>\n          <SettingsDialog />\n        </Dialog>\n      )}\n    </>\n  )\n}\n","export { default as StatusDialog } from './StatusDialog'\n","import { ALL_SUPPORTED_CHAIN_IDS } from 'constants/chains'\nimport { useIsAmountPopulated, useSwapInfo } from 'lib/hooks/swap'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { largeIconCss } from 'lib/icons'\nimport { Field } from 'lib/state/swap'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\nimport { TradeState } from 'state/routing/types'\n\nimport Row from '../../Row'\nimport Rule from '../../Rule'\nimport * as Caption from './Caption'\n\nconst ToolbarRow = styled(Row)`\n  padding: 0.5em 0;\n  ${largeIconCss}\n`\n\nexport default function Toolbar({ disabled }: { disabled?: boolean }) {\n  const { chainId } = useActiveWeb3React()\n  const {\n    trade: { trade, state },\n    currencies: { [Field.INPUT]: inputCurrency, [Field.OUTPUT]: outputCurrency },\n    currencyBalances: { [Field.INPUT]: balance },\n  } = useSwapInfo()\n\n  const [routeFound, routeIsLoading] = useMemo(\n    () => [Boolean(trade?.swaps), TradeState.LOADING === state || TradeState.SYNCING === state],\n    [state, trade?.swaps]\n  )\n\n  const isAmountPopulated = useIsAmountPopulated()\n\n  const caption = useMemo(() => {\n    if (disabled) {\n      return <Caption.ConnectWallet />\n    }\n\n    if (chainId && !ALL_SUPPORTED_CHAIN_IDS.includes(chainId)) {\n      return <Caption.UnsupportedNetwork />\n    }\n\n    if (balance && trade?.inputAmount.greaterThan(balance)) {\n      return <Caption.InsufficientBalance currency={trade.inputAmount.currency} />\n    }\n\n    if (inputCurrency && outputCurrency && isAmountPopulated) {\n      if (!trade || routeIsLoading) {\n        return <Caption.LoadingTrade />\n      }\n      if (!routeFound) {\n        return <Caption.InsufficientLiquidity />\n      }\n      if (trade.inputAmount && trade.outputAmount) {\n        return <Caption.Trade trade={trade} />\n      }\n    }\n\n    return <Caption.Empty />\n  }, [balance, chainId, disabled, inputCurrency, isAmountPopulated, outputCurrency, routeFound, routeIsLoading, trade])\n\n  return (\n    <>\n      <Rule />\n      <ThemedText.Caption>\n        <ToolbarRow justify=\"flex-start\" gap={0.5} iconSize={4 / 3}>\n          {caption}\n        </ToolbarRow>\n      </ThemedText.Caption>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { ALL_SUPPORTED_CHAIN_IDS } from 'constants/chains'\nimport { useAtom } from 'jotai'\nimport { SwapInfoUpdater } from 'lib/hooks/swap/useSwapInfo'\nimport useSyncConvenienceFee from 'lib/hooks/swap/useSyncConvenienceFee'\nimport useSyncSwapDefaults from 'lib/hooks/swap/useSyncSwapDefaults'\nimport { usePendingTransactions } from 'lib/hooks/transactions'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport useTokenList from 'lib/hooks/useTokenList'\nimport { displayTxHashAtom } from 'lib/state/swap'\nimport { SwapTransactionInfo, Transaction, TransactionType } from 'lib/state/transactions'\nimport { useMemo, useState } from 'react'\n\nimport Dialog from '../Dialog'\nimport Header from '../Header'\nimport { BoundaryProvider } from '../Popover'\nimport Wallet from '../Wallet'\nimport Input from './Input'\nimport Output from './Output'\nimport ReverseButton from './ReverseButton'\nimport Settings from './Settings'\nimport { StatusDialog } from './Status'\nimport SwapButton from './SwapButton'\nimport SwapPropValidator from './SwapPropValidator'\nimport Toolbar from './Toolbar'\n\nexport type DefaultAddress = string | { [chainId: number]: string | 'NATIVE' } | 'NATIVE'\n\nfunction getSwapTx(txs: { [hash: string]: Transaction }, hash?: string): Transaction<SwapTransactionInfo> | undefined {\n  if (hash) {\n    const tx = txs[hash]\n    if (tx?.info?.type === TransactionType.SWAP) {\n      return tx as Transaction<SwapTransactionInfo>\n    }\n  }\n  return\n}\n\nexport interface SwapProps {\n  tokenList?: string | TokenInfo[]\n  defaultInputAddress?: DefaultAddress\n  defaultInputAmount?: string\n  defaultOutputAddress?: DefaultAddress\n  defaultOutputAmount?: string\n  convenienceFee?: number\n  convenienceFeeRecipient?: string | { [chainId: number]: string }\n  onConnectWallet?: () => void\n}\n\nexport default function Swap(props: SwapProps) {\n  const list = useTokenList(props.tokenList)\n  useSyncSwapDefaults(props)\n  useSyncConvenienceFee(props)\n\n  const { active, account, chainId } = useActiveWeb3React()\n  const [boundary, setBoundary] = useState<HTMLDivElement | null>(null)\n\n  const [displayTxHash, setDisplayTxHash] = useAtom(displayTxHashAtom)\n  const pendingTxs = usePendingTransactions()\n  const displayTx = getSwapTx(pendingTxs, displayTxHash)\n\n  const onSupportedChain = useMemo(\n    () => chainId && ALL_SUPPORTED_CHAIN_IDS.includes(chainId) && list.some((token) => token.chainId === chainId),\n    [chainId, list]\n  )\n\n  return (\n    <SwapPropValidator {...props}>\n      {onSupportedChain && <SwapInfoUpdater />}\n      <Header title={<Trans>Swap</Trans>}>\n        {active && <Wallet disabled={!account} onClick={props.onConnectWallet} />}\n        <Settings disabled={!active} />\n      </Header>\n      <div ref={setBoundary}>\n        <BoundaryProvider value={boundary}>\n          <Input disabled={!active} />\n          <ReverseButton disabled={!active} />\n          <Output disabled={!active}>\n            <Toolbar disabled={!active} />\n            <SwapButton disabled={!account} />\n          </Output>\n        </BoundaryProvider>\n      </div>\n      {displayTx && (\n        <Dialog color=\"dialog\">\n          <StatusDialog tx={displayTx} onClose={() => setDisplayTxHash()} />\n        </Dialog>\n      )}\n    </SwapPropValidator>\n  )\n}\n","import styled, { Color, Theme } from 'lib/theme'\nimport { Children, ReactNode } from 'react'\n\nconst Row = styled.div<{\n  color?: Color\n  align?: string\n  justify?: string\n  pad?: number\n  gap?: number\n  flex?: true\n  grow?: true | 'first' | 'last'\n  children?: ReactNode\n  theme: Theme\n}>`\n  align-items: ${({ align }) => align ?? 'center'};\n  color: ${({ color, theme }) => color && theme[color]};\n  display: ${({ flex }) => (flex ? 'flex' : 'grid')};\n  flex-flow: wrap;\n  flex-grow: ${({ grow }) => grow && 1};\n  gap: ${({ gap }) => gap && `${gap}em`};\n  grid-auto-flow: column;\n  grid-template-columns: ${({ grow, children }) => {\n    if (grow === 'first') return '1fr'\n    if (grow === 'last') return `repeat(${Children.count(children) - 1}, auto) 1fr`\n    if (grow) return `repeat(${Children.count(children)}, 1fr)`\n    return undefined\n  }};\n  justify-content: ${({ justify }) => justify ?? 'space-between'};\n  padding: ${({ pad }) => pad && `0 ${pad}em`};\n`\n\nexport default Row\n","import { Icon } from 'lib/icons'\nimport styled, { Color } from 'lib/theme'\nimport { ComponentProps } from 'react'\n\nexport const BaseButton = styled.button`\n  background-color: transparent;\n  border: none;\n  border-radius: 0.5em;\n  color: currentColor;\n  cursor: pointer;\n  font-size: inherit;\n  font-weight: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0;\n\n  :disabled {\n    cursor: initial;\n    filter: saturate(0) opacity(0.4);\n  }\n`\n\nexport default styled(BaseButton)<{ color?: Color }>`\n  color: ${({ color = 'interactive', theme }) => color === 'interactive' && theme.onInteractive};\n\n  :enabled {\n    background-color: ${({ color = 'interactive', theme }) => theme[color]};\n  }\n\n  :enabled:hover {\n    background-color: ${({ color = 'interactive', theme }) => theme.onHover(theme[color])};\n  }\n\n  :disabled {\n    border: 1px solid ${({ theme }) => theme.outline};\n    color: ${({ theme }) => theme.secondary};\n    cursor: initial;\n  }\n`\n\nconst transparentButton = (defaultColor: Color) => styled(BaseButton)<{ color?: Color }>`\n  color: ${({ color = defaultColor, theme }) => theme[color]};\n\n  :enabled:hover {\n    color: ${({ color = defaultColor, theme }) => theme.onHover(theme[color])};\n  }\n`\n\nexport const TextButton = transparentButton('accent')\n\nconst SecondaryButton = transparentButton('secondary')\n\ninterface IconButtonProps {\n  icon: Icon\n  iconProps?: ComponentProps<Icon>\n}\n\nexport function IconButton({ icon: Icon, iconProps, ...props }: IconButtonProps & ComponentProps<typeof BaseButton>) {\n  return (\n    <SecondaryButton {...props}>\n      <Icon {...iconProps} />\n    </SecondaryButton>\n  )\n}\n","import styled, { Color, css, Theme } from 'lib/theme'\n\nconst Column = styled.div<{\n  align?: string\n  color?: Color\n  justify?: string\n  gap?: number\n  padded?: true\n  flex?: true\n  grow?: true\n  theme: Theme\n  css?: ReturnType<typeof css>\n}>`\n  align-items: ${({ align }) => align ?? 'center'};\n  color: ${({ color, theme }) => color && theme[color]};\n  display: ${({ flex }) => (flex ? 'flex' : 'grid')};\n  flex-direction: column;\n  flex-grow: ${({ grow }) => grow && 1};\n  gap: ${({ gap }) => gap && `${gap}em`};\n  grid-auto-flow: row;\n  grid-template-columns: 1fr;\n  justify-content: ${({ justify }) => justify ?? 'space-between'};\n  padding: ${({ padded }) => padded && '0.75em'};\n\n  ${({ css }) => css}\n`\n\nexport default Column\n","import { Currency } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { atom } from 'jotai'\nimport { atomWithImmer } from 'jotai/immer'\nimport { pickAtom } from 'lib/state/atoms'\n\nexport enum Field {\n  INPUT = 'INPUT',\n  OUTPUT = 'OUTPUT',\n}\n\nexport interface Swap {\n  independentField: Field\n  amount: string\n  [Field.INPUT]?: Currency\n  [Field.OUTPUT]?: Currency\n}\n\nexport const swapAtom = atomWithImmer<Swap>({\n  independentField: Field.INPUT,\n  amount: '',\n  [Field.INPUT]: nativeOnChain(SupportedChainId.AVALANCHE),\n})\n\nexport const independentFieldAtom = pickAtom(swapAtom, 'independentField')\n\n// If set to a transaction hash, that transaction will display in a status dialog.\nexport const displayTxHashAtom = atom<string | undefined>(undefined)\n\nexport const feeOptionsAtom = atom<FeeOptions | undefined>(undefined)\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Draft } from 'immer'\nimport { atom, WritableAtom } from 'jotai'\nimport { withImmer } from 'jotai/immer'\n\n/**\n * Creates a derived atom whose value is the picked object property.\n * By default, the setter acts as a primitive atom's, changing the original atom.\n * A custom setter may also be passed, which uses an Immer Draft so that it may be mutated directly.\n */\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter?: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key] = (draft, update) =>\n    update as Draft<Value>[Key]\n): WritableAtom<Value[Key], Update> {\n  return atom(\n    (get) => get(anAtom)[key],\n    (get, set, update: Update) =>\n      set(withImmer(anAtom), (value) => {\n        const derived = setter(value[key], update)\n        value[key] = derived\n      })\n  )\n}\n\n/** Sets a togglable atom to invert its state at the next render. */\nexport function setTogglable(draft: boolean) {\n  return !draft\n}\n","import styled from 'lib/theme'\n\nconst Rule = styled.hr<{ padded?: true; scrollingEdge?: 'top' | 'bottom' }>`\n  border: none;\n  border-bottom: 1px solid ${({ theme }) => theme.outline};\n  margin: 0 ${({ padded }) => (padded ? '0.75em' : 0)};\n  margin-bottom: ${({ scrollingEdge }) => (scrollingEdge === 'bottom' ? -1 : 0)}px;\n  margin-top: ${({ scrollingEdge }) => (scrollingEdge !== 'bottom' ? -1 : 0)}px;\n`\n\nexport default Rule\n","import { Percent } from '@uniswap/sdk-core'\nimport { atomWithReset } from 'jotai/utils'\n\nimport { pickAtom, setTogglable } from './atoms'\n\nexport const MAX_VALID_SLIPPAGE = new Percent(1, 2)\nexport const MIN_HIGH_SLIPPAGE = new Percent(1, 100)\n\ninterface Settings {\n  autoSlippage: boolean // if true, slippage will use the default calculation\n  maxSlippage: number | undefined // expressed as a percent\n  transactionTtl: number | undefined\n  mockTogglable: boolean\n  clientSideRouter: boolean // whether to use the client-side router or query the remote API\n}\n\nconst initialSettings: Settings = {\n  autoSlippage: true,\n  maxSlippage: undefined,\n  transactionTtl: undefined,\n  mockTogglable: true,\n  clientSideRouter: true,\n}\n\nexport const settingsAtom = atomWithReset(initialSettings)\nexport const autoSlippageAtom = pickAtom(settingsAtom, 'autoSlippage')\nexport const maxSlippageAtom = pickAtom(settingsAtom, 'maxSlippage')\nexport const transactionTtlAtom = pickAtom(settingsAtom, 'transactionTtl')\nexport const mockTogglableAtom = pickAtom(settingsAtom, 'mockTogglable', setTogglable)\nexport const clientSideRouterAtom = pickAtom(settingsAtom, 'clientSideRouter')\n","import 'wicg-inert'\n\nimport useUnmount from 'lib/hooks/useUnmount'\nimport { X } from 'lib/icons'\nimport styled, { Color, Layer, ThemeProvider } from 'lib/theme'\nimport { createContext, ReactElement, ReactNode, useContext, useEffect, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { IconButton } from './Button'\nimport Column from './Column'\nimport { default as BaseHeader } from './Header'\nimport Rule from './Rule'\n\n// Include inert from wicg-inert\ndeclare global {\n  interface HTMLElement {\n    inert?: boolean\n  }\n}\n\nconst Context = createContext({\n  element: null as HTMLElement | null,\n  active: false,\n  setActive: (active: boolean) => undefined as void,\n})\n\ninterface ProviderProps {\n  value: HTMLElement | null\n  children: ReactNode\n}\n\nexport function Provider({ value, children }: ProviderProps) {\n  // If a Dialog is active, mark the main content inert\n  const ref = useRef<HTMLDivElement>(null)\n  const [active, setActive] = useState(false)\n  const context = { element: value, active, setActive }\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.inert = active\n    }\n  }, [active])\n  return (\n    <div ref={ref}>\n      <Context.Provider value={context}>{children}</Context.Provider>\n    </div>\n  )\n}\n\nconst OnCloseContext = createContext<() => void>(() => void 0)\n\ninterface HeaderProps {\n  title?: ReactElement\n  ruled?: boolean\n  children?: ReactNode\n}\n\nexport function Header({ title, children, ruled }: HeaderProps) {\n  return (\n    <>\n      <Column>\n        <BaseHeader title={title}>\n          {children}\n          <IconButton color=\"primary\" onClick={useContext(OnCloseContext)} icon={X} />\n        </BaseHeader>\n        {ruled && <Rule padded />}\n      </Column>\n    </>\n  )\n}\n\nexport const Modal = styled.div<{ color: Color }>`\n  background-color: ${({ color, theme }) => theme[color]};\n  border-radius: ${({ theme }) => theme.borderRadius * 0.75}em;\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 0.5em);\n  left: 0;\n  margin: 0.25em;\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  width: calc(100% - 0.5em);\n  z-index: ${Layer.DIALOG};\n`\n\ninterface DialogProps {\n  color: Color\n  children: ReactNode\n  onClose?: () => void\n}\n\nexport default function Dialog({ color, children, onClose = () => void 0 }: DialogProps) {\n  const context = useContext(Context)\n  useEffect(() => {\n    context.setActive(true)\n    return () => context.setActive(false)\n  }, [context])\n  const dialog = useRef<HTMLDivElement>(null)\n  useUnmount(dialog)\n  useEffect(() => {\n    const close = (e: KeyboardEvent) => e.key === 'Escape' && onClose?.()\n    document.addEventListener('keydown', close, true)\n    return () => document.removeEventListener('keydown', close, true)\n  }, [onClose])\n  return (\n    context.element &&\n    createPortal(\n      <ThemeProvider>\n        <Modal color={color} ref={dialog}>\n          <OnCloseContext.Provider value={onClose}>{children}</OnCloseContext.Provider>\n        </Modal>\n      </ThemeProvider>,\n      context.element\n    )\n  )\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport useCurrencyLogoURIs from 'lib/hooks/useCurrencyLogoURIs'\nimport { Slash } from 'lib/icons'\nimport styled from 'lib/theme'\nimport { useCallback, useEffect, useState } from 'react'\n\nconst badSrcs = new Set<string>()\n\ninterface TokenImgProps {\n  className?: string\n  token: Currency\n}\n\nfunction TokenImg({ className, token }: TokenImgProps) {\n  const srcs = useCurrencyLogoURIs(token)\n  const [src, setSrc] = useState<string | undefined>()\n  useEffect(() => {\n    setSrc(srcs.find((src) => !badSrcs.has(src)))\n  }, [srcs])\n  const onError = useCallback(() => {\n    if (src) badSrcs.add(src)\n    setSrc(srcs.find((src) => !badSrcs.has(src)))\n  }, [src, srcs])\n\n  if (src) {\n    return <img className={className} src={src} alt={token.name || token.symbol} onError={onError} />\n  }\n  return <Slash className={className} color=\"secondary\" />\n}\n\nexport default styled(TokenImg)<{ size?: number }>`\n  // radial-gradient calculates distance from the corner, not the edge: divide by sqrt(2)\n  background: radial-gradient(\n    ${({ theme }) => theme.module} calc(100% / ${Math.sqrt(2)} - 1.5px),\n    ${({ theme }) => theme.outline} calc(100% / ${Math.sqrt(2)} - 1.5px)\n  );\n  border-radius: 100%;\n  height: ${({ size }) => size || 1}em;\n  width: ${({ size }) => size || 1}em;\n`\n","import { css } from 'lib/theme'\nimport { useEffect, useMemo, useState } from 'react'\n\nimport useNativeEvent from './useNativeEvent'\n\nconst overflowCss = css`\n  overflow-y: scroll;\n`\n\n/** Customizes the scrollbar for vertical overflow. */\nconst scrollbarCss = (padded: boolean) => css`\n  overflow-y: scroll;\n\n  ::-webkit-scrollbar {\n    width: 1.25em;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: radial-gradient(\n        closest-corner at 0.25em 0.25em,\n        ${({ theme }) => theme.interactive} 0.25em,\n        transparent 0.25em\n      ),\n      linear-gradient(\n        to bottom,\n        #ffffff00 0.25em,\n        ${({ theme }) => theme.interactive} 0.25em,\n        ${({ theme }) => theme.interactive} calc(100% - 0.25em),\n        #ffffff00 calc(100% - 0.25em)\n      ),\n      radial-gradient(\n        closest-corner at 0.25em calc(100% - 0.25em),\n        ${({ theme }) => theme.interactive} 0.25em,\n        #ffffff00 0.25em\n      );\n    background-clip: padding-box;\n    border: none;\n    ${padded ? 'border-right' : 'border-left'}: 0.75em solid transparent;\n  }\n\n  @supports not selector(::-webkit-scrollbar-thumb) {\n    scrollbar-color: ${({ theme }) => theme.interactive} transparent;\n  }\n`\n\ninterface ScrollbarOptions {\n  padded?: boolean\n}\n\nexport default function useScrollbar(element: HTMLElement | null, { padded = false }: ScrollbarOptions = {}) {\n  const [overflow, setOverflow] = useState(true)\n  useEffect(() => {\n    setOverflow(hasOverflow(element))\n  }, [element])\n  useNativeEvent(element, 'transitionend', () => setOverflow(hasOverflow(element)))\n  return useMemo(() => (overflow ? scrollbarCss(padded) : overflowCss), [overflow, padded])\n\n  function hasOverflow(element: HTMLElement | null) {\n    if (!element) {\n      return true\n    }\n    return element.scrollHeight > element.clientHeight\n  }\n}\n","import { useEffect } from 'react'\n\nexport default function useNativeEvent(\n  element: HTMLElement | null,\n  ...eventListener: Parameters<HTMLElement['addEventListener']>\n) {\n  useEffect(() => {\n    element?.addEventListener(...eventListener)\n    return () => element?.removeEventListener(...eventListener)\n  }, [element, eventListener])\n}\n","import { RefObject, useEffect } from 'react'\n\nexport const UNMOUNTING = 'unmounting'\n\n/**\n * Delays a node's unmounting so that an animation may be applied.\n * An animation *must* be applied, or the node will not unmount.\n */\nexport default function useUnmount(node: RefObject<HTMLElement>) {\n  useEffect(() => {\n    const current = node.current\n    const parent = current?.parentElement\n    const removeChild = parent?.removeChild\n    if (parent && removeChild) {\n      parent.removeChild = function <T extends Node>(child: T) {\n        if ((child as Node) === current) {\n          current.classList.add(UNMOUNTING)\n          current.onanimationend = () => {\n            removeChild.call(parent, child)\n          }\n          return child\n        } else {\n          return removeChild.call(parent, child) as T\n        }\n      }\n    }\n    return () => {\n      if (parent && removeChild) {\n        parent.removeChild = removeChild\n      }\n    }\n  }, [node])\n}\n","import JSBI from 'jsbi'\nimport styled, { css } from 'lib/theme'\nimport { forwardRef, HTMLProps, useCallback, useEffect, useState } from 'react'\n\nconst Input = styled.input`\n  -webkit-appearance: textfield;\n  background-color: transparent;\n  border: none;\n  color: currentColor;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  line-height: inherit;\n  margin: 0;\n  outline: none;\n  overflow: hidden;\n  padding: 0;\n  text-align: left;\n  text-overflow: ellipsis;\n  width: 100%;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.secondary};\n  }\n`\n\nexport default Input\n\ninterface StringInputProps extends Omit<HTMLProps<HTMLInputElement>, 'onChange' | 'as' | 'value'> {\n  value: string\n  onChange: (input: string) => void\n}\n\nexport const StringInput = forwardRef<HTMLInputElement, StringInputProps>(function StringInput(\n  { value, onChange, ...props }: StringInputProps,\n  ref\n) {\n  return (\n    <Input\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      // universal input options\n      inputMode=\"text\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      placeholder={props.placeholder || '-'}\n      minLength={1}\n      spellCheck=\"false\"\n      ref={ref as any}\n      {...props}\n    />\n  )\n})\n\ninterface NumericInputProps extends Omit<HTMLProps<HTMLInputElement>, 'onChange' | 'as' | 'value'> {\n  value: string\n  onChange: (input: string) => void\n}\n\ninterface EnforcedNumericInputProps extends NumericInputProps {\n  // Validates nextUserInput; returns stringified value, or null if invalid\n  enforcer: (nextUserInput: string) => string | null\n}\n\nfunction isNumericallyEqual(a: string, b: string) {\n  const [aInteger, aDecimal] = a.split('.')\n  const [bInteger, bDecimal] = b.split('.')\n  return (\n    JSBI.equal(JSBI.BigInt(aInteger ?? 0), JSBI.BigInt(bInteger ?? 0)) &&\n    JSBI.equal(JSBI.BigInt(aDecimal ?? 0), JSBI.BigInt(bDecimal ?? 0))\n  )\n}\n\nconst NumericInput = forwardRef<HTMLInputElement, EnforcedNumericInputProps>(function NumericInput(\n  { value, onChange, enforcer, pattern, ...props }: EnforcedNumericInputProps,\n  ref\n) {\n  const [state, setState] = useState(value ?? '')\n  useEffect(() => {\n    if (!isNumericallyEqual(state, value)) {\n      setState(value ?? '')\n    }\n  }, [value, state, setState])\n\n  const validateChange = useCallback(\n    (event) => {\n      const nextInput = enforcer(event.target.value.replace(/,/g, '.'))\n      if (nextInput !== null) {\n        setState(nextInput ?? '')\n        if (!isNumericallyEqual(nextInput, value)) {\n          onChange(nextInput)\n        }\n      }\n    },\n    [value, onChange, enforcer]\n  )\n\n  return (\n    <Input\n      value={state}\n      onChange={validateChange}\n      // universal input options\n      inputMode=\"decimal\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern={pattern}\n      placeholder={props.placeholder || '0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n      ref={ref as any}\n      {...props}\n    />\n  )\n})\n\nconst integerRegexp = /^\\d*$/\nconst integerEnforcer = (nextUserInput: string) => {\n  if (nextUserInput === '' || integerRegexp.test(nextUserInput)) {\n    const nextInput = parseInt(nextUserInput)\n    return isNaN(nextInput) ? '' : nextInput.toString()\n  }\n  return null\n}\nexport const IntegerInput = forwardRef(function IntegerInput(props: NumericInputProps, ref) {\n  return <NumericInput pattern=\"^[0-9]*$\" enforcer={integerEnforcer} ref={ref as any} {...props} />\n})\n\nconst decimalRegexp = /^\\d*(?:[.])?\\d*$/\nconst decimalEnforcer = (nextUserInput: string) => {\n  if (nextUserInput === '') {\n    return ''\n  } else if (nextUserInput === '.') {\n    return '0.'\n  } else if (decimalRegexp.test(nextUserInput)) {\n    return nextUserInput\n  }\n  return null\n}\nexport const DecimalInput = forwardRef(function DecimalInput(props: NumericInputProps, ref) {\n  return <NumericInput pattern=\"^[0-9]*[.,]?[0-9]*$\" enforcer={decimalEnforcer} ref={ref as any} {...props} />\n})\n\nexport const inputCss = css`\n  background-color: ${({ theme }) => theme.container};\n  border: 1px solid ${({ theme }) => theme.container};\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  cursor: text;\n  padding: calc(0.5em - 1px);\n\n  :hover:not(:focus-within) {\n    background-color: ${({ theme }) => theme.onHover(theme.container)};\n    border-color: ${({ theme }) => theme.onHover(theme.container)};\n  }\n\n  :focus-within {\n    border-color: ${({ theme }) => theme.active};\n  }\n`\n","import { largeIconCss } from 'lib/icons'\nimport styled, { ThemedText } from 'lib/theme'\nimport { ReactElement, ReactNode } from 'react'\n\nimport Row from './Row'\n\nconst HeaderRow = styled(Row)`\n  height: 1.75em;\n  margin: 0 0.75em 0.75em;\n  padding-top: 0.5em;\n  ${largeIconCss}\n`\n\nexport interface HeaderProps {\n  title?: ReactElement\n  children: ReactNode\n}\n\nexport default function Header({ title, children }: HeaderProps) {\n  return (\n    <HeaderRow iconSize={1.2}>\n      <Row gap={0.5}>{title && <ThemedText.Subhead1>{title}</ThemedText.Subhead1>}</Row>\n      <Row gap={1}>{children}</Row>\n    </HeaderRow>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { atom } from 'jotai'\nimport { useAtomValue, useUpdateAtom } from 'jotai/utils'\nimport { useCurrencyBalances } from 'lib/hooks/useCurrencyBalance'\nimport { feeOptionsAtom, Field, swapAtom } from 'lib/state/swap'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ReactNode, useEffect, useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { isAddress } from '../../../utils'\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport useAllowedSlippage from '../useAllowedSlippage'\nimport { useBestTrade } from './useBestTrade'\n\ninterface SwapInfo {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  currencyAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  trade: {\n    trade?: InterfaceTrade<Currency, Currency, TradeType>\n    state: TradeState\n  }\n  allowedSlippage: Percent\n  feeOptions: FeeOptions | undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: { [address: string]: true } = {\n  '0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10': true, // v2 factory\n  '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106': true, // v2 router 01\n  '0x60aE616a2155Ee3d9A68541Ba4544862310933d4': true, // v2 router 02\n}\n\n// from the current swap inputs, compute the best trade and return it.\nfunction useComputeSwapInfo(): SwapInfo {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    amount,\n    [Field.INPUT]: inputCurrency,\n    [Field.OUTPUT]: outputCurrency,\n  } = useAtomValue(swapAtom)\n\n  const feeOptions = useAtomValue(feeOptionsAtom)\n\n  const to = account\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency])\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = useMemo(\n    () => tryParseCurrencyAmount(amount, (isExactIn ? inputCurrency : outputCurrency) ?? undefined),\n    [inputCurrency, isExactIn, outputCurrency, amount]\n  )\n\n  //@TODO(ianlapham): this would eventually be replaced with routing api logic.\n  const trade = useBestTrade(\n    isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    parsedAmount,\n    (isExactIn ? outputCurrency : inputCurrency) ?? undefined\n  )\n\n  const currencies = useMemo(\n    () => ({\n      [Field.INPUT]: inputCurrency ?? undefined,\n      [Field.OUTPUT]: outputCurrency ?? undefined,\n    }),\n    [inputCurrency, outputCurrency]\n  )\n\n  const currencyBalances = useMemo(\n    () => ({\n      [Field.INPUT]: relevantTokenBalances[0],\n      [Field.OUTPUT]: relevantTokenBalances[1],\n    }),\n    [relevantTokenBalances]\n  )\n\n  const currencyAmounts = useMemo(\n    () => ({\n      [Field.INPUT]: trade.trade?.inputAmount,\n      [Field.OUTPUT]: trade.trade?.outputAmount,\n    }),\n    [trade.trade?.inputAmount, trade.trade?.outputAmount]\n  )\n\n  const allowedSlippage = useAllowedSlippage(trade.trade)\n\n  const inputError = useMemo(() => {\n    let inputError: ReactNode | undefined\n\n    if (!account) {\n      inputError = <Trans>Connect Wallet</Trans>\n    }\n\n    if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n      inputError = inputError ?? <Trans>Select token</Trans>\n    }\n\n    if (!parsedAmount) {\n      inputError = inputError ?? <Trans>Enter an amount</Trans>\n    }\n\n    const formattedTo = isAddress(to)\n    if (!to || !formattedTo) {\n      inputError = inputError ?? <Trans>Enter a recipient</Trans>\n    } else {\n      if (BAD_RECIPIENT_ADDRESSES[formattedTo]) {\n        inputError = inputError ?? <Trans>Invalid recipient</Trans>\n      }\n    }\n\n    // compare input balance to max input based on version\n    const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], trade.trade?.maximumAmountIn(allowedSlippage)]\n\n    if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n      inputError = <Trans>Insufficient {amountIn.currency.symbol} balance</Trans>\n    }\n\n    return inputError\n  }, [account, allowedSlippage, currencies, currencyBalances, parsedAmount, to, trade.trade])\n\n  return useMemo(\n    () => ({\n      currencies,\n      currencyBalances,\n      currencyAmounts,\n      inputError,\n      trade,\n      allowedSlippage,\n      feeOptions,\n    }),\n    [currencies, currencyBalances, currencyAmounts, inputError, trade, allowedSlippage, feeOptions]\n  )\n}\n\nconst swapInfoAtom = atom<SwapInfo>({\n  currencies: {},\n  currencyBalances: {},\n  currencyAmounts: {},\n  trade: { state: TradeState.INVALID },\n  allowedSlippage: new Percent(0),\n  feeOptions: undefined,\n})\n\nexport function SwapInfoUpdater() {\n  const setSwapInfo = useUpdateAtom(swapInfoAtom)\n  const swapInfo = useComputeSwapInfo()\n  useEffect(() => {\n    setSwapInfo(swapInfo)\n  }, [swapInfo, setSwapInfo])\n  return null\n}\n\n/** Requires that SwapInfoUpdater be installed in the DOM tree. **/\nexport default function useSwapInfo(): SwapInfo {\n  return useAtomValue(swapInfoAtom)\n}\n","import { detectOverflow } from '@popperjs/core';\n\nvar maxSize = {\n  name: 'maxSize',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['offset', 'preventOverflow', 'flip'],\n  fn: function fn(_ref) {\n    var state = _ref.state,\n        name = _ref.name,\n        options = _ref.options;\n    var overflow = detectOverflow(state, options);\n\n    var _ref2 = state.modifiersData.preventOverflow || {\n      x: 0,\n      y: 0\n    },\n        x = _ref2.x,\n        y = _ref2.y;\n\n    var _state$rects$popper = state.rects.popper,\n        width = _state$rects$popper.width,\n        height = _state$rects$popper.height;\n\n    var _state$placement$spli = state.placement.split('-'),\n        basePlacement = _state$placement$spli[0];\n\n    var widthProp = basePlacement === 'left' ? 'left' : 'right';\n    var heightProp = basePlacement === 'top' ? 'top' : 'bottom';\n    state.modifiersData[name] = {\n      width: width - overflow[widthProp] - x,\n      height: height - overflow[heightProp] - y\n    };\n  }\n};\n\nexport default maxSize;\n","import { Options, Placement } from '@popperjs/core'\nimport styled, { Layer } from 'lib/theme'\nimport maxSize from 'popper-max-size-modifier'\nimport React, { createContext, useContext, useMemo, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport { usePopper } from 'react-popper'\n\nconst BoundaryContext = createContext<HTMLDivElement | null>(null)\n\nexport const BoundaryProvider = BoundaryContext.Provider\n\nconst PopoverContainer = styled.div<{ show: boolean }>`\n  background-color: ${({ theme }) => theme.dialog};\n  border: 1px solid ${({ theme }) => theme.outline};\n  border-radius: 0.5em;\n  opacity: ${(props) => (props.show ? 1 : 0)};\n  padding: 8px;\n  transition: visibility 0.25s linear, opacity 0.25s linear;\n  visibility: ${(props) => (props.show ? 'visible' : 'hidden')};\n  z-index: ${Layer.TOOLTIP};\n`\n\nconst Reference = styled.div`\n  display: inline-block;\n`\n\nconst Arrow = styled.div`\n  height: 8px;\n  width: 8px;\n  z-index: ${Layer.TOOLTIP};\n\n  ::before {\n    background: ${({ theme }) => theme.dialog};\n    border: 1px solid ${({ theme }) => theme.outline};\n    content: '';\n    height: 8px;\n    position: absolute;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &.arrow-top {\n    bottom: -4px;\n    ::before {\n      border-radius: 1px;\n      border-left: none;\n      border-top: none;\n    }\n  }\n\n  &.arrow-bottom {\n    top: -5px; // includes -1px from border\n    ::before {\n      border-bottom: none;\n      border-right: none;\n      border-radius: 1px;\n    }\n  }\n\n  &.arrow-left {\n    right: -4px;\n    ::before {\n      border-bottom: none;\n      border-left: none;\n      border-radius: 1px;\n    }\n  }\n\n  &.arrow-right {\n    left: -5px; // includes -1px from border\n    ::before {\n      border-radius: 1px;\n      border-right: none;\n      border-top: none;\n    }\n  }\n`\n\nexport interface PopoverProps {\n  content: React.ReactNode\n  show: boolean\n  children: React.ReactNode\n  placement: Placement\n  offset?: number\n  contained?: true\n}\n\nexport default function Popover({ content, show, children, placement, offset, contained }: PopoverProps) {\n  const boundary = useContext(BoundaryContext)\n  const reference = useRef<HTMLDivElement>(null)\n\n  // Use callback refs to be notified when instantiated\n  const [popover, setPopover] = useState<HTMLDivElement | null>(null)\n  const [arrow, setArrow] = useState<HTMLDivElement | null>(null)\n\n  const options = useMemo((): Options => {\n    const modifiers: Options['modifiers'] = [\n      { name: 'offset', options: { offset: [4, offset || 4] } },\n      { name: 'arrow', options: { element: arrow, padding: 4 } },\n    ]\n    if (contained) {\n      modifiers.push(\n        { name: 'preventOverflow', options: { boundary, padding: 8 } },\n        { name: 'flip', options: { boundary, padding: 8 } },\n        { ...maxSize, options: { boundary, padding: 8 } },\n        {\n          name: 'applyMaxSize',\n          enabled: true,\n          phase: 'beforeWrite',\n          requires: ['maxSize'],\n          fn({ state }) {\n            const { width } = state.modifiersData.maxSize\n            state.styles.popper = {\n              ...state.styles.popper,\n              maxWidth: `${width}px`,\n            }\n          },\n        }\n      )\n    }\n    return {\n      placement,\n      strategy: 'absolute',\n      modifiers,\n    }\n  }, [offset, arrow, contained, placement, boundary])\n\n  const { styles, attributes } = usePopper(reference.current, popover, options)\n\n  return (\n    <>\n      <Reference ref={reference}>{children}</Reference>\n      {boundary &&\n        createPortal(\n          <PopoverContainer show={show} ref={setPopover} style={styles.popper} {...attributes.popper}>\n            {content}\n            <Arrow\n              className={`arrow-${attributes.popper?.['data-popper-placement'] ?? ''}`}\n              ref={setArrow}\n              style={styles.arrow}\n              {...attributes.arrow}\n            />\n          </PopoverContainer>,\n          boundary\n        )}\n    </>\n  )\n}\n","import { AlertTriangle, Icon, LargeIcon } from 'lib/icons'\nimport styled, { Color, css, keyframes, ThemedText } from 'lib/theme'\nimport { ReactNode, useMemo } from 'react'\n\nimport Button from './Button'\nimport Row from './Row'\n\nconst StyledButton = styled(Button)`\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  flex-grow: 1;\n  transition: background-color 0.25s ease-out, flex-grow 0.25s ease-out, padding 0.25s ease-out;\n\n  :disabled {\n    margin: -1px;\n  }\n`\n\nconst UpdateRow = styled(Row)``\n\nconst grow = keyframes`\n  from {\n    opacity: 0;\n    width: 0;\n  }\n  to {\n    opacity: 1;\n    width: max-content;\n  }\n`\n\nconst updateCss = css`\n  border: 1px solid ${({ theme }) => theme.outline};\n  padding: calc(0.25em - 1px);\n  padding-left: calc(0.75em - 1px);\n\n  ${UpdateRow} {\n    animation: ${grow} 0.25s ease-in;\n    white-space: nowrap;\n  }\n\n  ${StyledButton} {\n    border-radius: ${({ theme }) => theme.borderRadius * 0.75}em;\n    flex-grow: 0;\n    padding: 1em;\n  }\n`\n\nexport const Overlay = styled(Row)<{ update?: boolean }>`\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  flex-direction: row-reverse;\n  min-height: 3.5em;\n  transition: padding 0.25s ease-out;\n\n  ${({ update }) => update && updateCss}\n`\n\nexport interface ActionButtonProps {\n  color?: Color\n  disabled?: boolean\n  update?: { message: ReactNode; action: ReactNode; icon?: Icon }\n  onClick: () => void\n  onUpdate?: () => void\n  children: ReactNode\n}\n\nexport default function ActionButton({\n  color = 'accent',\n  disabled,\n  update,\n  onClick,\n  onUpdate,\n  children,\n}: ActionButtonProps) {\n  const textColor = useMemo(() => (color === 'accent' && !disabled ? 'onAccent' : 'currentColor'), [color, disabled])\n  return (\n    <Overlay update={Boolean(update)} flex align=\"stretch\">\n      <StyledButton color={color} disabled={disabled} onClick={update ? onUpdate : onClick}>\n        <ThemedText.TransitionButton buttonSize={update ? 'medium' : 'large'} color={textColor}>\n          {update ? update.action : children}\n        </ThemedText.TransitionButton>\n      </StyledButton>\n      {update && (\n        <UpdateRow gap={0.5}>\n          <LargeIcon color=\"currentColor\" icon={update.icon || AlertTriangle} />\n          <ThemedText.Subhead2>{update?.message}</ThemedText.Subhead2>\n        </UpdateRow>\n      )}\n    </Overlay>\n  )\n}\n","import { Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useUSDCPrice'\nimport { useEffect, useMemo, useState } from 'react'\nimport { GetQuoteResult, InterfaceTrade, TradeState } from 'state/routing/types'\nimport { computeRoutes, transformRoutesToTrade } from 'state/routing/utils'\n\nimport useActiveWeb3React from '../useActiveWeb3React'\nimport { getClientSideQuote } from './clientSideSmartOrderRouter'\nimport { useRoutingAPIArguments } from './useRoutingAPIArguments'\n\nconst protocols: Protocol[] = [Protocol.V2, Protocol.V3]\nconst config = { protocols }\n\nexport default function useClientSideSmartOrderRouterTrade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined\n} {\n  const chainId = amountSpecified?.currency.chainId\n  const { library } = useActiveWeb3React()\n\n  const [currencyIn, currencyOut]: [Currency | undefined, Currency | undefined] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [amountSpecified, otherCurrency, tradeType]\n  )\n\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n    useClientSideRouter: true,\n  })\n  const params = useMemo(() => chainId && library && { chainId, provider: library }, [chainId, library])\n\n  const [loading, setLoading] = useState(false)\n  const [{ quoteResult, error }, setFetchedResult] = useState<{\n    quoteResult: GetQuoteResult | undefined\n    error: unknown\n  }>({\n    quoteResult: undefined,\n    error: undefined,\n  })\n\n  // When arguments update, make a new call to SOR for updated quote\n  useEffect(() => {\n    setLoading(true)\n    fetchQuote()\n\n    async function fetchQuote() {\n      try {\n        if (queryArgs && params) {\n          const result = await getClientSideQuote(queryArgs, params, config)\n          setFetchedResult({\n            quoteResult: result.data,\n            error: result.error,\n          })\n        }\n      } catch (e) {\n        setFetchedResult({\n          quoteResult: undefined,\n          error: true,\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n  }, [queryArgs, params])\n\n  const route = useMemo(\n    () => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult),\n    [currencyIn, currencyOut, quoteResult, tradeType]\n  )\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = useStablecoinAmountFromFiatValue(quoteResult?.gasUseEstimateUSD) ?? null\n\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (loading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    let otherAmount = undefined\n    if (tradeType === TradeType.EXACT_INPUT && currencyOut && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote)\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT && currencyIn && quoteResult) {\n      otherAmount = CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote)\n    }\n\n    if (error || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, gasUseEstimateUSD)\n      return {\n        // always return VALID regardless of isFetching status\n        state: TradeState.VALID,\n        trade,\n      }\n    } catch (e) {\n      console.debug('transformRoutesToTrade failed: ', e)\n      return { state: TradeState.INVALID, trade: undefined }\n    }\n  }, [currencyIn, currencyOut, loading, quoteResult, tradeType, error, route, queryArgs, gasUseEstimateUSD])\n}\n","import { Placement } from '@popperjs/core'\nimport { HelpCircle, Icon } from 'lib/icons'\nimport styled from 'lib/theme'\nimport { ComponentProps, ReactNode, useCallback, useState } from 'react'\n\nimport { IconButton } from './Button'\nimport Popover from './Popover'\n\nexport interface TooltipHandlers {\n  onMouseEnter: () => void\n  onMouseLeave: () => void\n  onFocus: () => void\n  onBlur: () => void\n}\n\nexport function useTooltip(): [boolean, (show: boolean) => void, TooltipHandlers] {\n  const [show, setShow] = useState(false)\n  const enable = useCallback(() => setShow(true), [])\n  const disable = useCallback(() => setShow(false), [])\n  return [show, setShow, { onMouseEnter: enable, onMouseLeave: disable, onFocus: enable, onBlur: disable }]\n}\n\nconst IconTooltip = styled(IconButton)`\n  cursor: help;\n`\n\ninterface TooltipProps {\n  icon?: Icon\n  iconProps?: ComponentProps<Icon>\n  children: ReactNode\n  placement?: Placement\n  offset?: number\n  contained?: true\n}\n\nexport default function Tooltip({\n  icon: Icon = HelpCircle,\n  iconProps,\n  children,\n  placement = 'auto',\n  offset,\n  contained,\n}: TooltipProps) {\n  const [showTooltip, , tooltipProps] = useTooltip()\n  return (\n    <Popover content={children} show={showTooltip} placement={placement} offset={offset} contained={contained}>\n      <IconTooltip icon={Icon} iconProps={iconProps} {...tooltipProps} />\n    </Popover>\n  )\n}\n","import { TransactionReceipt, TransactionResponse } from '@ethersproject/abstract-provider'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { atomWithImmer } from 'jotai/immer'\n\nexport enum TransactionType {\n  APPROVAL,\n  SWAP,\n}\n\ninterface BaseTransactionInfo {\n  type: TransactionType\n  response: TransactionResponse\n}\n\nexport interface ApprovalTransactionInfo extends BaseTransactionInfo {\n  type: TransactionType.APPROVAL\n  tokenAddress: string\n  spenderAddress: string\n}\n\nexport interface SwapTransactionInfo extends BaseTransactionInfo {\n  type: TransactionType.SWAP\n  tradeType: TradeType\n  inputCurrencyAmount: CurrencyAmount<Currency>\n  outputCurrencyAmount: CurrencyAmount<Currency>\n}\n\nexport interface InputSwapTransactionInfo extends SwapTransactionInfo {\n  tradeType: TradeType.EXACT_INPUT\n  expectedOutputCurrencyAmount: string\n  minimumOutputCurrencyAmount: string\n}\n\nexport interface OutputSwapTransactionInfo extends SwapTransactionInfo {\n  tradeType: TradeType.EXACT_OUTPUT\n  expectedInputCurrencyAmount: string\n  maximumInputCurrencyAmount: string\n}\n\nexport type TransactionInfo = ApprovalTransactionInfo | SwapTransactionInfo\n\nexport interface Transaction<T extends TransactionInfo = TransactionInfo> {\n  addedTime: number\n  lastCheckedBlockNumber?: number\n  receipt?: TransactionReceipt\n  info: T\n}\n\nexport const transactionsAtom = atomWithImmer<{\n  [chainId: string]: { [hash: string]: Transaction }\n}>({})\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useAtomValue } from 'jotai/utils'\nimport { autoSlippageAtom, maxSlippageAtom } from 'lib/state/settings'\nimport { InterfaceTrade } from 'state/routing/types'\n\nexport function toPercent(maxSlippage: number | undefined): Percent | undefined {\n  if (!maxSlippage) return undefined\n  const numerator = Math.floor(maxSlippage * 100)\n  return new Percent(numerator, 10_000)\n}\n\n/** Returns the user-inputted max slippage. */\nexport default function useMaxSlippage(trade: InterfaceTrade<Currency, Currency, TradeType> | undefined): Percent {\n  const autoSlippage = useAutoSlippageTolerance(trade)\n  const maxSlippage = toPercent(useAtomValue(maxSlippageAtom))\n  return useAtomValue(autoSlippageAtom) ? autoSlippage : maxSlippage ?? autoSlippage\n}\n","import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useClientSideV3Trade } from 'hooks/useClientSideV3Trade'\nimport useDebounce from 'hooks/useDebounce'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport useClientSideSmartOrderRouterTrade from '../routing/useClientSideSmartOrderRouterTrade'\n\n/**\n * Returns the currency amount from independent field, currency from independent field,\n * and currency from dependent field.\n */\nfunction getTradeInputs(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  tradeType: TradeType\n): [CurrencyAmount<Currency> | undefined, Currency | undefined, Currency | undefined] {\n  if (trade) {\n    if (tradeType === TradeType.EXACT_INPUT) {\n      return [trade.inputAmount, trade.inputAmount.currency, trade.outputAmount.currency]\n    }\n    if (tradeType === TradeType.EXACT_OUTPUT) {\n      return [trade.outputAmount, trade.outputAmount.currency, trade.inputAmount.currency]\n    }\n  }\n  return [undefined, undefined, undefined]\n}\n\ninterface TradeDebouncingParams {\n  amounts: [CurrencyAmount<Currency> | undefined, CurrencyAmount<Currency> | undefined]\n  indepdenentCurrencies: [Currency | undefined, Currency | undefined]\n  dependentCurrencies: [Currency | undefined, Currency | undefined]\n}\n\n/**\n * Returns wether debounced values are stale compared to latest values from trade.\n */\nfunction isTradeDebouncing({ amounts, indepdenentCurrencies, dependentCurrencies }: TradeDebouncingParams): boolean {\n  // Ensure that amount from user input matches latest trade.\n  const amountsMatch = amounts[0] && amounts[1]?.equalTo(amounts[0])\n\n  // Ensure active swap currencies match latest trade.\n  const currenciesMatch =\n    indepdenentCurrencies[0] &&\n    indepdenentCurrencies[1]?.equals(indepdenentCurrencies[0]) &&\n    dependentCurrencies[0] &&\n    dependentCurrencies[1]?.equals(dependentCurrencies[0])\n\n  return !amountsMatch || !currenciesMatch\n}\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(\n  tradeType: TradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n} {\n  // Debounce is used to prevent excessive requests to SOR, as it is data intensive.\n  // This helps provide a \"syncing\" state the UI can reference for loading animations.\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce(\n    useMemo(() => [amountSpecified, otherCurrency], [amountSpecified, otherCurrency]),\n    200\n  )\n\n  const clientSORTrade = useClientSideSmartOrderRouterTrade(tradeType, debouncedAmount, debouncedOtherCurrency)\n\n  const [amountFromLatestTrade, currencyFromTrade, otherCurrencyFromTrade] = getTradeInputs(\n    clientSORTrade.trade,\n    tradeType\n  )\n\n  const debouncing =\n    (amountSpecified && debouncedAmount && amountSpecified !== debouncedAmount) ||\n    (amountSpecified && debouncedOtherCurrency && otherCurrency && debouncedOtherCurrency !== otherCurrency)\n\n  const syncing =\n    amountSpecified &&\n    isTradeDebouncing({\n      amounts: [amountFromLatestTrade, amountSpecified],\n      indepdenentCurrencies: [currencyFromTrade, amountSpecified?.currency],\n      dependentCurrencies: [otherCurrencyFromTrade, debouncedOtherCurrency],\n    })\n\n  const useFallback = !syncing && clientSORTrade.state === TradeState.NO_ROUTE_FOUND\n\n  // Use a simple client side logic as backup if SOR is not available.\n  const fallbackTrade = useClientSideV3Trade(\n    tradeType,\n    useFallback ? debouncedAmount : undefined,\n    useFallback ? debouncedOtherCurrency : undefined\n  )\n\n  return useMemo(\n    () => ({\n      ...(useFallback ? fallbackTrade : clientSORTrade),\n      ...(syncing ? { state: TradeState.SYNCING } : {}),\n      ...(debouncing ? { state: TradeState.LOADING } : {}),\n    }),\n    [debouncing, fallbackTrade, syncing, clientSORTrade, useFallback]\n  )\n}\n","import styled, { css, ThemedText } from 'lib/theme'\nimport { ReactNode } from 'react'\n// eslint-disable-next-line no-restricted-imports\nimport { AnyStyledComponent } from 'styled-components'\n\nimport Row from '../../Row'\nimport Tooltip from '../../Tooltip'\n\nexport const optionCss = (selected: boolean) => css`\n  border: 1px solid ${({ theme }) => (selected ? theme.active : theme.outline)};\n  border-radius: ${({ theme }) => theme.borderRadius * 0.2}em;\n  color: ${({ theme }) => theme.primary} !important;\n  display: grid;\n  grid-gap: 0.25em;\n  padding: calc(0.75em - 1px) 0.625em;\n\n  :enabled:hover {\n    border-color: ${({ theme }) => theme.onHover(selected ? theme.active : theme.outline)};\n  }\n\n  :enabled:focus-within {\n    border-color: ${({ theme }) => theme.active};\n  }\n`\n\nexport function value(Value: AnyStyledComponent) {\n  return styled(Value)<{ selected?: boolean; cursor?: string }>`\n    cursor: ${({ cursor }) => cursor ?? 'pointer'};\n  `\n}\n\ninterface LabelProps {\n  name: ReactNode\n  tooltip?: ReactNode\n}\n\nexport function Label({ name, tooltip }: LabelProps) {\n  return (\n    <Row gap={0.5} justify=\"flex-start\">\n      <ThemedText.Subhead2>{name}</ThemedText.Subhead2>\n      {tooltip && (\n        <Tooltip placement=\"top\" contained>\n          <ThemedText.Caption>{tooltip}</ThemedText.Caption>\n        </Tooltip>\n      )}\n    </Row>\n  )\n}\n","import { css } from 'lib/theme'\n\n// need to use $loading as `loading` is a reserved prop\nexport const loadingOpacityCss = css<{ $loading: boolean }>`\n  filter: ${({ $loading }) => ($loading ? 'grayscale(1)' : 'none')};\n  opacity: ${({ $loading }) => ($loading ? '0.4' : '1')};\n  transition: opacity 0.2s ease-in-out;\n`\n","import { Trans } from '@lingui/macro'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport { AlertTriangle, Expando, Icon, Info, LargeIcon } from 'lib/icons'\nimport styled, { Color, ThemedText } from 'lib/theme'\nimport { ReactNode, useState } from 'react'\n\nimport ActionButton from '../ActionButton'\nimport { IconButton } from '../Button'\nimport Column from '../Column'\nimport Row from '../Row'\nimport Rule from '../Rule'\n\nconst HeaderIcon = styled(LargeIcon)`\n  flex-grow: 1;\n\n  svg {\n    transition: height 0.25s, width 0.25s;\n  }\n`\n\ninterface StatusHeaderProps {\n  icon: Icon\n  iconColor?: Color\n  iconSize?: number\n  children: ReactNode\n}\n\nexport function StatusHeader({ icon: Icon, iconColor, iconSize = 4, children }: StatusHeaderProps) {\n  return (\n    <>\n      <Column flex style={{ flexGrow: 1 }}>\n        <HeaderIcon icon={Icon} color={iconColor} size={iconSize} />\n        <Column gap={0.75} flex style={{ textAlign: 'center' }}>\n          {children}\n        </Column>\n      </Column>\n      <Rule />\n    </>\n  )\n}\n\nconst ErrorHeader = styled(Column)<{ open: boolean }>`\n  transition: gap 0.25s;\n\n  div:last-child {\n    max-height: ${({ open }) => (open ? 0 : 60 / 14)}em; // 3 * line-height\n    overflow-y: hidden;\n    transition: max-height 0.25s;\n  }\n`\nconst ErrorColumn = styled(Column)``\nconst ExpandoColumn = styled(Column)<{ open: boolean }>`\n  flex-grow: ${({ open }) => (open ? 2 : 0)};\n  transition: flex-grow 0.25s, gap 0.25s;\n\n  ${Rule} {\n    margin-bottom: ${({ open }) => (open ? 0 : 0.75)}em;\n    transition: margin-bottom 0.25s;\n  }\n\n  ${ErrorColumn} {\n    flex-basis: 0;\n    flex-grow: ${({ open }) => (open ? 1 : 0)};\n    overflow-y: hidden;\n    position: relative;\n    transition: flex-grow 0.25s;\n\n    ${Column} {\n      height: 100%;\n      padding: ${({ open }) => (open ? '0.5em 0' : 0)};\n      transition: padding 0.25s;\n\n      :after {\n        background: linear-gradient(#ffffff00, ${({ theme }) => theme.dialog});\n        bottom: 0;\n        content: '';\n        height: 0.75em;\n        pointer-events: none;\n        position: absolute;\n        width: calc(100% - 1em);\n      }\n    }\n  }\n`\n\ninterface ErrorDialogProps {\n  header?: ReactNode\n  error: Error\n  action: ReactNode\n  onAction: () => void\n}\n\nexport default function ErrorDialog({ header, error, action, onAction }: ErrorDialogProps) {\n  const [open, setOpen] = useState(false)\n  const [details, setDetails] = useState<HTMLDivElement | null>(null)\n  const scrollbar = useScrollbar(details)\n  return (\n    <Column flex padded gap={0.75} align=\"stretch\" style={{ height: '100%' }}>\n      <StatusHeader icon={AlertTriangle} iconColor=\"error\" iconSize={open ? 3 : 4}>\n        <ErrorHeader gap={open ? 0 : 0.75} open={open}>\n          <ThemedText.Subhead1>\n            <Trans>Something went wrong.</Trans>\n          </ThemedText.Subhead1>\n          <ThemedText.Body2>{header}</ThemedText.Body2>\n        </ErrorHeader>\n      </StatusHeader>\n      <Row>\n        <Row gap={0.5}>\n          <Info color=\"secondary\" />\n          <ThemedText.Subhead2 color=\"secondary\">\n            <Trans>Error details</Trans>\n          </ThemedText.Subhead2>\n        </Row>\n        <IconButton color=\"secondary\" onClick={() => setOpen(!open)} icon={Expando} iconProps={{ open }} />\n      </Row>\n      <ExpandoColumn flex align=\"stretch\" open={open}>\n        <Rule />\n        <ErrorColumn>\n          <Column gap={0.5} ref={setDetails} css={scrollbar}>\n            <ThemedText.Code>\n              {error.name}\n              {error.message ? `: ${error.message}` : ''}\n            </ThemedText.Code>\n          </Column>\n        </ErrorColumn>\n        <ActionButton onClick={onAction}>{action}</ActionButton>\n      </ExpandoColumn>\n    </Column>\n  )\n}\n","export class IntegrationError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'Integration Error'\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport { DEFAULT_DEADLINE_FROM_NOW, L2_DEADLINE_FROM_NOW } from 'constants/misc'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport { useAtom } from 'jotai'\nimport { transactionTtlAtom } from 'lib/state/settings'\nimport { useMemo } from 'react'\n\nimport useActiveWeb3React from './useActiveWeb3React'\n\n/** Returns the default transaction TTL for the chain, in minutes. */\nexport function useDefaultTransactionTtl(): number {\n  const { chainId } = useActiveWeb3React()\n  if (chainId && L2_CHAIN_IDS.includes(chainId)) return L2_DEADLINE_FROM_NOW / 60\n  return DEFAULT_DEADLINE_FROM_NOW / 60\n}\n\n/** Returns the user-inputted transaction TTL, in minutes. */\nexport function useTransactionTtl(): [number | undefined, (ttl?: number) => void] {\n  return useAtom(transactionTtlAtom)\n}\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const [ttl] = useTransactionTtl()\n  const defaultTtl = useDefaultTransactionTtl()\n\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (!blockTimestamp) return undefined\n    return blockTimestamp.add((ttl || defaultTtl) /* in seconds */ * 60)\n  }, [blockTimestamp, defaultTtl, ttl])\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport styled, { ThemedText } from 'lib/theme'\n\nimport Button from '../Button'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\n\nconst TokenButton = styled(Button)`\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  padding: 0.25em 0.75em 0.25em 0.25em;\n`\n\ninterface TokenBaseProps {\n  value: Currency\n  onClick: (value: Currency) => void\n}\n\nexport default function TokenBase({ value, onClick }: TokenBaseProps) {\n  return (\n    <TokenButton onClick={() => onClick(value)}>\n      <ThemedText.ButtonMedium>\n        <Row gap={0.5}>\n          <TokenImg token={value} size={1.5} />\n          {value.symbol}\n        </Row>\n      </ThemedText.ButtonMedium>\n    </TokenButton>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { ChevronDown } from 'lib/icons'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\n\nimport Button from '../Button'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\n\nconst StyledTokenButton = styled(Button)<{ empty?: boolean }>`\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  padding: 0.25em;\n  padding-left: ${({ empty }) => (empty ? 0.75 : 0.25)}em;\n\n  :disabled {\n    // prevents border from expanding the button's box size\n    padding: calc(0.25em - 1px);\n    padding-left: calc(${({ empty }) => (empty ? 0.75 : 0.25)}em - 1px);\n  }\n`\n\nconst TokenButtonRow = styled(Row)<{ collapsed: boolean }>`\n  height: 1.2em;\n  max-width: ${({ collapsed }) => (collapsed ? '1.2' : '8.2')}em;\n  overflow-x: hidden;\n  transition: max-width 0.25s linear;\n`\n\ninterface TokenButtonProps {\n  value?: Currency\n  collapsed: boolean\n  disabled?: boolean\n  onClick: () => void\n}\n\nexport default function TokenButton({ value, collapsed, disabled, onClick }: TokenButtonProps) {\n  const buttonBackgroundColor = useMemo(() => (value ? 'interactive' : 'accent'), [value])\n  const contentColor = useMemo(() => (value || disabled ? 'onInteractive' : 'onAccent'), [value, disabled])\n  return (\n    <StyledTokenButton onClick={onClick} empty={!value} color={buttonBackgroundColor} disabled={disabled}>\n      <ThemedText.ButtonLarge color={contentColor}>\n        <TokenButtonRow gap={0.4} collapsed={Boolean(value) && collapsed}>\n          {value ? (\n            <>\n              <TokenImg token={value} size={1.2} />\n              {value.symbol}\n            </>\n          ) : (\n            <Trans>Select a token</Trans>\n          )}\n          <ChevronDown color={contentColor} strokeWidth={3} />\n        </TokenButtonRow>\n      </ThemedText.ButtonLarge>\n    </StyledTokenButton>\n  )\n}\n","import { useLingui } from '@lingui/react'\nimport { Currency } from '@uniswap/sdk-core'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport useCurrencyBalance from 'lib/hooks/useCurrencyBalance'\nimport useNativeEvent from 'lib/hooks/useNativeEvent'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport styled, { ThemedText } from 'lib/theme'\nimport {\n  ComponentClass,\n  CSSProperties,\n  forwardRef,\n  KeyboardEvent,\n  memo,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { areEqual, FixedSizeList, FixedSizeListProps } from 'react-window'\nimport invariant from 'tiny-invariant'\nimport { currencyId } from 'utils/currencyId'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\n\nimport { BaseButton } from '../Button'\nimport Column from '../Column'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\n\nconst TokenButton = styled(BaseButton)`\n  border-radius: 0;\n  outline: none;\n  padding: 0.5em 0.75em;\n`\n\nconst ITEM_SIZE = 56\ntype ItemData = Currency[]\ninterface FixedSizeTokenList extends FixedSizeList<ItemData>, ComponentClass<FixedSizeListProps<ItemData>> {}\nconst TokenList = styled(FixedSizeList as unknown as FixedSizeTokenList)<{\n  hover: number\n  scrollbar?: ReturnType<typeof useScrollbar>\n}>`\n  ${TokenButton}[data-index='${({ hover }) => hover}'] {\n    background-color: ${({ theme }) => theme.onHover(theme.module)};\n  }\n\n  ${({ scrollbar }) => scrollbar}\n  overscroll-behavior: none; // prevent Firefox's bouncy overscroll effect (because it does not trigger the scroll handler)\n`\nconst OnHover = styled.div<{ hover: number }>`\n  background-color: ${({ theme }) => theme.onHover(theme.module)};\n  height: ${ITEM_SIZE}px;\n  left: 0;\n  position: absolute;\n  top: ${({ hover }) => hover * ITEM_SIZE}px;\n  width: 100%;\n`\n\ninterface TokenOptionProps {\n  index: number\n  value: Currency\n  style: CSSProperties\n}\n\ninterface BubbledEvent extends SyntheticEvent {\n  index?: number\n  token?: Currency\n  ref?: HTMLButtonElement\n}\n\nfunction TokenOption({ index, value, style }: TokenOptionProps) {\n  const { i18n } = useLingui()\n  const ref = useRef<HTMLButtonElement>(null)\n  // Annotate the event to be handled later instead of passing in handlers to avoid rerenders.\n  // This prevents token logos from reloading and flashing on the screen.\n  const onEvent = (e: BubbledEvent) => {\n    e.index = index\n    e.token = value\n    e.ref = ref.current ?? undefined\n  }\n\n  const { account } = useActiveWeb3React()\n  const balance = useCurrencyBalance(account, value)\n\n  return (\n    <TokenButton\n      data-index={index}\n      style={style}\n      onClick={onEvent}\n      onBlur={onEvent}\n      onFocus={onEvent}\n      onMouseMove={onEvent}\n      onKeyDown={onEvent}\n      ref={ref}\n    >\n      <ThemedText.Body1>\n        <Row>\n          <Row gap={0.5}>\n            <TokenImg token={value} size={1.5} />\n            <Column flex gap={0.125} align=\"flex-start\">\n              <ThemedText.Subhead1>{value.symbol}</ThemedText.Subhead1>\n              <ThemedText.Caption color=\"secondary\">{value.name}</ThemedText.Caption>\n            </Column>\n          </Row>\n          {balance?.greaterThan(0) && formatCurrencyAmount(balance, 2, i18n.locale)}\n        </Row>\n      </ThemedText.Body1>\n    </TokenButton>\n  )\n}\n\nconst itemKey = (index: number, tokens: ItemData) => currencyId(tokens[index])\nconst ItemRow = memo(function ItemRow({\n  data: tokens,\n  index,\n  style,\n}: {\n  data: ItemData\n  index: number\n  style: CSSProperties\n}) {\n  return <TokenOption index={index} value={tokens[index]} style={style} />\n},\nareEqual)\n\ninterface TokenOptionsHandle {\n  onKeyDown: (e: KeyboardEvent) => void\n  blur: () => void\n}\n\ninterface TokenOptionsProps {\n  tokens: Currency[]\n  onSelect: (token: Currency) => void\n}\n\nconst TokenOptions = forwardRef<TokenOptionsHandle, TokenOptionsProps>(function TokenOptions(\n  { tokens, onSelect }: TokenOptionsProps,\n  ref\n) {\n  const [focused, setFocused] = useState(false)\n  const [hover, setHover] = useState(-1)\n  useEffect(() => setHover(-1), [tokens])\n\n  const list = useRef<FixedSizeList>(null)\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n        if (e.key === 'ArrowDown' && hover < tokens.length - 1) {\n          scrollTo(hover + 1)\n        } else if (e.key === 'ArrowUp' && hover > 0) {\n          scrollTo(hover - 1)\n        } else if (e.key === 'ArrowUp' && hover === -1) {\n          scrollTo(tokens.length - 1)\n        }\n        e.preventDefault()\n      }\n      if (e.key === 'Enter' && hover) {\n        onSelect(tokens[hover])\n      }\n\n      function scrollTo(index: number) {\n        list.current?.scrollToItem(index)\n        setHover(index)\n      }\n    },\n    [hover, onSelect, tokens]\n  )\n  const blur = useCallback(() => setHover(-1), [])\n  useImperativeHandle(ref, () => ({ onKeyDown, blur }), [blur, onKeyDown])\n\n  const onClick = useCallback(({ token }: BubbledEvent) => token && onSelect(token), [onSelect])\n  const onFocus = useCallback(({ index }: BubbledEvent) => {\n    if (index !== undefined) {\n      setHover(index)\n      setFocused(true)\n    }\n  }, [])\n  const onBlur = useCallback(() => setFocused(false), [])\n  const onMouseMove = useCallback(\n    ({ index, ref }: BubbledEvent) => {\n      if (index !== undefined) {\n        setHover(index)\n        if (focused) {\n          ref?.focus()\n        }\n      }\n    },\n    [focused]\n  )\n\n  const [element, setElement] = useState<HTMLElement | null>(null)\n  const scrollbar = useScrollbar(element, { padded: true })\n\n  const onHover = useRef<HTMLDivElement>(null)\n  // use native onscroll handler to capture Safari's bouncy overscroll effect\n  useNativeEvent(element, 'scroll', (e) => {\n    invariant(element)\n    if (onHover.current) {\n      // must be set synchronously to avoid jank (avoiding useState)\n      onHover.current.style.marginTop = `${-element.scrollTop}px`\n    }\n  })\n\n  return (\n    <Column\n      align=\"unset\"\n      grow\n      onKeyDown={onKeyDown}\n      onClick={onClick}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onMouseMove={onMouseMove}\n      style={{ overflow: 'hidden' }}\n    >\n      {/* OnHover is a workaround to Safari's incorrect (overflow: overlay) implementation */}\n      <OnHover hover={hover} ref={onHover} />\n      <AutoSizer disableWidth>\n        {({ height }) => (\n          <TokenList\n            hover={hover}\n            height={height}\n            width=\"100%\"\n            itemCount={tokens.length}\n            itemData={tokens}\n            itemKey={itemKey}\n            itemSize={ITEM_SIZE}\n            className=\"scrollbar\"\n            ref={list}\n            outerRef={setElement}\n            scrollbar={scrollbar}\n          >\n            {ItemRow}\n          </TokenList>\n        )}\n      </AutoSizer>\n    </Column>\n  )\n})\n\nexport default TokenOptions\n","import { Currency } from '@uniswap/sdk-core'\nimport { useTheme } from 'lib/theme'\nimport Vibrant from 'node-vibrant/lib/bundle'\nimport { useEffect, useLayoutEffect, useState } from 'react'\n\nimport useCurrencyLogoURIs from './useCurrencyLogoURIs'\n\nconst colors = new Map<string, string | undefined>()\n\n/**\n * Extracts the prominent color from a token.\n * NB: If cached, this function returns synchronously; using a callback allows sync or async returns.\n */\nasync function getColorFromLogoURIs(logoURIs: string[], cb: (color: string | undefined) => void = () => void 0) {\n  const key = logoURIs[0]\n  let color = colors.get(key)\n\n  if (!color) {\n    for (const logoURI of logoURIs) {\n      let uri = logoURI\n      if (logoURI.startsWith('http')) {\n        // Color extraction must use a CORS-compatible resource, but the resource may already be cached.\n        // Adds a dummy parameter to force a different browser resource cache entry. Without this, color extraction prevents resource caching.\n        uri += '?color'\n      }\n\n      color = await getColorFromUriPath(uri)\n      if (color) break\n    }\n  }\n\n  colors.set(key, color)\n  return cb(color)\n}\n\nasync function getColorFromUriPath(uri: string): Promise<string | undefined> {\n  try {\n    const palette = await Vibrant.from(uri).getPalette()\n    return palette.Vibrant?.hex\n  } catch {}\n  return\n}\n\nexport function usePrefetchCurrencyColor(token?: Currency) {\n  const theme = useTheme()\n  const logoURIs = useCurrencyLogoURIs(token)\n\n  useEffect(() => {\n    if (theme.tokenColorExtraction && token) {\n      getColorFromLogoURIs(logoURIs)\n    }\n  }, [token, logoURIs, theme.tokenColorExtraction])\n}\n\nexport default function useCurrencyColor(token?: Currency) {\n  const [color, setColor] = useState<string | undefined>(undefined)\n  const theme = useTheme()\n  const logoURIs = useCurrencyLogoURIs(token)\n\n  useLayoutEffect(() => {\n    let stale = false\n\n    if (theme.tokenColorExtraction && token) {\n      getColorFromLogoURIs(logoURIs, (color) => {\n        if (!stale && color) {\n          setColor(color)\n        }\n      })\n    }\n\n    return () => {\n      stale = true\n      setColor(undefined)\n    }\n  }, [token, logoURIs, theme.tokenColorExtraction])\n\n  return color\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { loadingOpacityCss } from 'lib/css/loading'\nimport styled, { keyframes, ThemedText } from 'lib/theme'\nimport { FocusEvent, ReactNode, useCallback, useRef, useState } from 'react'\n\nimport Button from '../Button'\nimport Column from '../Column'\nimport { DecimalInput } from '../Input'\nimport Row from '../Row'\nimport TokenSelect from '../TokenSelect'\n\nconst TokenInputRow = styled(Row)`\n  grid-template-columns: 1fr;\n`\n\nconst ValueInput = styled(DecimalInput)<{ $loading: boolean }>`\n  color: ${({ theme }) => theme.primary};\n\n  :hover:not(:focus-within) {\n    color: ${({ theme }) => theme.onHover(theme.primary)};\n  }\n\n  :hover:not(:focus-within)::placeholder {\n    color: ${({ theme }) => theme.onHover(theme.secondary)};\n  }\n\n  ${loadingOpacityCss}\n`\n\nconst delayedFadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  25% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n\nconst MaxButton = styled(Button)`\n  animation: ${delayedFadeIn} 0.25s linear;\n  border-radius: 0.75em;\n  padding: 0.5em;\n`\n\ninterface TokenInputProps {\n  currency?: Currency\n  amount: string\n  disabled?: boolean\n  onMax?: () => void\n  onChangeInput: (input: string) => void\n  onChangeCurrency: (currency: Currency) => void\n  loading?: boolean\n  children: ReactNode\n}\n\nexport default function TokenInput({\n  currency,\n  amount,\n  disabled,\n  onMax,\n  onChangeInput,\n  onChangeCurrency,\n  loading,\n  children,\n}: TokenInputProps) {\n  const max = useRef<HTMLButtonElement>(null)\n  const [showMax, setShowMax] = useState(false)\n  const onFocus = useCallback(() => setShowMax(Boolean(onMax)), [onMax])\n  const onBlur = useCallback((e: FocusEvent) => {\n    if (e.relatedTarget !== max.current) {\n      setShowMax(false)\n    }\n  }, [])\n\n  return (\n    <Column gap={0.25}>\n      <TokenInputRow gap={0.5} onBlur={onBlur}>\n        <ThemedText.H2>\n          <ValueInput\n            value={amount}\n            onFocus={onFocus}\n            onChange={onChangeInput}\n            disabled={disabled || !currency}\n            $loading={Boolean(loading)}\n          ></ValueInput>\n        </ThemedText.H2>\n        {showMax && (\n          <MaxButton onClick={onMax} ref={max}>\n            <ThemedText.ButtonMedium>\n              <Trans>Max</Trans>\n            </ThemedText.ButtonMedium>\n          </MaxButton>\n        )}\n        <TokenSelect value={currency} collapsed={showMax} disabled={disabled} onSelect={onChangeCurrency} />\n      </TokenInputRow>\n      {children}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport ErrorDialog, { StatusHeader } from 'lib/components/Error/ErrorDialog'\nimport useInterval from 'lib/hooks/useInterval'\nimport { CheckCircle, Clock, Spinner } from 'lib/icons'\nimport { SwapTransactionInfo, Transaction } from 'lib/state/transactions'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useCallback, useMemo, useState } from 'react'\n\nimport ActionButton from '../../ActionButton'\nimport Column from '../../Column'\nimport Row from '../../Row'\nimport Summary from '../Summary'\n\nconst errorMessage = (\n  <Trans>\n    Try increasing your slippage tolerance.\n    <br />\n    NOTE: Fee on transfer and rebase tokens are incompatible with Uniswap V3.\n  </Trans>\n)\n\nconst TransactionRow = styled(Row)`\n  flex-direction: row-reverse;\n`\n\nfunction ElapsedTime({ tx }: { tx: Transaction<SwapTransactionInfo> }) {\n  const [elapsedMs, setElapsedMs] = useState(0)\n  useInterval(\n    () => {\n      if (tx.info.response.timestamp) {\n        setElapsedMs(tx.info.response.timestamp - tx.addedTime)\n      } else {\n        setElapsedMs(Date.now() - tx.addedTime)\n      }\n    },\n    elapsedMs === tx.info.response.timestamp ? null : 1000\n  )\n  const toElapsedTime = useCallback((ms: number) => {\n    let sec = Math.floor(ms / 1000)\n    const min = Math.floor(sec / 60)\n    sec = sec % 60\n    if (min) {\n      return (\n        <Trans>\n          {min}m {sec}s\n        </Trans>\n      )\n    } else {\n      return <Trans>{sec}s</Trans>\n    }\n  }, [])\n  return (\n    <Row gap={0.5}>\n      <Clock />\n      <ThemedText.Body2>{toElapsedTime(elapsedMs)}</ThemedText.Body2>\n    </Row>\n  )\n}\n\nconst EtherscanA = styled.a`\n  color: ${({ theme }) => theme.accent};\n  text-decoration: none;\n`\n\ninterface TransactionStatusProps {\n  tx: Transaction<SwapTransactionInfo>\n  onClose: () => void\n}\n\nfunction TransactionStatus({ tx, onClose }: TransactionStatusProps) {\n  const Icon = useMemo(() => {\n    return tx.receipt?.status ? CheckCircle : Spinner\n  }, [tx.receipt?.status])\n  const heading = useMemo(() => {\n    return tx.receipt?.status ? <Trans>Transaction submitted</Trans> : <Trans>Transaction pending</Trans>\n  }, [tx.receipt?.status])\n  return (\n    <Column flex padded gap={0.75} align=\"stretch\" style={{ height: '100%' }}>\n      <StatusHeader icon={Icon} iconColor={tx.receipt?.status ? 'success' : undefined}>\n        <ThemedText.Subhead1>{heading}</ThemedText.Subhead1>\n        <Summary input={tx.info.inputCurrencyAmount} output={tx.info.outputCurrencyAmount} />\n      </StatusHeader>\n      <TransactionRow flex>\n        <ThemedText.ButtonSmall>\n          <EtherscanA href=\"//etherscan.io\" target=\"_blank\">\n            <Trans>View on Etherscan</Trans>\n          </EtherscanA>\n        </ThemedText.ButtonSmall>\n        <ElapsedTime tx={tx} />\n      </TransactionRow>\n      <ActionButton onClick={onClose}>\n        <Trans>Close</Trans>\n      </ActionButton>\n    </Column>\n  )\n}\n\nexport default function TransactionStatusDialog({ tx, onClose }: TransactionStatusProps) {\n  return tx.receipt?.status === 0 ? (\n    <ErrorDialog\n      header={errorMessage}\n      error={new Error('TODO(zzmp)')}\n      action={<Trans>Dismiss</Trans>}\n      onAction={onClose}\n    />\n  ) : (\n    <TransactionStatus tx={tx} onClose={onClose} />\n  )\n}\n","import { HTMLProps } from 'react'\n\n/**\n * Outbound link\n */\nexport default function ExternalLink({\n  target = '_blank',\n  href,\n  rel = 'noopener noreferrer',\n  ...rest\n}: Omit<HTMLProps<HTMLAnchorElement>, 'as' | 'ref' | 'onClick'> & { href: string }) {\n  return (\n    <a target={target} rel={rel} href={href} {...rest}>\n      {rest.children}\n    </a>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Percent } from '@uniswap/sdk-core'\nimport { useAtom } from 'jotai'\nimport Popover from 'lib/components/Popover'\nimport { TooltipHandlers, useTooltip } from 'lib/components/Tooltip'\nimport { AlertTriangle, Check, Icon, LargeIcon, XOctagon } from 'lib/icons'\nimport { autoSlippageAtom, MAX_VALID_SLIPPAGE, maxSlippageAtom, MIN_HIGH_SLIPPAGE } from 'lib/state/settings'\nimport styled, { Color, ThemedText } from 'lib/theme'\nimport { memo, PropsWithChildren, ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { BaseButton, TextButton } from '../../Button'\nimport Column from '../../Column'\nimport { DecimalInput, inputCss } from '../../Input'\nimport Row from '../../Row'\nimport { Label, optionCss } from './components'\n\nconst tooltip = (\n  <Trans>Your transaction will revert if the price changes unfavorably by more than this percentage.</Trans>\n)\nconst highSlippage = <Trans>High slippage increases the risk of price movement</Trans>\nconst invalidSlippage = <Trans>Please enter a valid slippage %</Trans>\n\nconst placeholder = '0.10'\n\nconst Button = styled(TextButton)<{ selected: boolean }>`\n  ${({ selected }) => optionCss(selected)}\n`\n\nconst Custom = styled(BaseButton)<{ selected: boolean }>`\n  ${({ selected }) => optionCss(selected)}\n  ${inputCss}\n  padding: calc(0.75em - 3px) 0.625em;\n`\n\ninterface OptionProps extends Partial<TooltipHandlers> {\n  wrapper: typeof Button | typeof Custom\n  selected: boolean\n  onSelect: () => void\n  icon?: ReactNode\n}\n\nfunction Option({\n  wrapper: Wrapper,\n  children,\n  selected,\n  onSelect,\n  icon,\n  ...tooltipHandlers\n}: PropsWithChildren<OptionProps>) {\n  return (\n    <Wrapper selected={selected} onClick={onSelect} {...tooltipHandlers}>\n      <Row gap={0.5}>\n        {children}\n        {icon ? icon : <LargeIcon icon={selected ? Check : undefined} size={1.25} />}\n      </Row>\n    </Wrapper>\n  )\n}\n\nenum WarningState {\n  NONE,\n  HIGH_SLIPPAGE,\n  INVALID_SLIPPAGE,\n}\n\nconst Warning = memo(function Warning({ state, showTooltip }: { state: WarningState; showTooltip: boolean }) {\n  let icon: Icon\n  let color: Color\n  let content: ReactNode\n  let show = showTooltip\n  switch (state) {\n    case WarningState.INVALID_SLIPPAGE:\n      icon = XOctagon\n      color = 'error'\n      content = invalidSlippage\n      show = true\n      break\n    case WarningState.HIGH_SLIPPAGE:\n      icon = AlertTriangle\n      color = 'warning'\n      content = highSlippage\n      break\n    case WarningState.NONE:\n      return null\n  }\n  return (\n    <Popover\n      key={state}\n      content={<ThemedText.Caption>{content}</ThemedText.Caption>}\n      show={show}\n      placement=\"top\"\n      offset={16}\n      contained\n    >\n      <LargeIcon icon={icon} color={color} size={1.25} />\n    </Popover>\n  )\n})\n\nexport default function MaxSlippageSelect() {\n  const input = useRef<HTMLInputElement>(null)\n  const focus = useCallback(() => input.current?.focus(), [input])\n\n  const [autoSlippage, setAutoSlippage] = useAtom(autoSlippageAtom)\n  const [maxSlippage, setMaxSlippage] = useAtom(maxSlippageAtom)\n  const maxSlippageInput = useMemo(() => maxSlippage?.toString() || '', [maxSlippage])\n  const [warning, setWarning] = useState(WarningState.NONE)\n  const [showTooltip, setShowTooltip, tooltipProps] = useTooltip()\n\n  const processInput = useCallback(\n    (input: number | undefined) => {\n      const numerator = input && Math.floor(input * 100)\n      if (numerator) {\n        const percent = new Percent(numerator, 10_000)\n        if (percent.greaterThan(MAX_VALID_SLIPPAGE)) {\n          setWarning(WarningState.INVALID_SLIPPAGE)\n          setAutoSlippage(true)\n          setMaxSlippage(input)\n        } else if (percent.greaterThan(MIN_HIGH_SLIPPAGE)) {\n          setWarning(WarningState.HIGH_SLIPPAGE)\n          setAutoSlippage(false)\n          setMaxSlippage(input)\n        } else {\n          setWarning(WarningState.NONE)\n          setAutoSlippage(false)\n          setMaxSlippage(input)\n        }\n      } else {\n        setAutoSlippage(true)\n        setMaxSlippage(undefined)\n      }\n    },\n    [setAutoSlippage, setMaxSlippage]\n  )\n  const onInputSelect = useCallback(() => {\n    focus()\n    processInput(maxSlippage)\n  }, [focus, maxSlippage, processInput])\n\n  useEffect(() => processInput(maxSlippage), [maxSlippage, processInput]) // processes any warnings on mount\n  useEffect(() => setShowTooltip(true), [warning, setShowTooltip]) // enables the tooltip if a warning is set\n\n  return (\n    <Column gap={0.75}>\n      <Label name={<Trans>Max slippage</Trans>} tooltip={tooltip} />\n      <Row gap={0.5} grow=\"last\">\n        <Option wrapper={Button} selected={autoSlippage} onSelect={() => setAutoSlippage(true)}>\n          <ThemedText.ButtonMedium>\n            <Trans>Auto</Trans>\n          </ThemedText.ButtonMedium>\n        </Option>\n        <Option\n          wrapper={Custom}\n          selected={!autoSlippage}\n          onSelect={onInputSelect}\n          icon={<Warning state={warning} showTooltip={showTooltip} />}\n          {...tooltipProps}\n        >\n          <Row color={warning === WarningState.INVALID_SLIPPAGE ? 'error' : undefined}>\n            <DecimalInput\n              size={Math.max(maxSlippageInput.length, 3)}\n              value={maxSlippageInput}\n              onChange={(input) => processInput(+input)}\n              placeholder={placeholder}\n              ref={input}\n            />\n            %\n          </Row>\n        </Option>\n      </Row>\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useDefaultTransactionTtl, useTransactionTtl } from 'lib/hooks/useTransactionDeadline'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useRef } from 'react'\n\nimport Column from '../../Column'\nimport { inputCss, IntegerInput } from '../../Input'\nimport Row from '../../Row'\nimport { Label } from './components'\n\nconst tooltip = <Trans>Your transaction will revert if it has been pending for longer than this period of time.</Trans>\n\nconst Input = styled(Row)`\n  ${inputCss}\n`\n\nexport default function TransactionTtlInput() {\n  const [ttl, setTtl] = useTransactionTtl()\n  const defaultTtl = useDefaultTransactionTtl()\n  const placeholder = defaultTtl.toString()\n  const input = useRef<HTMLInputElement>(null)\n  return (\n    <Column gap={0.75}>\n      <Label name={<Trans>Transaction deadline</Trans>} tooltip={tooltip} />\n      <ThemedText.Body1>\n        <Input justify=\"start\" onClick={() => input.current?.focus()}>\n          <IntegerInput\n            placeholder={placeholder}\n            value={ttl?.toString() ?? ''}\n            onChange={(value) => setTtl(value ? parseFloat(value) : 0)}\n            size={Math.max(ttl?.toString().length || 0, placeholder.length)}\n            ref={input}\n          />\n          <Trans>minutes</Trans>\n        </Input>\n      </ThemedText.Body1>\n    </Column>\n  )\n}\n","import { Info } from 'lib/icons'\n\nexport default function RoutingTooltip() {\n  return <Info color=\"secondary\" />\n  /* TODO(zzmp): Implement post-beta launch.\n  return (\n    <Tooltip icon={Info} placement=\"bottom\">\n      <ThemeProvider>\n        <ThemedText.Subhead2>TODO: Routing Tooltip</ThemedText.Subhead2>\n      </ThemeProvider>\n    </Tooltip>\n  )\n  */\n}\n","import { Trans } from '@lingui/macro'\nimport Row from 'lib/components/Row'\nimport { Logo } from 'lib/icons'\nimport styled, { brand, ThemedText } from 'lib/theme'\n\nimport ExternalLink from './ExternalLink'\n\nconst UniswapA = styled(ExternalLink)`\n  color: ${({ theme }) => theme.secondary};\n  cursor: pointer;\n  text-decoration: none;\n\n  ${Logo} {\n    fill: ${({ theme }) => theme.secondary};\n    height: 1em;\n    transition: transform 0.25s ease, fill 0.25s ease;\n    width: 1em;\n    will-change: transform;\n  }\n\n  :hover ${Logo} {\n    fill: ${brand};\n    transform: rotate(-5deg);\n  }\n`\n\nexport default function BrandedFooter() {\n  return (\n    <Row justify=\"center\">\n      <UniswapA href={`https://app.uniswap.org/`}>\n        <Row gap={0.25}>\n          <Logo />\n          <ThemedText.Caption>\n            <Trans>Powered by the Uniswap protocol</Trans>\n          </ThemedText.Caption>\n        </Row>\n      </UniswapA>\n    </Row>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport useUSDCPrice from 'hooks/useUSDCPrice'\nimport { AlertTriangle, Icon, Info, Spinner } from 'lib/icons'\nimport { ThemedText } from 'lib/theme'\nimport { ReactNode, useMemo, useState } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { TextButton } from '../../Button'\nimport Row from '../../Row'\nimport RoutingTooltip from './RoutingTooltip'\n\ninterface CaptionProps {\n  icon?: Icon\n  caption: ReactNode\n}\n\nfunction Caption({ icon: Icon = AlertTriangle, caption }: CaptionProps) {\n  return (\n    <>\n      <Icon color=\"secondary\" />\n      {caption}\n    </>\n  )\n}\n\nexport function ConnectWallet() {\n  return <Caption caption={<Trans>Connect wallet to swap</Trans>} />\n}\nexport function UnsupportedNetwork() {\n  return <Caption caption={<Trans>Unsupported network - switch to another network to swap</Trans>} />\n}\nexport function InsufficientBalance({ currency }: { currency: Currency }) {\n  return <Caption caption={<Trans>Insufficient {currency?.symbol} balance</Trans>} />\n}\nexport function InsufficientLiquidity() {\n  return <Caption caption={<Trans>Insufficient liquidity in the pool for your trade</Trans>} />\n}\nexport function Empty() {\n  return <Caption icon={Info} caption={<Trans>Enter an amount</Trans>} />\n}\nexport function LoadingTrade() {\n  return <Caption icon={Spinner} caption={<Trans>Fetching best price…</Trans>} />\n}\n\nexport function Trade({ trade }: { trade: InterfaceTrade<Currency, Currency, TradeType> }) {\n  const [flip, setFlip] = useState(true)\n  const { inputAmount, outputAmount, executionPrice } = trade\n  const fiatValueInput = useUSDCPrice(inputAmount.currency)\n  const fiatValueOutput = useUSDCPrice(outputAmount.currency)\n\n  const ratio = useMemo(() => {\n    const [a, b] = flip ? [outputAmount, inputAmount] : [inputAmount, outputAmount]\n    const priceString = (!flip ? executionPrice : executionPrice?.invert())?.toSignificant(6)\n\n    const ratio = `1 ${a.currency.symbol} = ${priceString} ${b.currency.symbol}`\n    const usdc = !flip\n      ? fiatValueInput\n        ? ` ($${fiatValueInput.toSignificant(6)})`\n        : null\n      : fiatValueOutput\n      ? ` ($${fiatValueOutput.toSignificant(6)})`\n      : null\n\n    return (\n      <Row gap={0.25} style={{ userSelect: 'text' }}>\n        {ratio}\n        {usdc && <ThemedText.Caption color=\"secondary\">{usdc}</ThemedText.Caption>}\n      </Row>\n    )\n  }, [executionPrice, fiatValueInput, fiatValueOutput, flip, inputAmount, outputAmount])\n\n  return (\n    <>\n      <RoutingTooltip />\n      <TextButton color=\"primary\" onClick={() => setFlip(!flip)}>\n        {ratio}\n      </TextButton>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\nimport { useUSDCValue } from 'hooks/useUSDCPrice'\nimport { atom } from 'jotai'\nimport { useAtomValue } from 'jotai/utils'\nimport BrandedFooter from 'lib/components/BrandedFooter'\nimport { loadingOpacityCss } from 'lib/css/loading'\nimport { useSwapAmount, useSwapCurrency, useSwapInfo } from 'lib/hooks/swap'\nimport useCurrencyColor from 'lib/hooks/useCurrencyColor'\nimport { Field, independentFieldAtom } from 'lib/state/swap'\nimport styled, { DynamicThemeProvider, ThemedText } from 'lib/theme'\nimport { ReactNode, useMemo } from 'react'\nimport { TradeState } from 'state/routing/types'\nimport { computeFiatValuePriceImpact } from 'utils/computeFiatValuePriceImpact'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\n\nimport Column from '../Column'\nimport Row from '../Row'\nimport TokenInput from './TokenInput'\n\nexport const colorAtom = atom<string | undefined>(undefined)\n\nconst LoadingSpan = styled.span<{ $loading: boolean }>`\n  ${loadingOpacityCss};\n`\n\nconst OutputColumn = styled(Column)<{ hasColor: boolean | null }>`\n  background-color: ${({ theme }) => theme.module};\n  border-radius: ${({ theme }) => theme.borderRadius - 0.25}em;\n  padding: 0.75em;\n  padding-bottom: 0.5em;\n  position: relative;\n\n  // Set transitions to reduce color flashes when switching color/token.\n  // When color loads, transition the background so that it transitions from the empty or last state, but not _to_ the empty state.\n  transition: ${({ hasColor }) => (hasColor ? 'background-color 0.25s ease-out' : undefined)};\n  > {\n    // When color is loading, delay the color/stroke so that it seems to transition from the last state.\n    transition: ${({ hasColor }) => (hasColor === null ? 'color 0.25s ease-in, stroke 0.25s ease-in' : undefined)};\n  }\n`\n\ninterface OutputProps {\n  disabled?: boolean\n  children: ReactNode\n}\n\nexport default function Output({ disabled, children }: OutputProps) {\n  const { i18n } = useLingui()\n\n  const {\n    trade: { state: tradeState },\n    currencyBalances: { [Field.OUTPUT]: balance },\n    currencyAmounts: { [Field.INPUT]: inputCurrencyAmount, [Field.OUTPUT]: outputCurrencyAmount },\n  } = useSwapInfo()\n\n  const [swapOutputAmount, updateSwapOutputAmount] = useSwapAmount(Field.OUTPUT)\n  const [swapOutputCurrency, updateSwapOutputCurrency] = useSwapCurrency(Field.OUTPUT)\n\n  //loading status of the trade\n  const isTradeLoading = useMemo(\n    () => TradeState.LOADING === tradeState || TradeState.SYNCING === tradeState,\n    [tradeState]\n  )\n\n  const isDependentField = useAtomValue(independentFieldAtom) !== Field.OUTPUT\n  const isLoading = isDependentField && isTradeLoading\n\n  const overrideColor = useAtomValue(colorAtom)\n  const dynamicColor = useCurrencyColor(swapOutputCurrency)\n  const color = overrideColor || dynamicColor\n\n  // different state true/null/false allow smoother color transition\n  const hasColor = swapOutputCurrency ? Boolean(color) || null : false\n\n  const inputUSDC = useUSDCValue(inputCurrencyAmount)\n  const outputUSDC = useUSDCValue(outputCurrencyAmount)\n\n  const priceImpact = useMemo(() => {\n    const computedChange = computeFiatValuePriceImpact(inputUSDC, outputUSDC)\n    return computedChange ? parseFloat(computedChange.multiply(-1)?.toSignificant(3)) : undefined\n  }, [inputUSDC, outputUSDC])\n\n  const usdc = useMemo(() => {\n    if (outputUSDC) {\n      return `$${outputUSDC.toFixed(2)} (${priceImpact && priceImpact > 0 ? '+' : ''}${priceImpact}%)`\n    }\n    return ''\n  }, [priceImpact, outputUSDC])\n\n  return (\n    <DynamicThemeProvider color={color}>\n      <OutputColumn hasColor={hasColor} gap={0.5}>\n        <Row>\n          <ThemedText.Subhead2 color=\"secondary\">\n            <Trans>For</Trans>\n          </ThemedText.Subhead2>\n        </Row>\n        <TokenInput\n          currency={swapOutputCurrency}\n          amount={(swapOutputAmount !== undefined ? swapOutputAmount : outputCurrencyAmount?.toSignificant(6)) ?? ''}\n          disabled={disabled}\n          onChangeInput={updateSwapOutputAmount}\n          onChangeCurrency={updateSwapOutputCurrency}\n          loading={isLoading}\n        >\n          <ThemedText.Body2 color=\"secondary\">\n            <Row>\n              <LoadingSpan $loading={isLoading}>{usdc}</LoadingSpan>\n              {balance && (\n                <span>\n                  Balance: <span style={{ userSelect: 'text' }}>{formatCurrencyAmount(balance, 4, i18n.locale)}</span>\n                </span>\n              )}\n            </Row>\n          </ThemedText.Body2>\n        </TokenInput>\n        {children}\n        <BrandedFooter />\n      </OutputColumn>\n    </DynamicThemeProvider>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\nimport { useUSDCValue } from 'hooks/useUSDCPrice'\nimport { useAtomValue } from 'jotai/utils'\nimport { loadingOpacityCss } from 'lib/css/loading'\nimport { useSwapAmount, useSwapCurrency, useSwapInfo } from 'lib/hooks/swap'\nimport { usePrefetchCurrencyColor } from 'lib/hooks/useCurrencyColor'\nimport { Field, independentFieldAtom } from 'lib/state/swap'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\nimport { TradeState } from 'state/routing/types'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\n\nimport Column from '../Column'\nimport Row from '../Row'\nimport TokenImg from '../TokenImg'\nimport TokenInput from './TokenInput'\n\nconst LoadingSpan = styled.span<{ $loading: boolean }>`\n  ${loadingOpacityCss};\n`\n\nconst InputColumn = styled(Column)<{ approved?: boolean }>`\n  margin: 0.75em;\n  position: relative;\n\n  ${TokenImg} {\n    filter: ${({ approved }) => (approved ? undefined : 'saturate(0) opacity(0.4)')};\n    transition: filter 0.25s;\n  }\n`\n\ninterface InputProps {\n  disabled?: boolean\n}\n\nexport default function Input({ disabled }: InputProps) {\n  const { i18n } = useLingui()\n  const {\n    trade: { state: tradeState },\n    currencyBalances: { [Field.INPUT]: balance },\n    currencyAmounts: { [Field.INPUT]: inputCurrencyAmount },\n  } = useSwapInfo()\n  const inputUSDC = useUSDCValue(inputCurrencyAmount)\n\n  const [swapInputAmount, updateSwapInputAmount] = useSwapAmount(Field.INPUT)\n  const [swapInputCurrency, updateSwapInputCurrency] = useSwapCurrency(Field.INPUT)\n\n  // extract eagerly in case of reversal\n  usePrefetchCurrencyColor(swapInputCurrency)\n\n  const isTradeLoading = useMemo(\n    () => TradeState.LOADING === tradeState || TradeState.SYNCING === tradeState,\n    [tradeState]\n  )\n  const isDependentField = useAtomValue(independentFieldAtom) !== Field.INPUT\n  const isLoading = isDependentField && isTradeLoading\n\n  //TODO(ianlapham): mimic logic from app swap page\n  const mockApproved = true\n\n  const onMax = useMemo(() => {\n    if (balance?.greaterThan(0)) {\n      return () => updateSwapInputAmount(balance.toExact())\n    }\n    return\n  }, [balance, updateSwapInputAmount])\n\n  return (\n    <InputColumn gap={0.5} approved={mockApproved}>\n      <Row>\n        <ThemedText.Subhead2 color=\"secondary\">\n          <Trans>Trading</Trans>\n        </ThemedText.Subhead2>\n      </Row>\n      <TokenInput\n        currency={swapInputCurrency}\n        amount={(swapInputAmount !== undefined ? swapInputAmount : inputCurrencyAmount?.toSignificant(6)) ?? ''}\n        disabled={disabled}\n        onMax={onMax}\n        onChangeInput={updateSwapInputAmount}\n        onChangeCurrency={updateSwapInputCurrency}\n        loading={isLoading}\n      >\n        <ThemedText.Body2 color=\"secondary\">\n          <Row>\n            <LoadingSpan $loading={isLoading}>{inputUSDC ? `$${inputUSDC.toFixed(2)}` : '-'}</LoadingSpan>\n            {balance && (\n              <ThemedText.Body2 color={inputCurrencyAmount?.greaterThan(balance) ? 'error' : undefined}>\n                Balance: <span style={{ userSelect: 'text' }}>{formatCurrencyAmount(balance, 4, i18n.locale)}</span>\n              </ThemedText.Body2>\n            )}\n          </Row>\n        </ThemedText.Body2>\n      </TokenInput>\n      <Row />\n    </InputColumn>\n  )\n}\n","import { useSwitchSwapCurrencies } from 'lib/hooks/swap'\nimport { ArrowDown as ArrowDownIcon, ArrowUp as ArrowUpIcon } from 'lib/icons'\nimport styled, { Layer } from 'lib/theme'\nimport { useCallback, useState } from 'react'\n\nimport Button from '../Button'\nimport Row from '../Row'\n\nconst ReverseRow = styled(Row)`\n  left: 50%;\n  position: absolute;\n  top: 7.45em;\n  transform: translateX(-50%);\n  z-index: ${Layer.OVERLAY};\n`\n\nconst ArrowUp = styled(ArrowUpIcon)`\n  left: calc(50% - 0.37em);\n  position: absolute;\n  top: calc(50% - 0.82em);\n`\n\nconst ArrowDown = styled(ArrowDownIcon)`\n  bottom: calc(50% - 0.82em);\n  position: absolute;\n  right: calc(50% - 0.37em);\n`\n\nconst Overlay = styled.div`\n  background-color: ${({ theme }) => theme.container};\n  border-radius: ${({ theme }) => theme.borderRadius}em;\n  padding: 0.25em;\n`\n\nconst StyledReverseButton = styled(Button)<{ turns: number }>`\n  border-radius: ${({ theme }) => theme.borderRadius * 0.75}em;\n  height: 2.5em;\n  position: relative;\n  width: 2.5em;\n\n  div {\n    transform: rotate(${({ turns }) => turns / 2}turn);\n    transition: transform 0.25s ease-in-out;\n    will-change: transform;\n  }\n`\n\nexport default function ReverseButton({ disabled }: { disabled?: boolean }) {\n  const [turns, setTurns] = useState(0)\n  const switchCurrencies = useSwitchSwapCurrencies()\n  const onClick = useCallback(() => {\n    switchCurrencies()\n    setTurns((turns) => ++turns)\n  }, [switchCurrencies])\n\n  return (\n    <ReverseRow justify=\"center\">\n      <Overlay>\n        <StyledReverseButton disabled={disabled} onClick={onClick} turns={turns}>\n          <div>\n            <ArrowUp strokeWidth={3} />\n            <ArrowDown strokeWidth={3} />\n          </div>\n        </StyledReverseButton>\n      </Overlay>\n    </ReverseRow>\n  )\n}\n","import { t } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_MEDIUM } from 'constants/misc'\nimport { useAtomValue } from 'jotai/utils'\nimport { MIN_HIGH_SLIPPAGE } from 'lib/state/settings'\nimport { feeOptionsAtom } from 'lib/state/swap'\nimport styled, { Color, ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\nimport { currencyId } from 'utils/currencyId'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\nimport { computeRealizedLPFeeAmount, computeRealizedPriceImpact } from 'utils/prices'\n\nimport Row from '../../Row'\n\nconst Value = styled.span<{ color?: Color }>`\n  color: ${({ color, theme }) => color && theme[color]};\n  white-space: nowrap;\n`\n\ninterface DetailProps {\n  label: string\n  value: string\n  color?: Color\n}\n\nfunction Detail({ label, value, color }: DetailProps) {\n  return (\n    <ThemedText.Caption>\n      <Row gap={2}>\n        <span>{label}</span>\n        <Value color={color}>{value}</Value>\n      </Row>\n    </ThemedText.Caption>\n  )\n}\n\ninterface DetailsProps {\n  trade: Trade<Currency, Currency, TradeType>\n  allowedSlippage: Percent\n}\n\nexport default function Details({ trade, allowedSlippage }: DetailsProps) {\n  const { inputAmount, outputAmount } = trade\n  const inputCurrency = inputAmount.currency\n  const outputCurrency = outputAmount.currency\n  const priceImpact = useMemo(() => computeRealizedPriceImpact(trade), [trade])\n\n  const lpFeeAmount = useMemo(() => computeRealizedLPFeeAmount(trade), [trade])\n\n  const integrator = window.location.hostname\n  const feeOptions = useAtomValue(feeOptionsAtom)\n\n  const { i18n } = useLingui()\n  const details = useMemo(() => {\n    const rows = []\n    // @TODO(ianlapham): Check that provider fee is even a valid list item\n\n    if (feeOptions) {\n      const parsedConvenienceFee = formatCurrencyAmount(outputAmount.multiply(feeOptions.fee), 6, i18n.locale)\n      rows.push([\n        t`${integrator} fee`,\n        `${parsedConvenienceFee} ${outputCurrency.symbol || currencyId(outputCurrency)}`,\n      ])\n    }\n\n    const priceImpactRow = [t`Price impact`, `${priceImpact.toFixed(2)}%`]\n    if (priceImpact.greaterThan(ALLOWED_PRICE_IMPACT_HIGH)) {\n      priceImpactRow.push('error')\n    } else if (priceImpact.greaterThan(ALLOWED_PRICE_IMPACT_MEDIUM)) {\n      priceImpactRow.push('warning')\n    }\n    rows.push(priceImpactRow)\n\n    if (lpFeeAmount) {\n      const localizedFeeAmount = formatCurrencyAmount(lpFeeAmount, 6, i18n.locale)\n      rows.push([\n        t`Liquidity provider fee`,\n        `${localizedFeeAmount} ${inputCurrency.symbol || currencyId(inputCurrency)}`,\n      ])\n    }\n\n    if (trade.tradeType === TradeType.EXACT_OUTPUT) {\n      const localizedMaxSent = formatCurrencyAmount(trade.maximumAmountIn(allowedSlippage), 6, i18n.locale)\n      rows.push([t`Maximum sent`, `${localizedMaxSent} ${inputCurrency.symbol}`])\n    }\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      const localizedMaxSent = formatCurrencyAmount(trade.minimumAmountOut(allowedSlippage), 6, i18n.locale)\n      rows.push([t`Minimum received`, `${localizedMaxSent} ${outputCurrency.symbol}`])\n    }\n\n    const slippageToleranceRow = [t`Slippage tolerance`, `${allowedSlippage.toFixed(2)}%`]\n    if (allowedSlippage.greaterThan(MIN_HIGH_SLIPPAGE)) {\n      slippageToleranceRow.push('warning')\n    }\n    rows.push(slippageToleranceRow)\n\n    return rows\n  }, [\n    feeOptions,\n    priceImpact,\n    lpFeeAmount,\n    trade,\n    allowedSlippage,\n    outputAmount,\n    i18n.locale,\n    integrator,\n    outputCurrency,\n    inputCurrency,\n  ])\n  return (\n    <>\n      {details.map(([label, detail, color]) => (\n        <Detail key={label} label={label} value={detail} color={color as Color} />\n      ))}\n    </>\n  )\n}\n","import { useLingui } from '@lingui/react'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { useUSDCValue } from 'hooks/useUSDCPrice'\nimport { ArrowRight } from 'lib/icons'\nimport styled from 'lib/theme'\nimport { ThemedText } from 'lib/theme'\nimport { useMemo } from 'react'\nimport { computeFiatValuePriceImpact } from 'utils/computeFiatValuePriceImpact'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\n\nimport Column from '../../Column'\nimport Row from '../../Row'\nimport TokenImg from '../../TokenImg'\n\nconst Percent = styled.span<{ gain: boolean }>`\n  color: ${({ gain, theme }) => (gain ? theme.success : theme.error)};\n`\n\ninterface TokenValueProps {\n  input: CurrencyAmount<Currency>\n  usdc?: boolean\n  change?: number\n}\n\nfunction TokenValue({ input, usdc, change }: TokenValueProps) {\n  const { i18n } = useLingui()\n  const percent = useMemo(() => {\n    if (change) {\n      const percent = change.toPrecision(3)\n      return change > 0 ? `(+${percent}%)` : `(${percent}%)`\n    }\n    return undefined\n  }, [change])\n\n  const usdcAmount = useUSDCValue(input)\n\n  return (\n    <Column justify=\"flex-start\">\n      <Row gap={0.375} justify=\"flex-start\">\n        <TokenImg token={input.currency} />\n        <ThemedText.Body2>\n          {formatCurrencyAmount(input, 6, i18n.locale)} {input.currency.symbol}\n        </ThemedText.Body2>\n      </Row>\n      {usdc && usdcAmount && (\n        <Row justify=\"flex-start\">\n          <ThemedText.Caption color=\"secondary\">\n            ${formatCurrencyAmount(usdcAmount, 2, i18n.locale)}\n            {change && <Percent gain={change > 0}> {percent}</Percent>}\n          </ThemedText.Caption>\n        </Row>\n      )}\n    </Column>\n  )\n}\n\ninterface SummaryProps {\n  input: CurrencyAmount<Currency>\n  output: CurrencyAmount<Currency>\n  usdc?: boolean\n}\n\nexport default function Summary({ input, output, usdc }: SummaryProps) {\n  const inputUSDCValue = useUSDCValue(input)\n  const outputUSDCValue = useUSDCValue(output)\n\n  const priceImpact = useMemo(() => {\n    const computedChange = computeFiatValuePriceImpact(inputUSDCValue, outputUSDCValue)\n    return computedChange ? parseFloat(computedChange.multiply(-1)?.toSignificant(3)) : undefined\n  }, [inputUSDCValue, outputUSDCValue])\n\n  return (\n    <Row gap={usdc ? 1 : 0.25}>\n      <TokenValue input={input} usdc={usdc} />\n      <ArrowRight />\n      <TokenValue input={output} usdc={usdc} change={priceImpact} />\n    </Row>\n  )\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { feeOptionsAtom } from 'lib/state/swap'\nimport { useEffect } from 'react'\n\ninterface FeeOptionsArgs {\n  convenienceFee?: number\n  convenienceFeeRecipient?: string | string | { [chainId: number]: string }\n}\n\nexport default function useSyncConvenienceFee({ convenienceFee, convenienceFeeRecipient }: FeeOptionsArgs) {\n  const { chainId } = useActiveWeb3React()\n  const updateFeeOptions = useUpdateAtom(feeOptionsAtom)\n\n  useEffect(() => {\n    if (convenienceFee && convenienceFeeRecipient) {\n      if (typeof convenienceFeeRecipient === 'string') {\n        updateFeeOptions({\n          fee: new Percent(convenienceFee, 10_000),\n          recipient: convenienceFeeRecipient,\n        })\n        return\n      }\n      if (chainId && convenienceFeeRecipient[chainId]) {\n        updateFeeOptions({\n          fee: new Percent(convenienceFee, 10_000),\n          recipient: convenienceFeeRecipient[chainId],\n        })\n        return\n      }\n    }\n    updateFeeOptions(undefined)\n  }, [chainId, convenienceFee, convenienceFeeRecipient, updateFeeOptions])\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { nativeOnChain } from 'constants/tokens'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { DefaultAddress } from 'lib/components/Swap'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport { useToken } from 'lib/hooks/useCurrency'\nimport { Field, Swap, swapAtom } from 'lib/state/swap'\nimport { useCallback, useLayoutEffect, useState } from 'react'\n\nfunction useDefaultToken(\n  defaultAddress: DefaultAddress | undefined,\n  chainId: number | undefined\n): Currency | null | undefined {\n  let address = undefined\n  if (typeof defaultAddress === 'string') {\n    address = defaultAddress\n  } else if (typeof defaultAddress === 'object' && chainId) {\n    address = defaultAddress[chainId]\n  }\n  const token = useToken(address)\n  if (chainId && address === 'NATIVE') {\n    return nativeOnChain(chainId)\n  }\n  return token\n}\n\ninterface UseSwapDefaultsArgs {\n  defaultInputAddress?: DefaultAddress\n  defaultInputAmount?: string\n  defaultOutputAddress?: DefaultAddress\n  defaultOutputAmount?: string\n}\n\nexport default function useSyncSwapDefaults({\n  defaultInputAddress,\n  defaultInputAmount,\n  defaultOutputAddress,\n  defaultOutputAmount,\n}: UseSwapDefaultsArgs) {\n  const updateSwap = useUpdateAtom(swapAtom)\n  const { chainId } = useActiveWeb3React()\n  const defaultInputToken = useDefaultToken(defaultInputAddress, chainId)\n  const defaultOutputToken = useDefaultToken(defaultOutputAddress, chainId)\n\n  const setToDefaults = useCallback(() => {\n    const defaultSwapState: Swap = {\n      amount: '',\n      [Field.INPUT]: defaultInputToken || undefined,\n      [Field.OUTPUT]: defaultOutputToken || undefined,\n      independentField: Field.INPUT,\n    }\n    if (defaultInputAmount && defaultInputToken) {\n      defaultSwapState.amount = defaultInputAmount\n    } else if (defaultOutputAmount && defaultOutputToken) {\n      defaultSwapState.independentField = Field.OUTPUT\n      defaultSwapState.amount = defaultOutputAmount\n    }\n    updateSwap((swap) => ({ ...swap, ...defaultSwapState }))\n  }, [defaultInputToken, defaultOutputToken, defaultInputAmount, defaultOutputAmount, updateSwap])\n\n  const [previousChainId, setPreviousChainId] = useState(chainId)\n  useLayoutEffect(() => {\n    setPreviousChainId(chainId)\n  }, [chainId])\n  useLayoutEffect(() => {\n    if (chainId && chainId !== previousChainId) {\n      setToDefaults()\n    }\n  }, [chainId, previousChainId, setToDefaults])\n}\n","import { Trans } from '@lingui/macro'\nimport { Wallet as WalletIcon } from 'lib/icons'\nimport styled, { ThemedText } from 'lib/theme'\n\nimport Row from './Row'\n\ninterface WalletProps {\n  disabled?: boolean\n  onClick?: () => void\n}\n\nconst ClickableRow = styled(Row)<{ onClick?: unknown }>`\n  cursor: ${({ onClick }) => onClick && 'pointer'};\n`\n\nexport default function Wallet({ disabled, onClick }: WalletProps) {\n  return disabled ? (\n    <ThemedText.Caption color=\"secondary\">\n      <ClickableRow gap={0.5} onClick={onClick}>\n        <WalletIcon />\n        <Trans>Connect your wallet</Trans>\n      </ClickableRow>\n    </ThemedText.Caption>\n  ) : null\n}\n","import { Trans } from '@lingui/macro'\nimport { Token, TradeType } from '@uniswap/sdk-core'\nimport { CHAIN_INFO } from 'constants/chainInfo'\nimport { useERC20PermitFromTrade } from 'hooks/useERC20Permit'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { useAtomValue } from 'jotai/utils'\nimport { useSwapInfo } from 'lib/hooks/swap'\nimport useSwapApproval, {\n  ApprovalState,\n  useSwapApprovalOptimizedTrade,\n  useSwapRouterAddress,\n} from 'lib/hooks/swap/useSwapApproval'\nimport { useSwapCallback } from 'lib/hooks/swap/useSwapCallback'\nimport { useAddTransaction } from 'lib/hooks/transactions'\nimport { usePendingApproval } from 'lib/hooks/transactions'\nimport useActiveWeb3React from 'lib/hooks/useActiveWeb3React'\nimport useTransactionDeadline from 'lib/hooks/useTransactionDeadline'\nimport { Link, Spinner } from 'lib/icons'\nimport { displayTxHashAtom, Field, independentFieldAtom } from 'lib/state/swap'\nimport { TransactionType } from 'lib/state/transactions'\nimport styled, { useTheme } from 'lib/theme'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport invariant from 'tiny-invariant'\n\nimport ActionButton from '../ActionButton'\nimport Dialog from '../Dialog'\nimport Row from '../Row'\nimport { SummaryDialog } from './Summary'\n\ninterface SwapButtonProps {\n  disabled?: boolean\n}\n\nconst EtherscanA = styled.a`\n  color: currentColor;\n  text-decoration: none;\n`\n\nfunction useIsPendingApproval(token?: Token, spender?: string): boolean {\n  return Boolean(usePendingApproval(token, spender))\n}\n\nexport default function SwapButton({ disabled }: SwapButtonProps) {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { tokenColorExtraction } = useTheme()\n\n  const {\n    trade,\n    allowedSlippage,\n    currencies: { [Field.INPUT]: inputCurrency },\n    currencyBalances: { [Field.INPUT]: inputCurrencyBalance },\n    currencyAmounts: { [Field.INPUT]: inputCurrencyAmount, [Field.OUTPUT]: outputCurrencyAmount },\n    feeOptions,\n  } = useSwapInfo()\n\n  const independentField = useAtomValue(independentFieldAtom)\n\n  const [activeTrade, setActiveTrade] = useState<typeof trade.trade | undefined>()\n  useEffect(() => {\n    setActiveTrade((activeTrade) => activeTrade && trade.trade)\n  }, [trade])\n\n  // TODO(zzmp): Return an optimized trade directly from useSwapInfo.\n  const optimizedTrade =\n    // Use trade.trade if there is no swap optimized trade. This occurs if approvals are still pending.\n    useSwapApprovalOptimizedTrade(trade.trade, allowedSlippage, useIsPendingApproval) || trade.trade\n  const [approval, getApproval] = useSwapApproval(optimizedTrade, allowedSlippage, useIsPendingApproval)\n  const approvalHash = usePendingApproval(\n    inputCurrency?.isToken ? inputCurrency : undefined,\n    useSwapRouterAddress(optimizedTrade)\n  )\n\n  const addTransaction = useAddTransaction()\n  const addApprovalTransaction = useCallback(() => {\n    getApproval().then((transaction) => {\n      if (transaction) {\n        addTransaction({ type: TransactionType.APPROVAL, ...transaction })\n      }\n    })\n  }, [addTransaction, getApproval])\n\n  const actionProps = useMemo(() => {\n    if (disabled) return { disabled: true }\n\n    if (chainId && inputCurrencyAmount && inputCurrencyBalance?.greaterThan(inputCurrencyAmount)) {\n      if (approval === ApprovalState.PENDING) {\n        return {\n          disabled: true,\n          update: {\n            message: (\n              <EtherscanA href={approvalHash && `${CHAIN_INFO[chainId].explorer}tx/${approvalHash}`} target=\"_blank\">\n                <Row gap={0.25}>\n                  <Trans>\n                    Approval pending <Link />\n                  </Trans>\n                </Row>\n              </EtherscanA>\n            ),\n            action: <Trans>Approve</Trans>,\n            icon: Spinner,\n          },\n        }\n      } else if (approval === ApprovalState.NOT_APPROVED) {\n        return {\n          update: {\n            message: <Trans>Approve {inputCurrencyAmount.currency.symbol} first</Trans>,\n            action: <Trans>Approve</Trans>,\n          },\n        }\n      }\n      return {}\n    }\n\n    return { disabled: true }\n  }, [approval, approvalHash, chainId, disabled, inputCurrencyAmount, inputCurrencyBalance])\n\n  const deadline = useTransactionDeadline()\n  const { signatureData } = useERC20PermitFromTrade(optimizedTrade, allowedSlippage, deadline)\n\n  // the callback to execute the swap\n  const { callback: swapCallback } = useSwapCallback({\n    trade: optimizedTrade,\n    allowedSlippage,\n    recipientAddressOrName: account ?? null,\n    signatureData,\n    deadline,\n    feeOptions,\n  })\n\n  //@TODO(ianlapham): add a loading state, process errors\n  const setDisplayTxHash = useUpdateAtom(displayTxHashAtom)\n\n  const onConfirm = useCallback(() => {\n    swapCallback?.()\n      .then((response) => {\n        setDisplayTxHash(response.hash)\n        invariant(inputCurrencyAmount && outputCurrencyAmount)\n        addTransaction({\n          response,\n          type: TransactionType.SWAP,\n          tradeType: independentField === Field.INPUT ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n          inputCurrencyAmount,\n          outputCurrencyAmount,\n        })\n      })\n      .catch((error) => {\n        //@TODO(ianlapham): add error handling\n        console.log(error)\n      })\n      .finally(() => {\n        setActiveTrade(undefined)\n      })\n  }, [addTransaction, independentField, inputCurrencyAmount, outputCurrencyAmount, setDisplayTxHash, swapCallback])\n\n  return (\n    <>\n      <ActionButton\n        color={tokenColorExtraction ? 'interactive' : 'accent'}\n        onClick={() => setActiveTrade(trade.trade)}\n        onUpdate={addApprovalTransaction}\n        {...actionProps}\n      >\n        <Trans>Review swap</Trans>\n      </ActionButton>\n      {activeTrade && (\n        <Dialog color=\"dialog\" onClose={() => setActiveTrade(undefined)}>\n          <SummaryDialog trade={activeTrade} allowedSlippage={allowedSlippage} onConfirm={onConfirm} />\n        </Dialog>\n      )}\n    </>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { DefaultAddress, SwapProps } from 'lib/components/Swap'\nimport { IntegrationError } from 'lib/errors'\nimport { PropsWithChildren, useEffect } from 'react'\n\nimport { isAddress } from '../../../utils'\n\nfunction isAddressOrAddressMap(addressOrMap: DefaultAddress): boolean {\n  if (typeof addressOrMap === 'object') {\n    return Object.values(addressOrMap).every((address) => isAddress(address))\n  }\n  if (typeof addressOrMap === 'string') {\n    return typeof isAddress(addressOrMap) === 'string'\n  }\n  return false\n}\n\ntype ValidatorProps = PropsWithChildren<SwapProps>\n\nexport default function SwapPropValidator(props: ValidatorProps) {\n  const { convenienceFee, convenienceFeeRecipient } = props\n  useEffect(() => {\n    if (convenienceFee) {\n      if (convenienceFee > 100 || convenienceFee < 0) {\n        throw new IntegrationError(`convenienceFee must be between 0 and 100. (You set it to ${convenienceFee})`)\n      }\n      if (!convenienceFeeRecipient) {\n        throw new IntegrationError('convenienceFeeRecipient is required when convenienceFee is set.')\n      }\n\n      if (typeof convenienceFeeRecipient === 'string') {\n        if (!isAddress(convenienceFeeRecipient)) {\n          throw new IntegrationError(\n            `convenienceFeeRecipient must be a valid address. (You set it to ${convenienceFeeRecipient}.)`\n          )\n        }\n      } else if (typeof convenienceFeeRecipient === 'object') {\n        Object.values(convenienceFeeRecipient).forEach((recipient) => {\n          if (!isAddress(recipient)) {\n            const values = Object.values(convenienceFeeRecipient).join(', ')\n            throw new IntegrationError(\n              `All values in convenienceFeeRecipient object must be valid addresses. (You used ${values}.)`\n            )\n          }\n        })\n      }\n    }\n  }, [convenienceFee, convenienceFeeRecipient])\n\n  const { defaultInputAddress, defaultInputAmount, defaultOutputAddress, defaultOutputAmount } = props\n  useEffect(() => {\n    if (defaultOutputAmount && defaultInputAmount) {\n      throw new IntegrationError('defaultInputAmount and defaultOutputAmount may not both be defined.')\n    }\n    if (defaultInputAmount && BigNumber.from(defaultInputAmount).lt(0)) {\n      throw new IntegrationError(`defaultInputAmount must be a positive number. (You set it to ${defaultInputAmount})`)\n    }\n    if (defaultOutputAmount && BigNumber.from(defaultOutputAmount).lt(0)) {\n      throw new IntegrationError(\n        `defaultOutputAmount must be a positive number. (You set it to ${defaultOutputAmount})`\n      )\n    }\n    if (defaultInputAddress && !isAddressOrAddressMap(defaultInputAddress) && defaultInputAddress !== 'NATIVE') {\n      throw new IntegrationError(\n        `defaultInputAddress(es) must be a valid address or \"NATIVE\". (You set it to ${defaultInputAddress}`\n      )\n    }\n    if (defaultOutputAddress && !isAddressOrAddressMap(defaultOutputAddress) && defaultOutputAddress !== 'NATIVE') {\n      throw new IntegrationError(\n        `defaultOutputAddress(es) must be a valid address or \"NATIVE\". (You set it to ${defaultOutputAddress}`\n      )\n    }\n  }, [defaultInputAddress, defaultInputAmount, defaultOutputAddress, defaultOutputAmount])\n\n  return <>{props.children}</>\n}\n","import { tokens } from '@uniswap/default-token-list'\nimport { DAI, USDC } from 'constants/tokens'\nimport { useUpdateAtom } from 'jotai/utils'\nimport { useEffect } from 'react'\nimport { useSelect, useValue } from 'react-cosmos/fixture'\n\nimport Swap from '.'\nimport { colorAtom } from './Output'\n\nconst validateColor = (() => {\n  const validator = document.createElement('div').style\n  return (color: string) => {\n    validator.color = ''\n    validator.color = color\n    return validator.color !== ''\n  }\n})()\n\nfunction Fixture() {\n  const setColor = useUpdateAtom(colorAtom)\n  const [color] = useValue('token color', { defaultValue: '' })\n  useEffect(() => {\n    if (!color || validateColor(color)) {\n      setColor(color)\n    }\n  }, [color, setColor])\n\n  const [convenienceFee] = useValue('convenienceFee', { defaultValue: 100 })\n  const FEE_RECIPIENT_OPTIONS = [\n    '',\n    '0x1D9Cd50Dde9C19073B81303b3d930444d11552f7',\n    '0x0dA5533d5a9aA08c1792Ef2B6a7444E149cCB0AD',\n    '0xE6abE059E5e929fd17bef158902E73f0FEaCD68c',\n  ]\n  const [convenienceFeeRecipient] = useSelect('convenienceFeeRecipient', {\n    options: FEE_RECIPIENT_OPTIONS,\n    defaultValue: FEE_RECIPIENT_OPTIONS[1],\n  })\n\n  const optionsToAddressMap: Record<string, string> = {\n    none: '',\n    Native: 'NATIVE',\n    DAI: DAI.address,\n    USDC: USDC.address,\n  }\n  const addressOptions = Object.keys(optionsToAddressMap)\n  const [defaultInput] = useSelect('defaultInputAddress', {\n    options: addressOptions,\n    defaultValue: addressOptions[2],\n  })\n  const inputOptions = ['', '0', '100', '-1']\n  const [defaultInputAmount] = useSelect('defaultInputAmount', {\n    options: inputOptions,\n    defaultValue: inputOptions[2],\n  })\n  const [defaultOutput] = useSelect('defaultOutputAddress', {\n    options: addressOptions,\n    defaultValue: addressOptions[1],\n  })\n  const [defaultOutputAmount] = useSelect('defaultOutputAmount', {\n    options: inputOptions,\n    defaultValue: inputOptions[0],\n  })\n\n  return (\n    <Swap\n      convenienceFee={convenienceFee}\n      convenienceFeeRecipient={convenienceFeeRecipient}\n      defaultInputAddress={optionsToAddressMap[defaultInput]}\n      defaultInputAmount={defaultInputAmount}\n      defaultOutputAddress={optionsToAddressMap[defaultOutput]}\n      defaultOutputAmount={defaultOutputAmount}\n      tokenList={tokens}\n    />\n  )\n}\n\nexport default <Fixture />\n"],"sourceRoot":""}