{"version":3,"sources":["lib/state/swap.ts","lib/state/atoms.ts"],"names":["Field","swapAtom","atomWithImmer","independentField","INPUT","amount","nativeOnChain","SupportedChainId","AVALANCHE","independentFieldAtom","pickAtom","displayTxHashAtom","atom","undefined","feeOptionsAtom","anAtom","key","setter","draft","update","get","set","withImmer","value","derived","setTogglable"],"mappings":"gXAQYA,E,8DAAAA,K,cAAAA,E,iBAAAA,M,KAYL,IAAMC,EAAWC,wBAAa,aACnCC,iBAAkBH,EAAMI,MACxBC,OAAQ,IACPL,EAAMI,MAAQE,YAAcC,IAAiBC,aAGnCC,EAAuBC,mBAAST,EAAU,oBAG1CU,EAAoBC,oBAAyBC,GAE7CC,EAAiBF,oBAA6BC,I,iCC/B3D,oHAoBO,SAASH,EACdK,EACAC,GAGmC,IAFnCC,EAEkC,uDAFwC,SAACC,EAAOC,GAAR,OACxEA,GAEF,OAAOP,gBACL,SAACQ,GAAD,OAASA,EAAIL,GAAQC,MACrB,SAACI,EAAKC,EAAKF,GAAX,OACEE,EAAIC,oBAAUP,IAAS,SAACQ,GACtB,IAAMC,EAAUP,EAAOM,EAAMP,GAAMG,GACnCI,EAAMP,GAAOQ,QAMd,SAASC,EAAaP,GAC3B,OAAQA","file":"static/js/70.3a6f2658.chunk.js","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { atom } from 'jotai'\nimport { atomWithImmer } from 'jotai/immer'\nimport { pickAtom } from 'lib/state/atoms'\n\nexport enum Field {\n  INPUT = 'INPUT',\n  OUTPUT = 'OUTPUT',\n}\n\nexport interface Swap {\n  independentField: Field\n  amount: string\n  [Field.INPUT]?: Currency\n  [Field.OUTPUT]?: Currency\n}\n\nexport const swapAtom = atomWithImmer<Swap>({\n  independentField: Field.INPUT,\n  amount: '',\n  [Field.INPUT]: nativeOnChain(SupportedChainId.AVALANCHE),\n})\n\nexport const independentFieldAtom = pickAtom(swapAtom, 'independentField')\n\n// If set to a transaction hash, that transaction will display in a status dialog.\nexport const displayTxHashAtom = atom<string | undefined>(undefined)\n\nexport const feeOptionsAtom = atom<FeeOptions | undefined>(undefined)\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Draft } from 'immer'\nimport { atom, WritableAtom } from 'jotai'\nimport { withImmer } from 'jotai/immer'\n\n/**\n * Creates a derived atom whose value is the picked object property.\n * By default, the setter acts as a primitive atom's, changing the original atom.\n * A custom setter may also be passed, which uses an Immer Draft so that it may be mutated directly.\n */\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter?: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key]\n): WritableAtom<Value[Key], Update>\nexport function pickAtom<Value, Key extends keyof Value & keyof Draft<Value>, Update extends Value[Key]>(\n  anAtom: WritableAtom<Value, Value>,\n  key: Key,\n  setter: (draft: Draft<Value>[Key], update: Update) => Draft<Value>[Key] = (draft, update) =>\n    update as Draft<Value>[Key]\n): WritableAtom<Value[Key], Update> {\n  return atom(\n    (get) => get(anAtom)[key],\n    (get, set, update: Update) =>\n      set(withImmer(anAtom), (value) => {\n        const derived = setter(value[key], update)\n        value[key] = derived\n      })\n  )\n}\n\n/** Sets a togglable atom to invert its state at the next render. */\nexport function setTogglable(draft: boolean) {\n  return !draft\n}\n"],"sourceRoot":""}