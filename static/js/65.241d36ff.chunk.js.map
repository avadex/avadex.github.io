{"version":3,"sources":["lib/components/Error/ErrorDialog.tsx","lib/components/Swap/Status/StatusDialog.tsx"],"names":["HeaderIcon","styled","LargeIcon","StatusHeader","Icon","icon","iconColor","iconSize","children","flex","style","flexGrow","color","size","gap","textAlign","ErrorHeader","Column","open","ErrorColumn","ExpandoColumn","Rule","theme","dialog","ErrorDialog","header","error","action","onAction","useState","setOpen","details","setDetails","scrollbar","useScrollbar","padded","align","height","AlertTriangle","Subhead1","Body2","Subhead2","onClick","Expando","iconProps","ref","css","Code","name","message","errorMessage","TransactionRow","Row","ElapsedTime","tx","elapsedMs","setElapsedMs","useInterval","info","response","timestamp","addedTime","Date","now","toElapsedTime","useCallback","ms","sec","Math","floor","min","EtherscanA","a","accent","TransactionStatus","onClose","useMemo","receipt","status","CheckCircle","Spinner","heading","undefined","input","inputCurrencyAmount","output","outputCurrencyAmount","ButtonSmall","href","target","TransactionStatusDialog","Error"],"mappings":"kVAYMA,EAAaC,kBAAOC,YAAPD,CAAH,yGAeT,SAASE,EAAT,GAA6F,IAA/DC,EAA8D,EAApEC,KAAYC,EAAwD,EAAxDA,UAAwD,IAA7CC,gBAA6C,MAAlC,EAAkC,EAA/BC,EAA+B,EAA/BA,SAClE,OACE,qCACE,eAAC,UAAD,CAAQC,MAAI,EAACC,MAAO,CAAEC,SAAU,GAAhC,UACE,cAACX,EAAD,CAAYK,KAAMD,EAAMQ,MAAON,EAAWO,KAAMN,IAChD,cAAC,UAAD,CAAQO,IAAK,IAAML,MAAI,EAACC,MAAO,CAAEK,UAAW,UAA5C,SACGP,OAGL,cAAC,UAAD,OAKN,IAAMQ,EAAcf,kBAAOgB,UAAPhB,CAAH,wLAIC,qBAAGiB,KAAmB,EAAI,GAAK,MAK3CC,EAAclB,kBAAOgB,UAAPhB,CAAH,0BACXmB,EAAgBnB,kBAAOgB,UAAPhB,CAAH,0oBACJ,qBAAGiB,KAAmB,EAAI,IAGrCG,WACiB,qBAAGH,KAAmB,EAAI,MAI3CC,GAEa,qBAAGD,KAAmB,EAAI,IAKrCD,WAEW,qBAAGC,KAAmB,UAAY,KAIF,qBAAGI,MAAkBC,UAmBvD,SAASC,EAAT,GAA6E,IAAtDC,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,SAC3D,EAAwBC,oBAAS,GAAjC,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAA8BD,mBAAgC,MAA9D,mBAAOE,EAAP,KAAgBC,EAAhB,KACMC,EAAYC,kBAAaH,GAC/B,OACE,eAAC,UAAD,CAAQtB,MAAI,EAAC0B,QAAM,EAACrB,IAAK,IAAMsB,MAAM,UAAU1B,MAAO,CAAE2B,OAAQ,QAAhE,UACE,cAAClC,EAAD,CAAcE,KAAMiC,gBAAehC,UAAU,QAAQC,SAAUW,EAAO,EAAI,EAA1E,SACE,eAACF,EAAD,CAAaF,IAAKI,EAAO,EAAI,IAAMA,KAAMA,EAAzC,UACE,cAAC,aAAWqB,SAAZ,UACE,kDAEF,cAAC,aAAWC,MAAZ,UAAmBf,SAGvB,eAAC,UAAD,WACE,eAAC,UAAD,CAAKX,IAAK,GAAV,UACE,cAAC,OAAD,CAAMF,MAAM,cACZ,cAAC,aAAW6B,SAAZ,CAAqB7B,MAAM,YAA3B,SACE,6CAGJ,cAAC,aAAD,CAAYA,MAAM,YAAY8B,QAAS,kBAAMZ,GAASZ,IAAOb,KAAMsC,UAASC,UAAW,CAAE1B,aAE3F,eAACE,EAAD,CAAeX,MAAI,EAAC2B,MAAM,UAAUlB,KAAMA,EAA1C,UACE,cAAC,UAAD,IACA,cAACC,EAAD,UACE,cAAC,UAAD,CAAQL,IAAK,GAAK+B,IAAKb,EAAYc,IAAKb,EAAxC,SACE,eAAC,aAAWc,KAAZ,WACGrB,EAAMsB,KACNtB,EAAMuB,QAAN,YAAqBvB,EAAMuB,SAAY,UAI9C,cAAC,UAAD,CAAcP,QAASd,EAAvB,SAAkCD,Y,qMChHpCuB,EACJ,2JAEE,0BAKEC,EAAiBlD,kBAAOmD,UAAPnD,CAAH,4DAIpB,SAASoD,EAAT,GAAwE,IAAjDC,EAAgD,EAAhDA,GACrB,EAAkCzB,mBAAS,GAA3C,mBAAO0B,EAAP,KAAkBC,EAAlB,KACAC,mBACE,WACMH,EAAGI,KAAKC,SAASC,UACnBJ,EAAaF,EAAGI,KAAKC,SAASC,UAAYN,EAAGO,WAE7CL,EAAaM,KAAKC,MAAQT,EAAGO,aAGjCN,IAAcD,EAAGI,KAAKC,SAASC,UAAY,KAAO,KAEpD,IAAMI,EAAgBC,uBAAY,SAACC,GACjC,IAAIC,EAAMC,KAAKC,MAAMH,EAAK,KACpBI,EAAMF,KAAKC,MAAMF,EAAM,IAE7B,OADAA,GAAY,GACRG,EAEA,kDACGA,EADH,IACUH,KAIL,2CAAQA,OAEhB,IACH,OACE,eAAC,UAAD,CAAKrD,IAAK,GAAV,UACE,cAAC,QAAD,IACA,cAAC,aAAW0B,MAAZ,UAAmBwB,EAAcT,QAKvC,IAAMgB,EAAatE,UAAOuE,EAAV,qEACL,qBAAGlD,MAAkBmD,UAShC,SAASC,EAAT,GAAqE,IAAD,MAAvCpB,EAAuC,EAAvCA,GAAIqB,EAAmC,EAAnCA,QACzBvE,EAAOwE,mBAAQ,WAAO,IAAD,EACzB,OAAO,UAAAtB,EAAGuB,eAAH,eAAYC,QAASC,cAAcC,YACzC,WAAC1B,EAAGuB,eAAJ,aAAC,EAAYC,SACVG,EAAUL,mBAAQ,WAAO,IAAD,EAC5B,OAAO,UAAAtB,EAAGuB,eAAH,eAAYC,QAAS,gDAAuC,gDAClE,WAACxB,EAAGuB,eAAJ,aAAC,EAAYC,SAChB,OACE,eAAC,UAAD,CAAQrE,MAAI,EAAC0B,QAAM,EAACrB,IAAK,IAAMsB,MAAM,UAAU1B,MAAO,CAAE2B,OAAQ,QAAhE,UACE,eAAC,eAAD,CAAchC,KAAMD,EAAME,WAAW,UAAAgD,EAAGuB,eAAH,eAAYC,QAAS,eAAYI,EAAtE,UACE,cAAC,aAAW3C,SAAZ,UAAsB0C,IACtB,cAAC,UAAD,CAASE,MAAO7B,EAAGI,KAAK0B,oBAAqBC,OAAQ/B,EAAGI,KAAK4B,0BAE/D,eAACnC,EAAD,CAAgB1C,MAAI,EAApB,UACE,cAAC,aAAW8E,YAAZ,UACE,cAAChB,EAAD,CAAYiB,KAAK,iBAAiBC,OAAO,SAAzC,SACE,gDAGJ,cAACpC,EAAD,CAAaC,GAAIA,OAEnB,cAAC,UAAD,CAAcZ,QAASiC,EAAvB,SACE,qCAMO,SAASe,EAAT,GAA2E,IAAD,EAAvCpC,EAAuC,EAAvCA,GAAIqB,EAAmC,EAAnCA,QACpD,OAA8B,KAAvB,UAAArB,EAAGuB,eAAH,eAAYC,QACjB,cAAC,UAAD,CACErD,OAAQyB,EACRxB,MAAO,IAAIiE,MAAM,cACjBhE,OAAQ,kCACRC,SAAU+C,IAGZ,cAACD,EAAD,CAAmBpB,GAAIA,EAAIqB,QAASA","file":"static/js/65.241d36ff.chunk.js","sourcesContent":["import { Trans } from '@lingui/macro'\nimport useScrollbar from 'lib/hooks/useScrollbar'\nimport { AlertTriangle, Expando, Icon, Info, LargeIcon } from 'lib/icons'\nimport styled, { Color, ThemedText } from 'lib/theme'\nimport { ReactNode, useState } from 'react'\n\nimport ActionButton from '../ActionButton'\nimport { IconButton } from '../Button'\nimport Column from '../Column'\nimport Row from '../Row'\nimport Rule from '../Rule'\n\nconst HeaderIcon = styled(LargeIcon)`\n  flex-grow: 1;\n\n  svg {\n    transition: height 0.25s, width 0.25s;\n  }\n`\n\ninterface StatusHeaderProps {\n  icon: Icon\n  iconColor?: Color\n  iconSize?: number\n  children: ReactNode\n}\n\nexport function StatusHeader({ icon: Icon, iconColor, iconSize = 4, children }: StatusHeaderProps) {\n  return (\n    <>\n      <Column flex style={{ flexGrow: 1 }}>\n        <HeaderIcon icon={Icon} color={iconColor} size={iconSize} />\n        <Column gap={0.75} flex style={{ textAlign: 'center' }}>\n          {children}\n        </Column>\n      </Column>\n      <Rule />\n    </>\n  )\n}\n\nconst ErrorHeader = styled(Column)<{ open: boolean }>`\n  transition: gap 0.25s;\n\n  div:last-child {\n    max-height: ${({ open }) => (open ? 0 : 60 / 14)}em; // 3 * line-height\n    overflow-y: hidden;\n    transition: max-height 0.25s;\n  }\n`\nconst ErrorColumn = styled(Column)``\nconst ExpandoColumn = styled(Column)<{ open: boolean }>`\n  flex-grow: ${({ open }) => (open ? 2 : 0)};\n  transition: flex-grow 0.25s, gap 0.25s;\n\n  ${Rule} {\n    margin-bottom: ${({ open }) => (open ? 0 : 0.75)}em;\n    transition: margin-bottom 0.25s;\n  }\n\n  ${ErrorColumn} {\n    flex-basis: 0;\n    flex-grow: ${({ open }) => (open ? 1 : 0)};\n    overflow-y: hidden;\n    position: relative;\n    transition: flex-grow 0.25s;\n\n    ${Column} {\n      height: 100%;\n      padding: ${({ open }) => (open ? '0.5em 0' : 0)};\n      transition: padding 0.25s;\n\n      :after {\n        background: linear-gradient(#ffffff00, ${({ theme }) => theme.dialog});\n        bottom: 0;\n        content: '';\n        height: 0.75em;\n        pointer-events: none;\n        position: absolute;\n        width: calc(100% - 1em);\n      }\n    }\n  }\n`\n\ninterface ErrorDialogProps {\n  header?: ReactNode\n  error: Error\n  action: ReactNode\n  onAction: () => void\n}\n\nexport default function ErrorDialog({ header, error, action, onAction }: ErrorDialogProps) {\n  const [open, setOpen] = useState(false)\n  const [details, setDetails] = useState<HTMLDivElement | null>(null)\n  const scrollbar = useScrollbar(details)\n  return (\n    <Column flex padded gap={0.75} align=\"stretch\" style={{ height: '100%' }}>\n      <StatusHeader icon={AlertTriangle} iconColor=\"error\" iconSize={open ? 3 : 4}>\n        <ErrorHeader gap={open ? 0 : 0.75} open={open}>\n          <ThemedText.Subhead1>\n            <Trans>Something went wrong.</Trans>\n          </ThemedText.Subhead1>\n          <ThemedText.Body2>{header}</ThemedText.Body2>\n        </ErrorHeader>\n      </StatusHeader>\n      <Row>\n        <Row gap={0.5}>\n          <Info color=\"secondary\" />\n          <ThemedText.Subhead2 color=\"secondary\">\n            <Trans>Error details</Trans>\n          </ThemedText.Subhead2>\n        </Row>\n        <IconButton color=\"secondary\" onClick={() => setOpen(!open)} icon={Expando} iconProps={{ open }} />\n      </Row>\n      <ExpandoColumn flex align=\"stretch\" open={open}>\n        <Rule />\n        <ErrorColumn>\n          <Column gap={0.5} ref={setDetails} css={scrollbar}>\n            <ThemedText.Code>\n              {error.name}\n              {error.message ? `: ${error.message}` : ''}\n            </ThemedText.Code>\n          </Column>\n        </ErrorColumn>\n        <ActionButton onClick={onAction}>{action}</ActionButton>\n      </ExpandoColumn>\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport ErrorDialog, { StatusHeader } from 'lib/components/Error/ErrorDialog'\nimport useInterval from 'lib/hooks/useInterval'\nimport { CheckCircle, Clock, Spinner } from 'lib/icons'\nimport { SwapTransactionInfo, Transaction } from 'lib/state/transactions'\nimport styled, { ThemedText } from 'lib/theme'\nimport { useCallback, useMemo, useState } from 'react'\n\nimport ActionButton from '../../ActionButton'\nimport Column from '../../Column'\nimport Row from '../../Row'\nimport Summary from '../Summary'\n\nconst errorMessage = (\n  <Trans>\n    Try increasing your slippage tolerance.\n    <br />\n    NOTE: Fee on transfer and rebase tokens are incompatible with Uniswap V3.\n  </Trans>\n)\n\nconst TransactionRow = styled(Row)`\n  flex-direction: row-reverse;\n`\n\nfunction ElapsedTime({ tx }: { tx: Transaction<SwapTransactionInfo> }) {\n  const [elapsedMs, setElapsedMs] = useState(0)\n  useInterval(\n    () => {\n      if (tx.info.response.timestamp) {\n        setElapsedMs(tx.info.response.timestamp - tx.addedTime)\n      } else {\n        setElapsedMs(Date.now() - tx.addedTime)\n      }\n    },\n    elapsedMs === tx.info.response.timestamp ? null : 1000\n  )\n  const toElapsedTime = useCallback((ms: number) => {\n    let sec = Math.floor(ms / 1000)\n    const min = Math.floor(sec / 60)\n    sec = sec % 60\n    if (min) {\n      return (\n        <Trans>\n          {min}m {sec}s\n        </Trans>\n      )\n    } else {\n      return <Trans>{sec}s</Trans>\n    }\n  }, [])\n  return (\n    <Row gap={0.5}>\n      <Clock />\n      <ThemedText.Body2>{toElapsedTime(elapsedMs)}</ThemedText.Body2>\n    </Row>\n  )\n}\n\nconst EtherscanA = styled.a`\n  color: ${({ theme }) => theme.accent};\n  text-decoration: none;\n`\n\ninterface TransactionStatusProps {\n  tx: Transaction<SwapTransactionInfo>\n  onClose: () => void\n}\n\nfunction TransactionStatus({ tx, onClose }: TransactionStatusProps) {\n  const Icon = useMemo(() => {\n    return tx.receipt?.status ? CheckCircle : Spinner\n  }, [tx.receipt?.status])\n  const heading = useMemo(() => {\n    return tx.receipt?.status ? <Trans>Transaction submitted</Trans> : <Trans>Transaction pending</Trans>\n  }, [tx.receipt?.status])\n  return (\n    <Column flex padded gap={0.75} align=\"stretch\" style={{ height: '100%' }}>\n      <StatusHeader icon={Icon} iconColor={tx.receipt?.status ? 'success' : undefined}>\n        <ThemedText.Subhead1>{heading}</ThemedText.Subhead1>\n        <Summary input={tx.info.inputCurrencyAmount} output={tx.info.outputCurrencyAmount} />\n      </StatusHeader>\n      <TransactionRow flex>\n        <ThemedText.ButtonSmall>\n          <EtherscanA href=\"//etherscan.io\" target=\"_blank\">\n            <Trans>View on Etherscan</Trans>\n          </EtherscanA>\n        </ThemedText.ButtonSmall>\n        <ElapsedTime tx={tx} />\n      </TransactionRow>\n      <ActionButton onClick={onClose}>\n        <Trans>Close</Trans>\n      </ActionButton>\n    </Column>\n  )\n}\n\nexport default function TransactionStatusDialog({ tx, onClose }: TransactionStatusProps) {\n  return tx.receipt?.status === 0 ? (\n    <ErrorDialog\n      header={errorMessage}\n      error={new Error('TODO(zzmp)')}\n      action={<Trans>Dismiss</Trans>}\n      onAction={onClose}\n    />\n  ) : (\n    <TransactionStatus tx={tx} onClose={onClose} />\n  )\n}\n"],"sourceRoot":""}